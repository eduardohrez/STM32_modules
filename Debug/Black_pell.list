
Black_pell.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005914  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00004510  08005aac  08005aac  00015aac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009fbc  08009fbc  00020744  2**0
                  CONTENTS
  4 .ARM          00000008  08009fbc  08009fbc  00019fbc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009fc4  08009fc4  00020744  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009fc4  08009fc4  00019fc4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009fc8  08009fc8  00019fc8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000744  20000000  08009fcc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000688  20000744  0800a710  00020744  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000dcc  0800a710  00020dcc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020744  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000dd85  00000000  00000000  00020774  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000274e  00000000  00000000  0002e4f9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c90  00000000  00000000  00030c48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000b40  00000000  00000000  000318d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017a12  00000000  00000000  00032418  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011a15  00000000  00000000  00049e2a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000893c6  00000000  00000000  0005b83f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e4c05  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003234  00000000  00000000  000e4c58  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000744 	.word	0x20000744
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08005a94 	.word	0x08005a94

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000748 	.word	0x20000748
 80001d4:	08005a94 	.word	0x08005a94

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	; 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	3c01      	subs	r4, #1
 8000314:	bf28      	it	cs
 8000316:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800031a:	d2e9      	bcs.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_dmul>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000556:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800055a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055e:	bf1d      	ittte	ne
 8000560:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000564:	ea94 0f0c 	teqne	r4, ip
 8000568:	ea95 0f0c 	teqne	r5, ip
 800056c:	f000 f8de 	bleq	800072c <__aeabi_dmul+0x1dc>
 8000570:	442c      	add	r4, r5
 8000572:	ea81 0603 	eor.w	r6, r1, r3
 8000576:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000582:	bf18      	it	ne
 8000584:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000588:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800058c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000590:	d038      	beq.n	8000604 <__aeabi_dmul+0xb4>
 8000592:	fba0 ce02 	umull	ip, lr, r0, r2
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a6:	f04f 0600 	mov.w	r6, #0
 80005aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ae:	f09c 0f00 	teq	ip, #0
 80005b2:	bf18      	it	ne
 80005b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005c4:	d204      	bcs.n	80005d0 <__aeabi_dmul+0x80>
 80005c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ca:	416d      	adcs	r5, r5
 80005cc:	eb46 0606 	adc.w	r6, r6, r6
 80005d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e8:	bf88      	it	hi
 80005ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005ee:	d81e      	bhi.n	800062e <__aeabi_dmul+0xde>
 80005f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005f4:	bf08      	it	eq
 80005f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fa:	f150 0000 	adcs.w	r0, r0, #0
 80005fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000608:	ea46 0101 	orr.w	r1, r6, r1
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	ea81 0103 	eor.w	r1, r1, r3
 8000614:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000618:	bfc2      	ittt	gt
 800061a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000622:	bd70      	popgt	{r4, r5, r6, pc}
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000628:	f04f 0e00 	mov.w	lr, #0
 800062c:	3c01      	subs	r4, #1
 800062e:	f300 80ab 	bgt.w	8000788 <__aeabi_dmul+0x238>
 8000632:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000636:	bfde      	ittt	le
 8000638:	2000      	movle	r0, #0
 800063a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800063e:	bd70      	pople	{r4, r5, r6, pc}
 8000640:	f1c4 0400 	rsb	r4, r4, #0
 8000644:	3c20      	subs	r4, #32
 8000646:	da35      	bge.n	80006b4 <__aeabi_dmul+0x164>
 8000648:	340c      	adds	r4, #12
 800064a:	dc1b      	bgt.n	8000684 <__aeabi_dmul+0x134>
 800064c:	f104 0414 	add.w	r4, r4, #20
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f305 	lsl.w	r3, r0, r5
 8000658:	fa20 f004 	lsr.w	r0, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea40 0002 	orr.w	r0, r0, r2
 8000664:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000668:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	fa21 f604 	lsr.w	r6, r1, r4
 8000674:	eb42 0106 	adc.w	r1, r2, r6
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f1c4 040c 	rsb	r4, r4, #12
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f304 	lsl.w	r3, r0, r4
 8000690:	fa20 f005 	lsr.w	r0, r0, r5
 8000694:	fa01 f204 	lsl.w	r2, r1, r4
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a4:	f141 0100 	adc.w	r1, r1, #0
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f205 	lsl.w	r2, r0, r5
 80006bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c0:	fa20 f304 	lsr.w	r3, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea43 0302 	orr.w	r3, r3, r2
 80006cc:	fa21 f004 	lsr.w	r0, r1, r4
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d4:	fa21 f204 	lsr.w	r2, r1, r4
 80006d8:	ea20 0002 	bic.w	r0, r0, r2
 80006dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f094 0f00 	teq	r4, #0
 80006f0:	d10f      	bne.n	8000712 <__aeabi_dmul+0x1c2>
 80006f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006f6:	0040      	lsls	r0, r0, #1
 80006f8:	eb41 0101 	adc.w	r1, r1, r1
 80006fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000700:	bf08      	it	eq
 8000702:	3c01      	subeq	r4, #1
 8000704:	d0f7      	beq.n	80006f6 <__aeabi_dmul+0x1a6>
 8000706:	ea41 0106 	orr.w	r1, r1, r6
 800070a:	f095 0f00 	teq	r5, #0
 800070e:	bf18      	it	ne
 8000710:	4770      	bxne	lr
 8000712:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	eb43 0303 	adc.w	r3, r3, r3
 800071c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000720:	bf08      	it	eq
 8000722:	3d01      	subeq	r5, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1c6>
 8000726:	ea43 0306 	orr.w	r3, r3, r6
 800072a:	4770      	bx	lr
 800072c:	ea94 0f0c 	teq	r4, ip
 8000730:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000734:	bf18      	it	ne
 8000736:	ea95 0f0c 	teqne	r5, ip
 800073a:	d00c      	beq.n	8000756 <__aeabi_dmul+0x206>
 800073c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000746:	d1d1      	bne.n	80006ec <__aeabi_dmul+0x19c>
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075a:	bf06      	itte	eq
 800075c:	4610      	moveq	r0, r2
 800075e:	4619      	moveq	r1, r3
 8000760:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000764:	d019      	beq.n	800079a <__aeabi_dmul+0x24a>
 8000766:	ea94 0f0c 	teq	r4, ip
 800076a:	d102      	bne.n	8000772 <__aeabi_dmul+0x222>
 800076c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000770:	d113      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000772:	ea95 0f0c 	teq	r5, ip
 8000776:	d105      	bne.n	8000784 <__aeabi_dmul+0x234>
 8000778:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800077c:	bf1c      	itt	ne
 800077e:	4610      	movne	r0, r2
 8000780:	4619      	movne	r1, r3
 8000782:	d10a      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000790:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	bd70      	pop	{r4, r5, r6, pc}
 800079a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800079e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007a2:	bd70      	pop	{r4, r5, r6, pc}

080007a4 <__aeabi_ddiv>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007aa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b2:	bf1d      	ittte	ne
 80007b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b8:	ea94 0f0c 	teqne	r4, ip
 80007bc:	ea95 0f0c 	teqne	r5, ip
 80007c0:	f000 f8a7 	bleq	8000912 <__aeabi_ddiv+0x16e>
 80007c4:	eba4 0405 	sub.w	r4, r4, r5
 80007c8:	ea81 0e03 	eor.w	lr, r1, r3
 80007cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d4:	f000 8088 	beq.w	80008e8 <__aeabi_ddiv+0x144>
 80007d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007dc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007fc:	429d      	cmp	r5, r3
 80007fe:	bf08      	it	eq
 8000800:	4296      	cmpeq	r6, r2
 8000802:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000806:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800080a:	d202      	bcs.n	8000812 <__aeabi_ddiv+0x6e>
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	1ab6      	subs	r6, r6, r2
 8000814:	eb65 0503 	sbc.w	r5, r5, r3
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000822:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 000c 	orrcs.w	r0, r0, ip
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000880:	ea55 0e06 	orrs.w	lr, r5, r6
 8000884:	d018      	beq.n	80008b8 <__aeabi_ddiv+0x114>
 8000886:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000892:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000896:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a2:	d1c0      	bne.n	8000826 <__aeabi_ddiv+0x82>
 80008a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a8:	d10b      	bne.n	80008c2 <__aeabi_ddiv+0x11e>
 80008aa:	ea41 0100 	orr.w	r1, r1, r0
 80008ae:	f04f 0000 	mov.w	r0, #0
 80008b2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008b6:	e7b6      	b.n	8000826 <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008bc:	bf04      	itt	eq
 80008be:	4301      	orreq	r1, r0
 80008c0:	2000      	moveq	r0, #0
 80008c2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008c6:	bf88      	it	hi
 80008c8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008cc:	f63f aeaf 	bhi.w	800062e <__aeabi_dmul+0xde>
 80008d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d4:	bf04      	itt	eq
 80008d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008de:	f150 0000 	adcs.w	r0, r0, #0
 80008e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f4:	bfc2      	ittt	gt
 80008f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000904:	f04f 0e00 	mov.w	lr, #0
 8000908:	3c01      	subs	r4, #1
 800090a:	e690      	b.n	800062e <__aeabi_dmul+0xde>
 800090c:	ea45 0e06 	orr.w	lr, r5, r6
 8000910:	e68d      	b.n	800062e <__aeabi_dmul+0xde>
 8000912:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000916:	ea94 0f0c 	teq	r4, ip
 800091a:	bf08      	it	eq
 800091c:	ea95 0f0c 	teqeq	r5, ip
 8000920:	f43f af3b 	beq.w	800079a <__aeabi_dmul+0x24a>
 8000924:	ea94 0f0c 	teq	r4, ip
 8000928:	d10a      	bne.n	8000940 <__aeabi_ddiv+0x19c>
 800092a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092e:	f47f af34 	bne.w	800079a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	f47f af25 	bne.w	8000784 <__aeabi_dmul+0x234>
 800093a:	4610      	mov	r0, r2
 800093c:	4619      	mov	r1, r3
 800093e:	e72c      	b.n	800079a <__aeabi_dmul+0x24a>
 8000940:	ea95 0f0c 	teq	r5, ip
 8000944:	d106      	bne.n	8000954 <__aeabi_ddiv+0x1b0>
 8000946:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094a:	f43f aefd 	beq.w	8000748 <__aeabi_dmul+0x1f8>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e722      	b.n	800079a <__aeabi_dmul+0x24a>
 8000954:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095e:	f47f aec5 	bne.w	80006ec <__aeabi_dmul+0x19c>
 8000962:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000966:	f47f af0d 	bne.w	8000784 <__aeabi_dmul+0x234>
 800096a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096e:	f47f aeeb 	bne.w	8000748 <__aeabi_dmul+0x1f8>
 8000972:	e712      	b.n	800079a <__aeabi_dmul+0x24a>

08000974 <__aeabi_d2f>:
 8000974:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000978:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 800097c:	bf24      	itt	cs
 800097e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000982:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000986:	d90d      	bls.n	80009a4 <__aeabi_d2f+0x30>
 8000988:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800098c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000990:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000994:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000998:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 800099c:	bf08      	it	eq
 800099e:	f020 0001 	biceq.w	r0, r0, #1
 80009a2:	4770      	bx	lr
 80009a4:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80009a8:	d121      	bne.n	80009ee <__aeabi_d2f+0x7a>
 80009aa:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80009ae:	bfbc      	itt	lt
 80009b0:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80009b4:	4770      	bxlt	lr
 80009b6:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ba:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80009be:	f1c2 0218 	rsb	r2, r2, #24
 80009c2:	f1c2 0c20 	rsb	ip, r2, #32
 80009c6:	fa10 f30c 	lsls.w	r3, r0, ip
 80009ca:	fa20 f002 	lsr.w	r0, r0, r2
 80009ce:	bf18      	it	ne
 80009d0:	f040 0001 	orrne.w	r0, r0, #1
 80009d4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009d8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80009dc:	fa03 fc0c 	lsl.w	ip, r3, ip
 80009e0:	ea40 000c 	orr.w	r0, r0, ip
 80009e4:	fa23 f302 	lsr.w	r3, r3, r2
 80009e8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80009ec:	e7cc      	b.n	8000988 <__aeabi_d2f+0x14>
 80009ee:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80009f2:	d107      	bne.n	8000a04 <__aeabi_d2f+0x90>
 80009f4:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80009f8:	bf1e      	ittt	ne
 80009fa:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80009fe:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000a02:	4770      	bxne	lr
 8000a04:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000a08:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000a0c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a10:	4770      	bx	lr
 8000a12:	bf00      	nop

08000a14 <__aeabi_uldivmod>:
 8000a14:	b953      	cbnz	r3, 8000a2c <__aeabi_uldivmod+0x18>
 8000a16:	b94a      	cbnz	r2, 8000a2c <__aeabi_uldivmod+0x18>
 8000a18:	2900      	cmp	r1, #0
 8000a1a:	bf08      	it	eq
 8000a1c:	2800      	cmpeq	r0, #0
 8000a1e:	bf1c      	itt	ne
 8000a20:	f04f 31ff 	movne.w	r1, #4294967295
 8000a24:	f04f 30ff 	movne.w	r0, #4294967295
 8000a28:	f000 b974 	b.w	8000d14 <__aeabi_idiv0>
 8000a2c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a30:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a34:	f000 f806 	bl	8000a44 <__udivmoddi4>
 8000a38:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a3c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a40:	b004      	add	sp, #16
 8000a42:	4770      	bx	lr

08000a44 <__udivmoddi4>:
 8000a44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a48:	9d08      	ldr	r5, [sp, #32]
 8000a4a:	4604      	mov	r4, r0
 8000a4c:	468e      	mov	lr, r1
 8000a4e:	2b00      	cmp	r3, #0
 8000a50:	d14d      	bne.n	8000aee <__udivmoddi4+0xaa>
 8000a52:	428a      	cmp	r2, r1
 8000a54:	4694      	mov	ip, r2
 8000a56:	d969      	bls.n	8000b2c <__udivmoddi4+0xe8>
 8000a58:	fab2 f282 	clz	r2, r2
 8000a5c:	b152      	cbz	r2, 8000a74 <__udivmoddi4+0x30>
 8000a5e:	fa01 f302 	lsl.w	r3, r1, r2
 8000a62:	f1c2 0120 	rsb	r1, r2, #32
 8000a66:	fa20 f101 	lsr.w	r1, r0, r1
 8000a6a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000a6e:	ea41 0e03 	orr.w	lr, r1, r3
 8000a72:	4094      	lsls	r4, r2
 8000a74:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000a78:	0c21      	lsrs	r1, r4, #16
 8000a7a:	fbbe f6f8 	udiv	r6, lr, r8
 8000a7e:	fa1f f78c 	uxth.w	r7, ip
 8000a82:	fb08 e316 	mls	r3, r8, r6, lr
 8000a86:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000a8a:	fb06 f107 	mul.w	r1, r6, r7
 8000a8e:	4299      	cmp	r1, r3
 8000a90:	d90a      	bls.n	8000aa8 <__udivmoddi4+0x64>
 8000a92:	eb1c 0303 	adds.w	r3, ip, r3
 8000a96:	f106 30ff 	add.w	r0, r6, #4294967295
 8000a9a:	f080 811f 	bcs.w	8000cdc <__udivmoddi4+0x298>
 8000a9e:	4299      	cmp	r1, r3
 8000aa0:	f240 811c 	bls.w	8000cdc <__udivmoddi4+0x298>
 8000aa4:	3e02      	subs	r6, #2
 8000aa6:	4463      	add	r3, ip
 8000aa8:	1a5b      	subs	r3, r3, r1
 8000aaa:	b2a4      	uxth	r4, r4
 8000aac:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ab0:	fb08 3310 	mls	r3, r8, r0, r3
 8000ab4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ab8:	fb00 f707 	mul.w	r7, r0, r7
 8000abc:	42a7      	cmp	r7, r4
 8000abe:	d90a      	bls.n	8000ad6 <__udivmoddi4+0x92>
 8000ac0:	eb1c 0404 	adds.w	r4, ip, r4
 8000ac4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000ac8:	f080 810a 	bcs.w	8000ce0 <__udivmoddi4+0x29c>
 8000acc:	42a7      	cmp	r7, r4
 8000ace:	f240 8107 	bls.w	8000ce0 <__udivmoddi4+0x29c>
 8000ad2:	4464      	add	r4, ip
 8000ad4:	3802      	subs	r0, #2
 8000ad6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000ada:	1be4      	subs	r4, r4, r7
 8000adc:	2600      	movs	r6, #0
 8000ade:	b11d      	cbz	r5, 8000ae8 <__udivmoddi4+0xa4>
 8000ae0:	40d4      	lsrs	r4, r2
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	e9c5 4300 	strd	r4, r3, [r5]
 8000ae8:	4631      	mov	r1, r6
 8000aea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000aee:	428b      	cmp	r3, r1
 8000af0:	d909      	bls.n	8000b06 <__udivmoddi4+0xc2>
 8000af2:	2d00      	cmp	r5, #0
 8000af4:	f000 80ef 	beq.w	8000cd6 <__udivmoddi4+0x292>
 8000af8:	2600      	movs	r6, #0
 8000afa:	e9c5 0100 	strd	r0, r1, [r5]
 8000afe:	4630      	mov	r0, r6
 8000b00:	4631      	mov	r1, r6
 8000b02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b06:	fab3 f683 	clz	r6, r3
 8000b0a:	2e00      	cmp	r6, #0
 8000b0c:	d14a      	bne.n	8000ba4 <__udivmoddi4+0x160>
 8000b0e:	428b      	cmp	r3, r1
 8000b10:	d302      	bcc.n	8000b18 <__udivmoddi4+0xd4>
 8000b12:	4282      	cmp	r2, r0
 8000b14:	f200 80f9 	bhi.w	8000d0a <__udivmoddi4+0x2c6>
 8000b18:	1a84      	subs	r4, r0, r2
 8000b1a:	eb61 0303 	sbc.w	r3, r1, r3
 8000b1e:	2001      	movs	r0, #1
 8000b20:	469e      	mov	lr, r3
 8000b22:	2d00      	cmp	r5, #0
 8000b24:	d0e0      	beq.n	8000ae8 <__udivmoddi4+0xa4>
 8000b26:	e9c5 4e00 	strd	r4, lr, [r5]
 8000b2a:	e7dd      	b.n	8000ae8 <__udivmoddi4+0xa4>
 8000b2c:	b902      	cbnz	r2, 8000b30 <__udivmoddi4+0xec>
 8000b2e:	deff      	udf	#255	; 0xff
 8000b30:	fab2 f282 	clz	r2, r2
 8000b34:	2a00      	cmp	r2, #0
 8000b36:	f040 8092 	bne.w	8000c5e <__udivmoddi4+0x21a>
 8000b3a:	eba1 010c 	sub.w	r1, r1, ip
 8000b3e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b42:	fa1f fe8c 	uxth.w	lr, ip
 8000b46:	2601      	movs	r6, #1
 8000b48:	0c20      	lsrs	r0, r4, #16
 8000b4a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000b4e:	fb07 1113 	mls	r1, r7, r3, r1
 8000b52:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000b56:	fb0e f003 	mul.w	r0, lr, r3
 8000b5a:	4288      	cmp	r0, r1
 8000b5c:	d908      	bls.n	8000b70 <__udivmoddi4+0x12c>
 8000b5e:	eb1c 0101 	adds.w	r1, ip, r1
 8000b62:	f103 38ff 	add.w	r8, r3, #4294967295
 8000b66:	d202      	bcs.n	8000b6e <__udivmoddi4+0x12a>
 8000b68:	4288      	cmp	r0, r1
 8000b6a:	f200 80cb 	bhi.w	8000d04 <__udivmoddi4+0x2c0>
 8000b6e:	4643      	mov	r3, r8
 8000b70:	1a09      	subs	r1, r1, r0
 8000b72:	b2a4      	uxth	r4, r4
 8000b74:	fbb1 f0f7 	udiv	r0, r1, r7
 8000b78:	fb07 1110 	mls	r1, r7, r0, r1
 8000b7c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000b80:	fb0e fe00 	mul.w	lr, lr, r0
 8000b84:	45a6      	cmp	lr, r4
 8000b86:	d908      	bls.n	8000b9a <__udivmoddi4+0x156>
 8000b88:	eb1c 0404 	adds.w	r4, ip, r4
 8000b8c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000b90:	d202      	bcs.n	8000b98 <__udivmoddi4+0x154>
 8000b92:	45a6      	cmp	lr, r4
 8000b94:	f200 80bb 	bhi.w	8000d0e <__udivmoddi4+0x2ca>
 8000b98:	4608      	mov	r0, r1
 8000b9a:	eba4 040e 	sub.w	r4, r4, lr
 8000b9e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000ba2:	e79c      	b.n	8000ade <__udivmoddi4+0x9a>
 8000ba4:	f1c6 0720 	rsb	r7, r6, #32
 8000ba8:	40b3      	lsls	r3, r6
 8000baa:	fa22 fc07 	lsr.w	ip, r2, r7
 8000bae:	ea4c 0c03 	orr.w	ip, ip, r3
 8000bb2:	fa20 f407 	lsr.w	r4, r0, r7
 8000bb6:	fa01 f306 	lsl.w	r3, r1, r6
 8000bba:	431c      	orrs	r4, r3
 8000bbc:	40f9      	lsrs	r1, r7
 8000bbe:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000bc2:	fa00 f306 	lsl.w	r3, r0, r6
 8000bc6:	fbb1 f8f9 	udiv	r8, r1, r9
 8000bca:	0c20      	lsrs	r0, r4, #16
 8000bcc:	fa1f fe8c 	uxth.w	lr, ip
 8000bd0:	fb09 1118 	mls	r1, r9, r8, r1
 8000bd4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000bd8:	fb08 f00e 	mul.w	r0, r8, lr
 8000bdc:	4288      	cmp	r0, r1
 8000bde:	fa02 f206 	lsl.w	r2, r2, r6
 8000be2:	d90b      	bls.n	8000bfc <__udivmoddi4+0x1b8>
 8000be4:	eb1c 0101 	adds.w	r1, ip, r1
 8000be8:	f108 3aff 	add.w	sl, r8, #4294967295
 8000bec:	f080 8088 	bcs.w	8000d00 <__udivmoddi4+0x2bc>
 8000bf0:	4288      	cmp	r0, r1
 8000bf2:	f240 8085 	bls.w	8000d00 <__udivmoddi4+0x2bc>
 8000bf6:	f1a8 0802 	sub.w	r8, r8, #2
 8000bfa:	4461      	add	r1, ip
 8000bfc:	1a09      	subs	r1, r1, r0
 8000bfe:	b2a4      	uxth	r4, r4
 8000c00:	fbb1 f0f9 	udiv	r0, r1, r9
 8000c04:	fb09 1110 	mls	r1, r9, r0, r1
 8000c08:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000c0c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c10:	458e      	cmp	lr, r1
 8000c12:	d908      	bls.n	8000c26 <__udivmoddi4+0x1e2>
 8000c14:	eb1c 0101 	adds.w	r1, ip, r1
 8000c18:	f100 34ff 	add.w	r4, r0, #4294967295
 8000c1c:	d26c      	bcs.n	8000cf8 <__udivmoddi4+0x2b4>
 8000c1e:	458e      	cmp	lr, r1
 8000c20:	d96a      	bls.n	8000cf8 <__udivmoddi4+0x2b4>
 8000c22:	3802      	subs	r0, #2
 8000c24:	4461      	add	r1, ip
 8000c26:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000c2a:	fba0 9402 	umull	r9, r4, r0, r2
 8000c2e:	eba1 010e 	sub.w	r1, r1, lr
 8000c32:	42a1      	cmp	r1, r4
 8000c34:	46c8      	mov	r8, r9
 8000c36:	46a6      	mov	lr, r4
 8000c38:	d356      	bcc.n	8000ce8 <__udivmoddi4+0x2a4>
 8000c3a:	d053      	beq.n	8000ce4 <__udivmoddi4+0x2a0>
 8000c3c:	b15d      	cbz	r5, 8000c56 <__udivmoddi4+0x212>
 8000c3e:	ebb3 0208 	subs.w	r2, r3, r8
 8000c42:	eb61 010e 	sbc.w	r1, r1, lr
 8000c46:	fa01 f707 	lsl.w	r7, r1, r7
 8000c4a:	fa22 f306 	lsr.w	r3, r2, r6
 8000c4e:	40f1      	lsrs	r1, r6
 8000c50:	431f      	orrs	r7, r3
 8000c52:	e9c5 7100 	strd	r7, r1, [r5]
 8000c56:	2600      	movs	r6, #0
 8000c58:	4631      	mov	r1, r6
 8000c5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c5e:	f1c2 0320 	rsb	r3, r2, #32
 8000c62:	40d8      	lsrs	r0, r3
 8000c64:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c68:	fa21 f303 	lsr.w	r3, r1, r3
 8000c6c:	4091      	lsls	r1, r2
 8000c6e:	4301      	orrs	r1, r0
 8000c70:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c74:	fa1f fe8c 	uxth.w	lr, ip
 8000c78:	fbb3 f0f7 	udiv	r0, r3, r7
 8000c7c:	fb07 3610 	mls	r6, r7, r0, r3
 8000c80:	0c0b      	lsrs	r3, r1, #16
 8000c82:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000c86:	fb00 f60e 	mul.w	r6, r0, lr
 8000c8a:	429e      	cmp	r6, r3
 8000c8c:	fa04 f402 	lsl.w	r4, r4, r2
 8000c90:	d908      	bls.n	8000ca4 <__udivmoddi4+0x260>
 8000c92:	eb1c 0303 	adds.w	r3, ip, r3
 8000c96:	f100 38ff 	add.w	r8, r0, #4294967295
 8000c9a:	d22f      	bcs.n	8000cfc <__udivmoddi4+0x2b8>
 8000c9c:	429e      	cmp	r6, r3
 8000c9e:	d92d      	bls.n	8000cfc <__udivmoddi4+0x2b8>
 8000ca0:	3802      	subs	r0, #2
 8000ca2:	4463      	add	r3, ip
 8000ca4:	1b9b      	subs	r3, r3, r6
 8000ca6:	b289      	uxth	r1, r1
 8000ca8:	fbb3 f6f7 	udiv	r6, r3, r7
 8000cac:	fb07 3316 	mls	r3, r7, r6, r3
 8000cb0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000cb4:	fb06 f30e 	mul.w	r3, r6, lr
 8000cb8:	428b      	cmp	r3, r1
 8000cba:	d908      	bls.n	8000cce <__udivmoddi4+0x28a>
 8000cbc:	eb1c 0101 	adds.w	r1, ip, r1
 8000cc0:	f106 38ff 	add.w	r8, r6, #4294967295
 8000cc4:	d216      	bcs.n	8000cf4 <__udivmoddi4+0x2b0>
 8000cc6:	428b      	cmp	r3, r1
 8000cc8:	d914      	bls.n	8000cf4 <__udivmoddi4+0x2b0>
 8000cca:	3e02      	subs	r6, #2
 8000ccc:	4461      	add	r1, ip
 8000cce:	1ac9      	subs	r1, r1, r3
 8000cd0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000cd4:	e738      	b.n	8000b48 <__udivmoddi4+0x104>
 8000cd6:	462e      	mov	r6, r5
 8000cd8:	4628      	mov	r0, r5
 8000cda:	e705      	b.n	8000ae8 <__udivmoddi4+0xa4>
 8000cdc:	4606      	mov	r6, r0
 8000cde:	e6e3      	b.n	8000aa8 <__udivmoddi4+0x64>
 8000ce0:	4618      	mov	r0, r3
 8000ce2:	e6f8      	b.n	8000ad6 <__udivmoddi4+0x92>
 8000ce4:	454b      	cmp	r3, r9
 8000ce6:	d2a9      	bcs.n	8000c3c <__udivmoddi4+0x1f8>
 8000ce8:	ebb9 0802 	subs.w	r8, r9, r2
 8000cec:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000cf0:	3801      	subs	r0, #1
 8000cf2:	e7a3      	b.n	8000c3c <__udivmoddi4+0x1f8>
 8000cf4:	4646      	mov	r6, r8
 8000cf6:	e7ea      	b.n	8000cce <__udivmoddi4+0x28a>
 8000cf8:	4620      	mov	r0, r4
 8000cfa:	e794      	b.n	8000c26 <__udivmoddi4+0x1e2>
 8000cfc:	4640      	mov	r0, r8
 8000cfe:	e7d1      	b.n	8000ca4 <__udivmoddi4+0x260>
 8000d00:	46d0      	mov	r8, sl
 8000d02:	e77b      	b.n	8000bfc <__udivmoddi4+0x1b8>
 8000d04:	3b02      	subs	r3, #2
 8000d06:	4461      	add	r1, ip
 8000d08:	e732      	b.n	8000b70 <__udivmoddi4+0x12c>
 8000d0a:	4630      	mov	r0, r6
 8000d0c:	e709      	b.n	8000b22 <__udivmoddi4+0xde>
 8000d0e:	4464      	add	r4, ip
 8000d10:	3802      	subs	r0, #2
 8000d12:	e742      	b.n	8000b9a <__udivmoddi4+0x156>

08000d14 <__aeabi_idiv0>:
 8000d14:	4770      	bx	lr
 8000d16:	bf00      	nop

08000d18 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	b082      	sub	sp, #8
 8000d1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
uint8_t count=0;
 8000d1e:	2300      	movs	r3, #0
 8000d20:	71fb      	strb	r3, [r7, #7]
uint8_t funct_count 	= 0;
 8000d22:	2300      	movs	r3, #0
 8000d24:	71bb      	strb	r3, [r7, #6]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d26:	f000 fbdb 	bl	80014e0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d2a:	f000 f863 	bl	8000df4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d2e:	f000 f963 	bl	8000ff8 <MX_GPIO_Init>
  MX_I2C2_Init();
 8000d32:	f000 f8c7 	bl	8000ec4 <MX_I2C2_Init>
  MX_SPI2_Init();
 8000d36:	f000 f8f3 	bl	8000f20 <MX_SPI2_Init>
  MX_SPI3_Init();
 8000d3a:	f000 f927 	bl	8000f8c <MX_SPI3_Init>
  /* USER CODE BEGIN 2 */


  init_I2C_P2();
 8000d3e:	f003 f9f3 	bl	8004128 <init_I2C_P2>
  verify();
 8000d42:	f002 ff5d 	bl	8003c00 <verify>
  verify_LCD();
 8000d46:	f004 f8cf 	bl	8004ee8 <verify_LCD>
  Configure_LCD(0);
 8000d4a:	2000      	movs	r0, #0
 8000d4c:	f004 f8ee 	bl	8004f2c <Configure_LCD>
  clear_lcd();
 8000d50:	f004 f910 	bl	8004f74 <clear_lcd>
  Init_SPI_BASE();
 8000d54:	f003 ffb2 	bl	8004cbc <Init_SPI_BASE>
  init_Pins();
 8000d58:	f004 fb46 	bl	80053e8 <init_Pins>
  init_LCD_S7();
 8000d5c:	f004 fb60 	bl	8005420 <init_LCD_S7>
  Init_SD_SPI();
 8000d60:	f003 fa24 	bl	80041ac <Init_SD_SPI>

  configure_IF_Pixel_frmt();
 8000d64:	f000 fa14 	bl	8001190 <configure_IF_Pixel_frmt>
  configure_SPI_LCD();
 8000d68:	f000 f9e2 	bl	8001130 <configure_SPI_LCD>
  Partial_Reset();
 8000d6c:	f004 fb6d 	bl	800544a <Partial_Reset>
  Set_All_LCD_RGB(0,255,255);
 8000d70:	22ff      	movs	r2, #255	; 0xff
 8000d72:	21ff      	movs	r1, #255	; 0xff
 8000d74:	2000      	movs	r0, #0
 8000d76:	f004 fc01 	bl	800557c <Set_All_LCD_RGB>
//  Set_Etart_X_Y_End(0, 100, 50, 100);
//  RGB_Pix_Num(0X10, 0XAA, 0XFF, 50050);
//  Domi_test();

    WR_IMAGE_type_JPG(1);
 8000d7a:	2001      	movs	r0, #1
 8000d7c:	f004 fcb4 	bl	80056e8 <WR_IMAGE_type_JPG>
//  test_swicht(1);

//  Set_brightness(0xAA);

    //Test CRC7
    int8_t test_val[] ={0x23,0x65,0x90,0x43,0x71,0x39};
 8000d80:	4a19      	ldr	r2, [pc, #100]	; (8000de8 <main+0xd0>)
 8000d82:	463b      	mov	r3, r7
 8000d84:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000d88:	6018      	str	r0, [r3, #0]
 8000d8a:	3304      	adds	r3, #4
 8000d8c:	8019      	strh	r1, [r3, #0]
//    (void)get_crc(test_val,6);
    SPI_initial_block();
 8000d8e:	f003 fa4f 	bl	8004230 <SPI_initial_block>
    SPI_SD_Initialaze();
 8000d92:	f003 faf5 	bl	8004380 <SPI_SD_Initialaze>
    Dummy_funct_SD();
 8000d96:	f003 faa9 	bl	80042ec <Dummy_funct_SD>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  //clear_lcd();
	  HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8000d9a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000d9e:	4813      	ldr	r0, [pc, #76]	; (8000dec <main+0xd4>)
 8000da0:	f000 fee3 	bl	8001b6a <HAL_GPIO_TogglePin>
	  HAL_Delay(500);
 8000da4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000da8:	f000 fc0c 	bl	80015c4 <HAL_Delay>


//	  SIG_RESET_LCD();
//	  HAL_SPI_Transmit(&hspi1, value_pdat_1, 2, 1);

	  if(state_int_A0 == 1)
 8000dac:	4b10      	ldr	r3, [pc, #64]	; (8000df0 <main+0xd8>)
 8000dae:	781b      	ldrb	r3, [r3, #0]
 8000db0:	2b01      	cmp	r3, #1
 8000db2:	d1f2      	bne.n	8000d9a <main+0x82>
	  {

		  steps_routine(funct_count);
 8000db4:	79bb      	ldrb	r3, [r7, #6]
 8000db6:	4618      	mov	r0, r3
 8000db8:	f004 fdf6 	bl	80059a8 <steps_routine>
		  if (count==20)
 8000dbc:	79fb      	ldrb	r3, [r7, #7]
 8000dbe:	2b14      	cmp	r3, #20
 8000dc0:	d10e      	bne.n	8000de0 <main+0xc8>
		  {
			  count=0;
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	71fb      	strb	r3, [r7, #7]
			  funct_count++;
 8000dc6:	79bb      	ldrb	r3, [r7, #6]
 8000dc8:	3301      	adds	r3, #1
 8000dca:	71bb      	strb	r3, [r7, #6]
			  clear_lcd();
 8000dcc:	f004 f8d2 	bl	8004f74 <clear_lcd>
			  if(funct_count == 4)
 8000dd0:	79bb      	ldrb	r3, [r7, #6]
 8000dd2:	2b04      	cmp	r3, #4
 8000dd4:	d104      	bne.n	8000de0 <main+0xc8>
			  {
				  state_int_A0 	=	0;
 8000dd6:	4b06      	ldr	r3, [pc, #24]	; (8000df0 <main+0xd8>)
 8000dd8:	2200      	movs	r2, #0
 8000dda:	701a      	strb	r2, [r3, #0]
				  funct_count 	= 	0;
 8000ddc:	2300      	movs	r3, #0
 8000dde:	71bb      	strb	r3, [r7, #6]
			  }

		  }
		  count++;
 8000de0:	79fb      	ldrb	r3, [r7, #7]
 8000de2:	3301      	adds	r3, #1
 8000de4:	71fb      	strb	r3, [r7, #7]
	  HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8000de6:	e7d8      	b.n	8000d9a <main+0x82>
 8000de8:	08005aac 	.word	0x08005aac
 8000dec:	40020800 	.word	0x40020800
 8000df0:	20000864 	.word	0x20000864

08000df4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	b094      	sub	sp, #80	; 0x50
 8000df8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000dfa:	f107 0320 	add.w	r3, r7, #32
 8000dfe:	2230      	movs	r2, #48	; 0x30
 8000e00:	2100      	movs	r1, #0
 8000e02:	4618      	mov	r0, r3
 8000e04:	f004 fe3e 	bl	8005a84 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e08:	f107 030c 	add.w	r3, r7, #12
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	601a      	str	r2, [r3, #0]
 8000e10:	605a      	str	r2, [r3, #4]
 8000e12:	609a      	str	r2, [r3, #8]
 8000e14:	60da      	str	r2, [r3, #12]
 8000e16:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e18:	2300      	movs	r3, #0
 8000e1a:	60bb      	str	r3, [r7, #8]
 8000e1c:	4b27      	ldr	r3, [pc, #156]	; (8000ebc <SystemClock_Config+0xc8>)
 8000e1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e20:	4a26      	ldr	r2, [pc, #152]	; (8000ebc <SystemClock_Config+0xc8>)
 8000e22:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e26:	6413      	str	r3, [r2, #64]	; 0x40
 8000e28:	4b24      	ldr	r3, [pc, #144]	; (8000ebc <SystemClock_Config+0xc8>)
 8000e2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e2c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e30:	60bb      	str	r3, [r7, #8]
 8000e32:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000e34:	2300      	movs	r3, #0
 8000e36:	607b      	str	r3, [r7, #4]
 8000e38:	4b21      	ldr	r3, [pc, #132]	; (8000ec0 <SystemClock_Config+0xcc>)
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	4a20      	ldr	r2, [pc, #128]	; (8000ec0 <SystemClock_Config+0xcc>)
 8000e3e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000e42:	6013      	str	r3, [r2, #0]
 8000e44:	4b1e      	ldr	r3, [pc, #120]	; (8000ec0 <SystemClock_Config+0xcc>)
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000e4c:	607b      	str	r3, [r7, #4]
 8000e4e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000e50:	2302      	movs	r3, #2
 8000e52:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000e54:	2301      	movs	r3, #1
 8000e56:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000e58:	2310      	movs	r3, #16
 8000e5a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e5c:	2302      	movs	r3, #2
 8000e5e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000e60:	2300      	movs	r3, #0
 8000e62:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000e64:	2308      	movs	r3, #8
 8000e66:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 90;
 8000e68:	235a      	movs	r3, #90	; 0x5a
 8000e6a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000e6c:	2302      	movs	r3, #2
 8000e6e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000e70:	2304      	movs	r3, #4
 8000e72:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e74:	f107 0320 	add.w	r3, r7, #32
 8000e78:	4618      	mov	r0, r3
 8000e7a:	f001 fe4b 	bl	8002b14 <HAL_RCC_OscConfig>
 8000e7e:	4603      	mov	r3, r0
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	d001      	beq.n	8000e88 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000e84:	f000 f9a8 	bl	80011d8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e88:	230f      	movs	r3, #15
 8000e8a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e8c:	2302      	movs	r3, #2
 8000e8e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e90:	2300      	movs	r3, #0
 8000e92:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000e94:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e98:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000e9e:	f107 030c 	add.w	r3, r7, #12
 8000ea2:	2102      	movs	r1, #2
 8000ea4:	4618      	mov	r0, r3
 8000ea6:	f002 f8ad 	bl	8003004 <HAL_RCC_ClockConfig>
 8000eaa:	4603      	mov	r3, r0
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	d001      	beq.n	8000eb4 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000eb0:	f000 f992 	bl	80011d8 <Error_Handler>
  }
}
 8000eb4:	bf00      	nop
 8000eb6:	3750      	adds	r7, #80	; 0x50
 8000eb8:	46bd      	mov	sp, r7
 8000eba:	bd80      	pop	{r7, pc}
 8000ebc:	40023800 	.word	0x40023800
 8000ec0:	40007000 	.word	0x40007000

08000ec4 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000ec8:	4b12      	ldr	r3, [pc, #72]	; (8000f14 <MX_I2C2_Init+0x50>)
 8000eca:	4a13      	ldr	r2, [pc, #76]	; (8000f18 <MX_I2C2_Init+0x54>)
 8000ecc:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 400000;
 8000ece:	4b11      	ldr	r3, [pc, #68]	; (8000f14 <MX_I2C2_Init+0x50>)
 8000ed0:	4a12      	ldr	r2, [pc, #72]	; (8000f1c <MX_I2C2_Init+0x58>)
 8000ed2:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000ed4:	4b0f      	ldr	r3, [pc, #60]	; (8000f14 <MX_I2C2_Init+0x50>)
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8000eda:	4b0e      	ldr	r3, [pc, #56]	; (8000f14 <MX_I2C2_Init+0x50>)
 8000edc:	2200      	movs	r2, #0
 8000ede:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000ee0:	4b0c      	ldr	r3, [pc, #48]	; (8000f14 <MX_I2C2_Init+0x50>)
 8000ee2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000ee6:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000ee8:	4b0a      	ldr	r3, [pc, #40]	; (8000f14 <MX_I2C2_Init+0x50>)
 8000eea:	2200      	movs	r2, #0
 8000eec:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8000eee:	4b09      	ldr	r3, [pc, #36]	; (8000f14 <MX_I2C2_Init+0x50>)
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000ef4:	4b07      	ldr	r3, [pc, #28]	; (8000f14 <MX_I2C2_Init+0x50>)
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000efa:	4b06      	ldr	r3, [pc, #24]	; (8000f14 <MX_I2C2_Init+0x50>)
 8000efc:	2200      	movs	r2, #0
 8000efe:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000f00:	4804      	ldr	r0, [pc, #16]	; (8000f14 <MX_I2C2_Init+0x50>)
 8000f02:	f000 fe71 	bl	8001be8 <HAL_I2C_Init>
 8000f06:	4603      	mov	r3, r0
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	d001      	beq.n	8000f10 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8000f0c:	f000 f964 	bl	80011d8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000f10:	bf00      	nop
 8000f12:	bd80      	pop	{r7, pc}
 8000f14:	20000760 	.word	0x20000760
 8000f18:	40005800 	.word	0x40005800
 8000f1c:	00061a80 	.word	0x00061a80

08000f20 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000f20:	b580      	push	{r7, lr}
 8000f22:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000f24:	4b17      	ldr	r3, [pc, #92]	; (8000f84 <MX_SPI2_Init+0x64>)
 8000f26:	4a18      	ldr	r2, [pc, #96]	; (8000f88 <MX_SPI2_Init+0x68>)
 8000f28:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000f2a:	4b16      	ldr	r3, [pc, #88]	; (8000f84 <MX_SPI2_Init+0x64>)
 8000f2c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000f30:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000f32:	4b14      	ldr	r3, [pc, #80]	; (8000f84 <MX_SPI2_Init+0x64>)
 8000f34:	2200      	movs	r2, #0
 8000f36:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000f38:	4b12      	ldr	r3, [pc, #72]	; (8000f84 <MX_SPI2_Init+0x64>)
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8000f3e:	4b11      	ldr	r3, [pc, #68]	; (8000f84 <MX_SPI2_Init+0x64>)
 8000f40:	2202      	movs	r2, #2
 8000f42:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000f44:	4b0f      	ldr	r3, [pc, #60]	; (8000f84 <MX_SPI2_Init+0x64>)
 8000f46:	2200      	movs	r2, #0
 8000f48:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000f4a:	4b0e      	ldr	r3, [pc, #56]	; (8000f84 <MX_SPI2_Init+0x64>)
 8000f4c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000f50:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000f52:	4b0c      	ldr	r3, [pc, #48]	; (8000f84 <MX_SPI2_Init+0x64>)
 8000f54:	2200      	movs	r2, #0
 8000f56:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000f58:	4b0a      	ldr	r3, [pc, #40]	; (8000f84 <MX_SPI2_Init+0x64>)
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000f5e:	4b09      	ldr	r3, [pc, #36]	; (8000f84 <MX_SPI2_Init+0x64>)
 8000f60:	2200      	movs	r2, #0
 8000f62:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000f64:	4b07      	ldr	r3, [pc, #28]	; (8000f84 <MX_SPI2_Init+0x64>)
 8000f66:	2200      	movs	r2, #0
 8000f68:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8000f6a:	4b06      	ldr	r3, [pc, #24]	; (8000f84 <MX_SPI2_Init+0x64>)
 8000f6c:	220a      	movs	r2, #10
 8000f6e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000f70:	4804      	ldr	r0, [pc, #16]	; (8000f84 <MX_SPI2_Init+0x64>)
 8000f72:	f002 fa13 	bl	800339c <HAL_SPI_Init>
 8000f76:	4603      	mov	r3, r0
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	d001      	beq.n	8000f80 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8000f7c:	f000 f92c 	bl	80011d8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000f80:	bf00      	nop
 8000f82:	bd80      	pop	{r7, pc}
 8000f84:	200007b4 	.word	0x200007b4
 8000f88:	40003800 	.word	0x40003800

08000f8c <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8000f90:	4b17      	ldr	r3, [pc, #92]	; (8000ff0 <MX_SPI3_Init+0x64>)
 8000f92:	4a18      	ldr	r2, [pc, #96]	; (8000ff4 <MX_SPI3_Init+0x68>)
 8000f94:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8000f96:	4b16      	ldr	r3, [pc, #88]	; (8000ff0 <MX_SPI3_Init+0x64>)
 8000f98:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000f9c:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8000f9e:	4b14      	ldr	r3, [pc, #80]	; (8000ff0 <MX_SPI3_Init+0x64>)
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8000fa4:	4b12      	ldr	r3, [pc, #72]	; (8000ff0 <MX_SPI3_Init+0x64>)
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000faa:	4b11      	ldr	r3, [pc, #68]	; (8000ff0 <MX_SPI3_Init+0x64>)
 8000fac:	2200      	movs	r2, #0
 8000fae:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000fb0:	4b0f      	ldr	r3, [pc, #60]	; (8000ff0 <MX_SPI3_Init+0x64>)
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8000fb6:	4b0e      	ldr	r3, [pc, #56]	; (8000ff0 <MX_SPI3_Init+0x64>)
 8000fb8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000fbc:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000fbe:	4b0c      	ldr	r3, [pc, #48]	; (8000ff0 <MX_SPI3_Init+0x64>)
 8000fc0:	2208      	movs	r2, #8
 8000fc2:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000fc4:	4b0a      	ldr	r3, [pc, #40]	; (8000ff0 <MX_SPI3_Init+0x64>)
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8000fca:	4b09      	ldr	r3, [pc, #36]	; (8000ff0 <MX_SPI3_Init+0x64>)
 8000fcc:	2200      	movs	r2, #0
 8000fce:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000fd0:	4b07      	ldr	r3, [pc, #28]	; (8000ff0 <MX_SPI3_Init+0x64>)
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 8000fd6:	4b06      	ldr	r3, [pc, #24]	; (8000ff0 <MX_SPI3_Init+0x64>)
 8000fd8:	220a      	movs	r2, #10
 8000fda:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8000fdc:	4804      	ldr	r0, [pc, #16]	; (8000ff0 <MX_SPI3_Init+0x64>)
 8000fde:	f002 f9dd 	bl	800339c <HAL_SPI_Init>
 8000fe2:	4603      	mov	r3, r0
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	d001      	beq.n	8000fec <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 8000fe8:	f000 f8f6 	bl	80011d8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8000fec:	bf00      	nop
 8000fee:	bd80      	pop	{r7, pc}
 8000ff0:	2000080c 	.word	0x2000080c
 8000ff4:	40003c00 	.word	0x40003c00

08000ff8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b08a      	sub	sp, #40	; 0x28
 8000ffc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ffe:	f107 0314 	add.w	r3, r7, #20
 8001002:	2200      	movs	r2, #0
 8001004:	601a      	str	r2, [r3, #0]
 8001006:	605a      	str	r2, [r3, #4]
 8001008:	609a      	str	r2, [r3, #8]
 800100a:	60da      	str	r2, [r3, #12]
 800100c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800100e:	2300      	movs	r3, #0
 8001010:	613b      	str	r3, [r7, #16]
 8001012:	4b44      	ldr	r3, [pc, #272]	; (8001124 <MX_GPIO_Init+0x12c>)
 8001014:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001016:	4a43      	ldr	r2, [pc, #268]	; (8001124 <MX_GPIO_Init+0x12c>)
 8001018:	f043 0304 	orr.w	r3, r3, #4
 800101c:	6313      	str	r3, [r2, #48]	; 0x30
 800101e:	4b41      	ldr	r3, [pc, #260]	; (8001124 <MX_GPIO_Init+0x12c>)
 8001020:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001022:	f003 0304 	and.w	r3, r3, #4
 8001026:	613b      	str	r3, [r7, #16]
 8001028:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800102a:	2300      	movs	r3, #0
 800102c:	60fb      	str	r3, [r7, #12]
 800102e:	4b3d      	ldr	r3, [pc, #244]	; (8001124 <MX_GPIO_Init+0x12c>)
 8001030:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001032:	4a3c      	ldr	r2, [pc, #240]	; (8001124 <MX_GPIO_Init+0x12c>)
 8001034:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001038:	6313      	str	r3, [r2, #48]	; 0x30
 800103a:	4b3a      	ldr	r3, [pc, #232]	; (8001124 <MX_GPIO_Init+0x12c>)
 800103c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800103e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001042:	60fb      	str	r3, [r7, #12]
 8001044:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001046:	2300      	movs	r3, #0
 8001048:	60bb      	str	r3, [r7, #8]
 800104a:	4b36      	ldr	r3, [pc, #216]	; (8001124 <MX_GPIO_Init+0x12c>)
 800104c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800104e:	4a35      	ldr	r2, [pc, #212]	; (8001124 <MX_GPIO_Init+0x12c>)
 8001050:	f043 0301 	orr.w	r3, r3, #1
 8001054:	6313      	str	r3, [r2, #48]	; 0x30
 8001056:	4b33      	ldr	r3, [pc, #204]	; (8001124 <MX_GPIO_Init+0x12c>)
 8001058:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800105a:	f003 0301 	and.w	r3, r3, #1
 800105e:	60bb      	str	r3, [r7, #8]
 8001060:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001062:	2300      	movs	r3, #0
 8001064:	607b      	str	r3, [r7, #4]
 8001066:	4b2f      	ldr	r3, [pc, #188]	; (8001124 <MX_GPIO_Init+0x12c>)
 8001068:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800106a:	4a2e      	ldr	r2, [pc, #184]	; (8001124 <MX_GPIO_Init+0x12c>)
 800106c:	f043 0302 	orr.w	r3, r3, #2
 8001070:	6313      	str	r3, [r2, #48]	; 0x30
 8001072:	4b2c      	ldr	r3, [pc, #176]	; (8001124 <MX_GPIO_Init+0x12c>)
 8001074:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001076:	f003 0302 	and.w	r3, r3, #2
 800107a:	607b      	str	r3, [r7, #4]
 800107c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 800107e:	2200      	movs	r2, #0
 8001080:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001084:	4828      	ldr	r0, [pc, #160]	; (8001128 <MX_GPIO_Init+0x130>)
 8001086:	f000 fd57 	bl	8001b38 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, CS_SD_Pin|CS_ST7_Pin|RES_Pin|DC_Pin, GPIO_PIN_RESET);
 800108a:	2200      	movs	r2, #0
 800108c:	f640 6104 	movw	r1, #3588	; 0xe04
 8001090:	4826      	ldr	r0, [pc, #152]	; (800112c <MX_GPIO_Init+0x134>)
 8001092:	f000 fd51 	bl	8001b38 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8001096:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800109a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800109c:	2301      	movs	r3, #1
 800109e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010a0:	2300      	movs	r3, #0
 80010a2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010a4:	2300      	movs	r3, #0
 80010a6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80010a8:	f107 0314 	add.w	r3, r7, #20
 80010ac:	4619      	mov	r1, r3
 80010ae:	481e      	ldr	r0, [pc, #120]	; (8001128 <MX_GPIO_Init+0x130>)
 80010b0:	f000 fbbe 	bl	8001830 <HAL_GPIO_Init>

  /*Configure GPIO pin : Interrupt_Pin */
  GPIO_InitStruct.Pin = Interrupt_Pin;
 80010b4:	2301      	movs	r3, #1
 80010b6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80010b8:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80010bc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010be:	2300      	movs	r3, #0
 80010c0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Interrupt_GPIO_Port, &GPIO_InitStruct);
 80010c2:	f107 0314 	add.w	r3, r7, #20
 80010c6:	4619      	mov	r1, r3
 80010c8:	4818      	ldr	r0, [pc, #96]	; (800112c <MX_GPIO_Init+0x134>)
 80010ca:	f000 fbb1 	bl	8001830 <HAL_GPIO_Init>

  /*Configure GPIO pins : CS_SD_Pin CS_ST7_Pin */
  GPIO_InitStruct.Pin = CS_SD_Pin|CS_ST7_Pin;
 80010ce:	f44f 7301 	mov.w	r3, #516	; 0x204
 80010d2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010d4:	2301      	movs	r3, #1
 80010d6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010d8:	2300      	movs	r3, #0
 80010da:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010dc:	2303      	movs	r3, #3
 80010de:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010e0:	f107 0314 	add.w	r3, r7, #20
 80010e4:	4619      	mov	r1, r3
 80010e6:	4811      	ldr	r0, [pc, #68]	; (800112c <MX_GPIO_Init+0x134>)
 80010e8:	f000 fba2 	bl	8001830 <HAL_GPIO_Init>

  /*Configure GPIO pins : RES_Pin DC_Pin */
  GPIO_InitStruct.Pin = RES_Pin|DC_Pin;
 80010ec:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80010f0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010f2:	2301      	movs	r3, #1
 80010f4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010f6:	2300      	movs	r3, #0
 80010f8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80010fa:	2302      	movs	r3, #2
 80010fc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010fe:	f107 0314 	add.w	r3, r7, #20
 8001102:	4619      	mov	r1, r3
 8001104:	4809      	ldr	r0, [pc, #36]	; (800112c <MX_GPIO_Init+0x134>)
 8001106:	f000 fb93 	bl	8001830 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 800110a:	2200      	movs	r2, #0
 800110c:	2100      	movs	r1, #0
 800110e:	2006      	movs	r0, #6
 8001110:	f000 fb57 	bl	80017c2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8001114:	2006      	movs	r0, #6
 8001116:	f000 fb70 	bl	80017fa <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800111a:	bf00      	nop
 800111c:	3728      	adds	r7, #40	; 0x28
 800111e:	46bd      	mov	sp, r7
 8001120:	bd80      	pop	{r7, pc}
 8001122:	bf00      	nop
 8001124:	40023800 	.word	0x40023800
 8001128:	40020800 	.word	0x40020800
 800112c:	40020000 	.word	0x40020000

08001130 <configure_SPI_LCD>:

/* USER CODE BEGIN 4 */
void configure_SPI_LCD(void)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	b082      	sub	sp, #8
 8001134:	af00      	add	r7, sp, #0
	Data_Accss Configure;
	uint8_t *conf= NULL;
 8001136:	2300      	movs	r3, #0
 8001138:	607b      	str	r3, [r7, #4]
	Configure.Color_Order=0;
 800113a:	783b      	ldrb	r3, [r7, #0]
 800113c:	f36f 03c3 	bfc	r3, #3, #1
 8001140:	703b      	strb	r3, [r7, #0]
	Configure.Colum_Adr_Ord=0;
 8001142:	783b      	ldrb	r3, [r7, #0]
 8001144:	f36f 1386 	bfc	r3, #6, #1
 8001148:	703b      	strb	r3, [r7, #0]
	Configure.Disp_Dat_Latch=0;
 800114a:	783b      	ldrb	r3, [r7, #0]
 800114c:	f36f 0382 	bfc	r3, #2, #1
 8001150:	703b      	strb	r3, [r7, #0]
	Configure.Line_Adrr_Ord=0;
 8001152:	783b      	ldrb	r3, [r7, #0]
 8001154:	f36f 1304 	bfc	r3, #4, #1
 8001158:	703b      	strb	r3, [r7, #0]
	Configure.Pge_Addrs_Ord=0;
 800115a:	783b      	ldrb	r3, [r7, #0]
 800115c:	f36f 13c7 	bfc	r3, #7, #1
 8001160:	703b      	strb	r3, [r7, #0]
	Configure.Pge_Colum_Ord=0;
 8001162:	783b      	ldrb	r3, [r7, #0]
 8001164:	f36f 1345 	bfc	r3, #5, #1
 8001168:	703b      	strb	r3, [r7, #0]
	Configure.dumy=0;
 800116a:	783b      	ldrb	r3, [r7, #0]
 800116c:	f36f 0300 	bfc	r3, #0, #1
 8001170:	703b      	strb	r3, [r7, #0]
	Configure.dumy1=0;
 8001172:	783b      	ldrb	r3, [r7, #0]
 8001174:	f36f 0341 	bfc	r3, #1, #1
 8001178:	703b      	strb	r3, [r7, #0]
	conf =&Configure;
 800117a:	463b      	mov	r3, r7
 800117c:	607b      	str	r3, [r7, #4]
	Mem_acces_crt(*conf );
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	781b      	ldrb	r3, [r3, #0]
 8001182:	4618      	mov	r0, r3
 8001184:	f004 fa30 	bl	80055e8 <Mem_acces_crt>

}
 8001188:	bf00      	nop
 800118a:	3708      	adds	r7, #8
 800118c:	46bd      	mov	sp, r7
 800118e:	bd80      	pop	{r7, pc}

08001190 <configure_IF_Pixel_frmt>:

static void configure_IF_Pixel_frmt(void)
{
 8001190:	b580      	push	{r7, lr}
 8001192:	b082      	sub	sp, #8
 8001194:	af00      	add	r7, sp, #0
	Pixel_Format Creat_pix_frmt;
	Creat_pix_frmt.Color_IF_Frm 	= Bits_16;
 8001196:	793b      	ldrb	r3, [r7, #4]
 8001198:	2205      	movs	r2, #5
 800119a:	f362 0302 	bfi	r3, r2, #0, #3
 800119e:	713b      	strb	r3, [r7, #4]
	Creat_pix_frmt.RGB_IF_Col_frm 	= RGB_262K;
 80011a0:	793b      	ldrb	r3, [r7, #4]
 80011a2:	2205      	movs	r2, #5
 80011a4:	f362 03c5 	bfi	r3, r2, #3, #3
 80011a8:	713b      	strb	r3, [r7, #4]
	Pixel_format(Creat_pix_frmt);
 80011aa:	7938      	ldrb	r0, [r7, #4]
 80011ac:	f004 fa2f 	bl	800560e <Pixel_format>
}
 80011b0:	bf00      	nop
 80011b2:	3708      	adds	r7, #8
 80011b4:	46bd      	mov	sp, r7
 80011b6:	bd80      	pop	{r7, pc}

080011b8 <Set_flag_interrupt>:


extern void Set_flag_interrupt(uint8_t Value)
{
 80011b8:	b480      	push	{r7}
 80011ba:	b083      	sub	sp, #12
 80011bc:	af00      	add	r7, sp, #0
 80011be:	4603      	mov	r3, r0
 80011c0:	71fb      	strb	r3, [r7, #7]
	state_int_A0 = Value;
 80011c2:	4a04      	ldr	r2, [pc, #16]	; (80011d4 <Set_flag_interrupt+0x1c>)
 80011c4:	79fb      	ldrb	r3, [r7, #7]
 80011c6:	7013      	strb	r3, [r2, #0]
}
 80011c8:	bf00      	nop
 80011ca:	370c      	adds	r7, #12
 80011cc:	46bd      	mov	sp, r7
 80011ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d2:	4770      	bx	lr
 80011d4:	20000864 	.word	0x20000864

080011d8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80011d8:	b480      	push	{r7}
 80011da:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80011dc:	b672      	cpsid	i
}
 80011de:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80011e0:	e7fe      	b.n	80011e0 <Error_Handler+0x8>
	...

080011e4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80011e4:	b480      	push	{r7}
 80011e6:	b083      	sub	sp, #12
 80011e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011ea:	2300      	movs	r3, #0
 80011ec:	607b      	str	r3, [r7, #4]
 80011ee:	4b10      	ldr	r3, [pc, #64]	; (8001230 <HAL_MspInit+0x4c>)
 80011f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011f2:	4a0f      	ldr	r2, [pc, #60]	; (8001230 <HAL_MspInit+0x4c>)
 80011f4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80011f8:	6453      	str	r3, [r2, #68]	; 0x44
 80011fa:	4b0d      	ldr	r3, [pc, #52]	; (8001230 <HAL_MspInit+0x4c>)
 80011fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011fe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001202:	607b      	str	r3, [r7, #4]
 8001204:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001206:	2300      	movs	r3, #0
 8001208:	603b      	str	r3, [r7, #0]
 800120a:	4b09      	ldr	r3, [pc, #36]	; (8001230 <HAL_MspInit+0x4c>)
 800120c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800120e:	4a08      	ldr	r2, [pc, #32]	; (8001230 <HAL_MspInit+0x4c>)
 8001210:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001214:	6413      	str	r3, [r2, #64]	; 0x40
 8001216:	4b06      	ldr	r3, [pc, #24]	; (8001230 <HAL_MspInit+0x4c>)
 8001218:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800121a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800121e:	603b      	str	r3, [r7, #0]
 8001220:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001222:	bf00      	nop
 8001224:	370c      	adds	r7, #12
 8001226:	46bd      	mov	sp, r7
 8001228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800122c:	4770      	bx	lr
 800122e:	bf00      	nop
 8001230:	40023800 	.word	0x40023800

08001234 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001234:	b580      	push	{r7, lr}
 8001236:	b08a      	sub	sp, #40	; 0x28
 8001238:	af00      	add	r7, sp, #0
 800123a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800123c:	f107 0314 	add.w	r3, r7, #20
 8001240:	2200      	movs	r2, #0
 8001242:	601a      	str	r2, [r3, #0]
 8001244:	605a      	str	r2, [r3, #4]
 8001246:	609a      	str	r2, [r3, #8]
 8001248:	60da      	str	r2, [r3, #12]
 800124a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	4a21      	ldr	r2, [pc, #132]	; (80012d8 <HAL_I2C_MspInit+0xa4>)
 8001252:	4293      	cmp	r3, r2
 8001254:	d13c      	bne.n	80012d0 <HAL_I2C_MspInit+0x9c>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001256:	2300      	movs	r3, #0
 8001258:	613b      	str	r3, [r7, #16]
 800125a:	4b20      	ldr	r3, [pc, #128]	; (80012dc <HAL_I2C_MspInit+0xa8>)
 800125c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800125e:	4a1f      	ldr	r2, [pc, #124]	; (80012dc <HAL_I2C_MspInit+0xa8>)
 8001260:	f043 0302 	orr.w	r3, r3, #2
 8001264:	6313      	str	r3, [r2, #48]	; 0x30
 8001266:	4b1d      	ldr	r3, [pc, #116]	; (80012dc <HAL_I2C_MspInit+0xa8>)
 8001268:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800126a:	f003 0302 	and.w	r3, r3, #2
 800126e:	613b      	str	r3, [r7, #16]
 8001270:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB3     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001272:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001276:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001278:	2312      	movs	r3, #18
 800127a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800127c:	2301      	movs	r3, #1
 800127e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001280:	2303      	movs	r3, #3
 8001282:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001284:	2304      	movs	r3, #4
 8001286:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001288:	f107 0314 	add.w	r3, r7, #20
 800128c:	4619      	mov	r1, r3
 800128e:	4814      	ldr	r0, [pc, #80]	; (80012e0 <HAL_I2C_MspInit+0xac>)
 8001290:	f000 face 	bl	8001830 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001294:	2308      	movs	r3, #8
 8001296:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001298:	2312      	movs	r3, #18
 800129a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800129c:	2301      	movs	r3, #1
 800129e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012a0:	2303      	movs	r3, #3
 80012a2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_I2C2;
 80012a4:	2309      	movs	r3, #9
 80012a6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012a8:	f107 0314 	add.w	r3, r7, #20
 80012ac:	4619      	mov	r1, r3
 80012ae:	480c      	ldr	r0, [pc, #48]	; (80012e0 <HAL_I2C_MspInit+0xac>)
 80012b0:	f000 fabe 	bl	8001830 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 80012b4:	2300      	movs	r3, #0
 80012b6:	60fb      	str	r3, [r7, #12]
 80012b8:	4b08      	ldr	r3, [pc, #32]	; (80012dc <HAL_I2C_MspInit+0xa8>)
 80012ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012bc:	4a07      	ldr	r2, [pc, #28]	; (80012dc <HAL_I2C_MspInit+0xa8>)
 80012be:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80012c2:	6413      	str	r3, [r2, #64]	; 0x40
 80012c4:	4b05      	ldr	r3, [pc, #20]	; (80012dc <HAL_I2C_MspInit+0xa8>)
 80012c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012c8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80012cc:	60fb      	str	r3, [r7, #12]
 80012ce:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 80012d0:	bf00      	nop
 80012d2:	3728      	adds	r7, #40	; 0x28
 80012d4:	46bd      	mov	sp, r7
 80012d6:	bd80      	pop	{r7, pc}
 80012d8:	40005800 	.word	0x40005800
 80012dc:	40023800 	.word	0x40023800
 80012e0:	40020400 	.word	0x40020400

080012e4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	b08c      	sub	sp, #48	; 0x30
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012ec:	f107 031c 	add.w	r3, r7, #28
 80012f0:	2200      	movs	r2, #0
 80012f2:	601a      	str	r2, [r3, #0]
 80012f4:	605a      	str	r2, [r3, #4]
 80012f6:	609a      	str	r2, [r3, #8]
 80012f8:	60da      	str	r2, [r3, #12]
 80012fa:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	4a3b      	ldr	r2, [pc, #236]	; (80013f0 <HAL_SPI_MspInit+0x10c>)
 8001302:	4293      	cmp	r3, r2
 8001304:	d12d      	bne.n	8001362 <HAL_SPI_MspInit+0x7e>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001306:	2300      	movs	r3, #0
 8001308:	61bb      	str	r3, [r7, #24]
 800130a:	4b3a      	ldr	r3, [pc, #232]	; (80013f4 <HAL_SPI_MspInit+0x110>)
 800130c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800130e:	4a39      	ldr	r2, [pc, #228]	; (80013f4 <HAL_SPI_MspInit+0x110>)
 8001310:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001314:	6413      	str	r3, [r2, #64]	; 0x40
 8001316:	4b37      	ldr	r3, [pc, #220]	; (80013f4 <HAL_SPI_MspInit+0x110>)
 8001318:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800131a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800131e:	61bb      	str	r3, [r7, #24]
 8001320:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001322:	2300      	movs	r3, #0
 8001324:	617b      	str	r3, [r7, #20]
 8001326:	4b33      	ldr	r3, [pc, #204]	; (80013f4 <HAL_SPI_MspInit+0x110>)
 8001328:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800132a:	4a32      	ldr	r2, [pc, #200]	; (80013f4 <HAL_SPI_MspInit+0x110>)
 800132c:	f043 0302 	orr.w	r3, r3, #2
 8001330:	6313      	str	r3, [r2, #48]	; 0x30
 8001332:	4b30      	ldr	r3, [pc, #192]	; (80013f4 <HAL_SPI_MspInit+0x110>)
 8001334:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001336:	f003 0302 	and.w	r3, r3, #2
 800133a:	617b      	str	r3, [r7, #20]
 800133c:	697b      	ldr	r3, [r7, #20]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 800133e:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8001342:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001344:	2302      	movs	r3, #2
 8001346:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001348:	2300      	movs	r3, #0
 800134a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800134c:	2303      	movs	r3, #3
 800134e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001350:	2305      	movs	r3, #5
 8001352:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001354:	f107 031c 	add.w	r3, r7, #28
 8001358:	4619      	mov	r1, r3
 800135a:	4827      	ldr	r0, [pc, #156]	; (80013f8 <HAL_SPI_MspInit+0x114>)
 800135c:	f000 fa68 	bl	8001830 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8001360:	e041      	b.n	80013e6 <HAL_SPI_MspInit+0x102>
  else if(hspi->Instance==SPI3)
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	4a25      	ldr	r2, [pc, #148]	; (80013fc <HAL_SPI_MspInit+0x118>)
 8001368:	4293      	cmp	r3, r2
 800136a:	d13c      	bne.n	80013e6 <HAL_SPI_MspInit+0x102>
    __HAL_RCC_SPI3_CLK_ENABLE();
 800136c:	2300      	movs	r3, #0
 800136e:	613b      	str	r3, [r7, #16]
 8001370:	4b20      	ldr	r3, [pc, #128]	; (80013f4 <HAL_SPI_MspInit+0x110>)
 8001372:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001374:	4a1f      	ldr	r2, [pc, #124]	; (80013f4 <HAL_SPI_MspInit+0x110>)
 8001376:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800137a:	6413      	str	r3, [r2, #64]	; 0x40
 800137c:	4b1d      	ldr	r3, [pc, #116]	; (80013f4 <HAL_SPI_MspInit+0x110>)
 800137e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001380:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001384:	613b      	str	r3, [r7, #16]
 8001386:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001388:	2300      	movs	r3, #0
 800138a:	60fb      	str	r3, [r7, #12]
 800138c:	4b19      	ldr	r3, [pc, #100]	; (80013f4 <HAL_SPI_MspInit+0x110>)
 800138e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001390:	4a18      	ldr	r2, [pc, #96]	; (80013f4 <HAL_SPI_MspInit+0x110>)
 8001392:	f043 0302 	orr.w	r3, r3, #2
 8001396:	6313      	str	r3, [r2, #48]	; 0x30
 8001398:	4b16      	ldr	r3, [pc, #88]	; (80013f4 <HAL_SPI_MspInit+0x110>)
 800139a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800139c:	f003 0302 	and.w	r3, r3, #2
 80013a0:	60fb      	str	r3, [r7, #12]
 80013a2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80013a4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80013a8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013aa:	2302      	movs	r3, #2
 80013ac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ae:	2300      	movs	r3, #0
 80013b0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013b2:	2303      	movs	r3, #3
 80013b4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI3;
 80013b6:	2307      	movs	r3, #7
 80013b8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013ba:	f107 031c 	add.w	r3, r7, #28
 80013be:	4619      	mov	r1, r3
 80013c0:	480d      	ldr	r0, [pc, #52]	; (80013f8 <HAL_SPI_MspInit+0x114>)
 80013c2:	f000 fa35 	bl	8001830 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80013c6:	2330      	movs	r3, #48	; 0x30
 80013c8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013ca:	2302      	movs	r3, #2
 80013cc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ce:	2300      	movs	r3, #0
 80013d0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013d2:	2303      	movs	r3, #3
 80013d4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80013d6:	2306      	movs	r3, #6
 80013d8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013da:	f107 031c 	add.w	r3, r7, #28
 80013de:	4619      	mov	r1, r3
 80013e0:	4805      	ldr	r0, [pc, #20]	; (80013f8 <HAL_SPI_MspInit+0x114>)
 80013e2:	f000 fa25 	bl	8001830 <HAL_GPIO_Init>
}
 80013e6:	bf00      	nop
 80013e8:	3730      	adds	r7, #48	; 0x30
 80013ea:	46bd      	mov	sp, r7
 80013ec:	bd80      	pop	{r7, pc}
 80013ee:	bf00      	nop
 80013f0:	40003800 	.word	0x40003800
 80013f4:	40023800 	.word	0x40023800
 80013f8:	40020400 	.word	0x40020400
 80013fc:	40003c00 	.word	0x40003c00

08001400 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001400:	b480      	push	{r7}
 8001402:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001404:	e7fe      	b.n	8001404 <NMI_Handler+0x4>

08001406 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001406:	b480      	push	{r7}
 8001408:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800140a:	e7fe      	b.n	800140a <HardFault_Handler+0x4>

0800140c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800140c:	b480      	push	{r7}
 800140e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001410:	e7fe      	b.n	8001410 <MemManage_Handler+0x4>

08001412 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001412:	b480      	push	{r7}
 8001414:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001416:	e7fe      	b.n	8001416 <BusFault_Handler+0x4>

08001418 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001418:	b480      	push	{r7}
 800141a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800141c:	e7fe      	b.n	800141c <UsageFault_Handler+0x4>

0800141e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800141e:	b480      	push	{r7}
 8001420:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001422:	bf00      	nop
 8001424:	46bd      	mov	sp, r7
 8001426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142a:	4770      	bx	lr

0800142c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800142c:	b480      	push	{r7}
 800142e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001430:	bf00      	nop
 8001432:	46bd      	mov	sp, r7
 8001434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001438:	4770      	bx	lr

0800143a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800143a:	b480      	push	{r7}
 800143c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800143e:	bf00      	nop
 8001440:	46bd      	mov	sp, r7
 8001442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001446:	4770      	bx	lr

08001448 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001448:	b580      	push	{r7, lr}
 800144a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800144c:	f000 f89a 	bl	8001584 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001450:	bf00      	nop
 8001452:	bd80      	pop	{r7, pc}

08001454 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8001454:	b580      	push	{r7, lr}
 8001456:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */
	Set_flag_interrupt(1);
 8001458:	2001      	movs	r0, #1
 800145a:	f7ff fead 	bl	80011b8 <Set_flag_interrupt>
  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Interrupt_Pin);
 800145e:	2001      	movs	r0, #1
 8001460:	f000 fb9e 	bl	8001ba0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8001464:	bf00      	nop
 8001466:	bd80      	pop	{r7, pc}

08001468 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001468:	b480      	push	{r7}
 800146a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800146c:	4b06      	ldr	r3, [pc, #24]	; (8001488 <SystemInit+0x20>)
 800146e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001472:	4a05      	ldr	r2, [pc, #20]	; (8001488 <SystemInit+0x20>)
 8001474:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001478:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800147c:	bf00      	nop
 800147e:	46bd      	mov	sp, r7
 8001480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001484:	4770      	bx	lr
 8001486:	bf00      	nop
 8001488:	e000ed00 	.word	0xe000ed00

0800148c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 800148c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80014c4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001490:	480d      	ldr	r0, [pc, #52]	; (80014c8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001492:	490e      	ldr	r1, [pc, #56]	; (80014cc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001494:	4a0e      	ldr	r2, [pc, #56]	; (80014d0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001496:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001498:	e002      	b.n	80014a0 <LoopCopyDataInit>

0800149a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800149a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800149c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800149e:	3304      	adds	r3, #4

080014a0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80014a0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80014a2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80014a4:	d3f9      	bcc.n	800149a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80014a6:	4a0b      	ldr	r2, [pc, #44]	; (80014d4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80014a8:	4c0b      	ldr	r4, [pc, #44]	; (80014d8 <LoopFillZerobss+0x26>)
  movs r3, #0
 80014aa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80014ac:	e001      	b.n	80014b2 <LoopFillZerobss>

080014ae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80014ae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80014b0:	3204      	adds	r2, #4

080014b2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80014b2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80014b4:	d3fb      	bcc.n	80014ae <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80014b6:	f7ff ffd7 	bl	8001468 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80014ba:	f004 fabf 	bl	8005a3c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80014be:	f7ff fc2b 	bl	8000d18 <main>
  bx  lr    
 80014c2:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80014c4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80014c8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80014cc:	20000744 	.word	0x20000744
  ldr r2, =_sidata
 80014d0:	08009fcc 	.word	0x08009fcc
  ldr r2, =_sbss
 80014d4:	20000744 	.word	0x20000744
  ldr r4, =_ebss
 80014d8:	20000dcc 	.word	0x20000dcc

080014dc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80014dc:	e7fe      	b.n	80014dc <ADC_IRQHandler>
	...

080014e0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80014e0:	b580      	push	{r7, lr}
 80014e2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80014e4:	4b0e      	ldr	r3, [pc, #56]	; (8001520 <HAL_Init+0x40>)
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	4a0d      	ldr	r2, [pc, #52]	; (8001520 <HAL_Init+0x40>)
 80014ea:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80014ee:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80014f0:	4b0b      	ldr	r3, [pc, #44]	; (8001520 <HAL_Init+0x40>)
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	4a0a      	ldr	r2, [pc, #40]	; (8001520 <HAL_Init+0x40>)
 80014f6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80014fa:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80014fc:	4b08      	ldr	r3, [pc, #32]	; (8001520 <HAL_Init+0x40>)
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	4a07      	ldr	r2, [pc, #28]	; (8001520 <HAL_Init+0x40>)
 8001502:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001506:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001508:	2003      	movs	r0, #3
 800150a:	f000 f94f 	bl	80017ac <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800150e:	2000      	movs	r0, #0
 8001510:	f000 f808 	bl	8001524 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001514:	f7ff fe66 	bl	80011e4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001518:	2300      	movs	r3, #0
}
 800151a:	4618      	mov	r0, r3
 800151c:	bd80      	pop	{r7, pc}
 800151e:	bf00      	nop
 8001520:	40023c00 	.word	0x40023c00

08001524 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001524:	b580      	push	{r7, lr}
 8001526:	b082      	sub	sp, #8
 8001528:	af00      	add	r7, sp, #0
 800152a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800152c:	4b12      	ldr	r3, [pc, #72]	; (8001578 <HAL_InitTick+0x54>)
 800152e:	681a      	ldr	r2, [r3, #0]
 8001530:	4b12      	ldr	r3, [pc, #72]	; (800157c <HAL_InitTick+0x58>)
 8001532:	781b      	ldrb	r3, [r3, #0]
 8001534:	4619      	mov	r1, r3
 8001536:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800153a:	fbb3 f3f1 	udiv	r3, r3, r1
 800153e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001542:	4618      	mov	r0, r3
 8001544:	f000 f967 	bl	8001816 <HAL_SYSTICK_Config>
 8001548:	4603      	mov	r3, r0
 800154a:	2b00      	cmp	r3, #0
 800154c:	d001      	beq.n	8001552 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800154e:	2301      	movs	r3, #1
 8001550:	e00e      	b.n	8001570 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	2b0f      	cmp	r3, #15
 8001556:	d80a      	bhi.n	800156e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001558:	2200      	movs	r2, #0
 800155a:	6879      	ldr	r1, [r7, #4]
 800155c:	f04f 30ff 	mov.w	r0, #4294967295
 8001560:	f000 f92f 	bl	80017c2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001564:	4a06      	ldr	r2, [pc, #24]	; (8001580 <HAL_InitTick+0x5c>)
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800156a:	2300      	movs	r3, #0
 800156c:	e000      	b.n	8001570 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800156e:	2301      	movs	r3, #1
}
 8001570:	4618      	mov	r0, r3
 8001572:	3708      	adds	r7, #8
 8001574:	46bd      	mov	sp, r7
 8001576:	bd80      	pop	{r7, pc}
 8001578:	20000000 	.word	0x20000000
 800157c:	20000008 	.word	0x20000008
 8001580:	20000004 	.word	0x20000004

08001584 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001584:	b480      	push	{r7}
 8001586:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001588:	4b06      	ldr	r3, [pc, #24]	; (80015a4 <HAL_IncTick+0x20>)
 800158a:	781b      	ldrb	r3, [r3, #0]
 800158c:	461a      	mov	r2, r3
 800158e:	4b06      	ldr	r3, [pc, #24]	; (80015a8 <HAL_IncTick+0x24>)
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	4413      	add	r3, r2
 8001594:	4a04      	ldr	r2, [pc, #16]	; (80015a8 <HAL_IncTick+0x24>)
 8001596:	6013      	str	r3, [r2, #0]
}
 8001598:	bf00      	nop
 800159a:	46bd      	mov	sp, r7
 800159c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a0:	4770      	bx	lr
 80015a2:	bf00      	nop
 80015a4:	20000008 	.word	0x20000008
 80015a8:	20000868 	.word	0x20000868

080015ac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80015ac:	b480      	push	{r7}
 80015ae:	af00      	add	r7, sp, #0
  return uwTick;
 80015b0:	4b03      	ldr	r3, [pc, #12]	; (80015c0 <HAL_GetTick+0x14>)
 80015b2:	681b      	ldr	r3, [r3, #0]
}
 80015b4:	4618      	mov	r0, r3
 80015b6:	46bd      	mov	sp, r7
 80015b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015bc:	4770      	bx	lr
 80015be:	bf00      	nop
 80015c0:	20000868 	.word	0x20000868

080015c4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80015c4:	b580      	push	{r7, lr}
 80015c6:	b084      	sub	sp, #16
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80015cc:	f7ff ffee 	bl	80015ac <HAL_GetTick>
 80015d0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80015d6:	68fb      	ldr	r3, [r7, #12]
 80015d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80015dc:	d005      	beq.n	80015ea <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80015de:	4b0a      	ldr	r3, [pc, #40]	; (8001608 <HAL_Delay+0x44>)
 80015e0:	781b      	ldrb	r3, [r3, #0]
 80015e2:	461a      	mov	r2, r3
 80015e4:	68fb      	ldr	r3, [r7, #12]
 80015e6:	4413      	add	r3, r2
 80015e8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80015ea:	bf00      	nop
 80015ec:	f7ff ffde 	bl	80015ac <HAL_GetTick>
 80015f0:	4602      	mov	r2, r0
 80015f2:	68bb      	ldr	r3, [r7, #8]
 80015f4:	1ad3      	subs	r3, r2, r3
 80015f6:	68fa      	ldr	r2, [r7, #12]
 80015f8:	429a      	cmp	r2, r3
 80015fa:	d8f7      	bhi.n	80015ec <HAL_Delay+0x28>
  {
  }
}
 80015fc:	bf00      	nop
 80015fe:	bf00      	nop
 8001600:	3710      	adds	r7, #16
 8001602:	46bd      	mov	sp, r7
 8001604:	bd80      	pop	{r7, pc}
 8001606:	bf00      	nop
 8001608:	20000008 	.word	0x20000008

0800160c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800160c:	b480      	push	{r7}
 800160e:	b085      	sub	sp, #20
 8001610:	af00      	add	r7, sp, #0
 8001612:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	f003 0307 	and.w	r3, r3, #7
 800161a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800161c:	4b0c      	ldr	r3, [pc, #48]	; (8001650 <__NVIC_SetPriorityGrouping+0x44>)
 800161e:	68db      	ldr	r3, [r3, #12]
 8001620:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001622:	68ba      	ldr	r2, [r7, #8]
 8001624:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001628:	4013      	ands	r3, r2
 800162a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800162c:	68fb      	ldr	r3, [r7, #12]
 800162e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001630:	68bb      	ldr	r3, [r7, #8]
 8001632:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001634:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001638:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800163c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800163e:	4a04      	ldr	r2, [pc, #16]	; (8001650 <__NVIC_SetPriorityGrouping+0x44>)
 8001640:	68bb      	ldr	r3, [r7, #8]
 8001642:	60d3      	str	r3, [r2, #12]
}
 8001644:	bf00      	nop
 8001646:	3714      	adds	r7, #20
 8001648:	46bd      	mov	sp, r7
 800164a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800164e:	4770      	bx	lr
 8001650:	e000ed00 	.word	0xe000ed00

08001654 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001654:	b480      	push	{r7}
 8001656:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001658:	4b04      	ldr	r3, [pc, #16]	; (800166c <__NVIC_GetPriorityGrouping+0x18>)
 800165a:	68db      	ldr	r3, [r3, #12]
 800165c:	0a1b      	lsrs	r3, r3, #8
 800165e:	f003 0307 	and.w	r3, r3, #7
}
 8001662:	4618      	mov	r0, r3
 8001664:	46bd      	mov	sp, r7
 8001666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800166a:	4770      	bx	lr
 800166c:	e000ed00 	.word	0xe000ed00

08001670 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001670:	b480      	push	{r7}
 8001672:	b083      	sub	sp, #12
 8001674:	af00      	add	r7, sp, #0
 8001676:	4603      	mov	r3, r0
 8001678:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800167a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800167e:	2b00      	cmp	r3, #0
 8001680:	db0b      	blt.n	800169a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001682:	79fb      	ldrb	r3, [r7, #7]
 8001684:	f003 021f 	and.w	r2, r3, #31
 8001688:	4907      	ldr	r1, [pc, #28]	; (80016a8 <__NVIC_EnableIRQ+0x38>)
 800168a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800168e:	095b      	lsrs	r3, r3, #5
 8001690:	2001      	movs	r0, #1
 8001692:	fa00 f202 	lsl.w	r2, r0, r2
 8001696:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800169a:	bf00      	nop
 800169c:	370c      	adds	r7, #12
 800169e:	46bd      	mov	sp, r7
 80016a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a4:	4770      	bx	lr
 80016a6:	bf00      	nop
 80016a8:	e000e100 	.word	0xe000e100

080016ac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80016ac:	b480      	push	{r7}
 80016ae:	b083      	sub	sp, #12
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	4603      	mov	r3, r0
 80016b4:	6039      	str	r1, [r7, #0]
 80016b6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016bc:	2b00      	cmp	r3, #0
 80016be:	db0a      	blt.n	80016d6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016c0:	683b      	ldr	r3, [r7, #0]
 80016c2:	b2da      	uxtb	r2, r3
 80016c4:	490c      	ldr	r1, [pc, #48]	; (80016f8 <__NVIC_SetPriority+0x4c>)
 80016c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016ca:	0112      	lsls	r2, r2, #4
 80016cc:	b2d2      	uxtb	r2, r2
 80016ce:	440b      	add	r3, r1
 80016d0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80016d4:	e00a      	b.n	80016ec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016d6:	683b      	ldr	r3, [r7, #0]
 80016d8:	b2da      	uxtb	r2, r3
 80016da:	4908      	ldr	r1, [pc, #32]	; (80016fc <__NVIC_SetPriority+0x50>)
 80016dc:	79fb      	ldrb	r3, [r7, #7]
 80016de:	f003 030f 	and.w	r3, r3, #15
 80016e2:	3b04      	subs	r3, #4
 80016e4:	0112      	lsls	r2, r2, #4
 80016e6:	b2d2      	uxtb	r2, r2
 80016e8:	440b      	add	r3, r1
 80016ea:	761a      	strb	r2, [r3, #24]
}
 80016ec:	bf00      	nop
 80016ee:	370c      	adds	r7, #12
 80016f0:	46bd      	mov	sp, r7
 80016f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f6:	4770      	bx	lr
 80016f8:	e000e100 	.word	0xe000e100
 80016fc:	e000ed00 	.word	0xe000ed00

08001700 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001700:	b480      	push	{r7}
 8001702:	b089      	sub	sp, #36	; 0x24
 8001704:	af00      	add	r7, sp, #0
 8001706:	60f8      	str	r0, [r7, #12]
 8001708:	60b9      	str	r1, [r7, #8]
 800170a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800170c:	68fb      	ldr	r3, [r7, #12]
 800170e:	f003 0307 	and.w	r3, r3, #7
 8001712:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001714:	69fb      	ldr	r3, [r7, #28]
 8001716:	f1c3 0307 	rsb	r3, r3, #7
 800171a:	2b04      	cmp	r3, #4
 800171c:	bf28      	it	cs
 800171e:	2304      	movcs	r3, #4
 8001720:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001722:	69fb      	ldr	r3, [r7, #28]
 8001724:	3304      	adds	r3, #4
 8001726:	2b06      	cmp	r3, #6
 8001728:	d902      	bls.n	8001730 <NVIC_EncodePriority+0x30>
 800172a:	69fb      	ldr	r3, [r7, #28]
 800172c:	3b03      	subs	r3, #3
 800172e:	e000      	b.n	8001732 <NVIC_EncodePriority+0x32>
 8001730:	2300      	movs	r3, #0
 8001732:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001734:	f04f 32ff 	mov.w	r2, #4294967295
 8001738:	69bb      	ldr	r3, [r7, #24]
 800173a:	fa02 f303 	lsl.w	r3, r2, r3
 800173e:	43da      	mvns	r2, r3
 8001740:	68bb      	ldr	r3, [r7, #8]
 8001742:	401a      	ands	r2, r3
 8001744:	697b      	ldr	r3, [r7, #20]
 8001746:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001748:	f04f 31ff 	mov.w	r1, #4294967295
 800174c:	697b      	ldr	r3, [r7, #20]
 800174e:	fa01 f303 	lsl.w	r3, r1, r3
 8001752:	43d9      	mvns	r1, r3
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001758:	4313      	orrs	r3, r2
         );
}
 800175a:	4618      	mov	r0, r3
 800175c:	3724      	adds	r7, #36	; 0x24
 800175e:	46bd      	mov	sp, r7
 8001760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001764:	4770      	bx	lr
	...

08001768 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001768:	b580      	push	{r7, lr}
 800176a:	b082      	sub	sp, #8
 800176c:	af00      	add	r7, sp, #0
 800176e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	3b01      	subs	r3, #1
 8001774:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001778:	d301      	bcc.n	800177e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800177a:	2301      	movs	r3, #1
 800177c:	e00f      	b.n	800179e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800177e:	4a0a      	ldr	r2, [pc, #40]	; (80017a8 <SysTick_Config+0x40>)
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	3b01      	subs	r3, #1
 8001784:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001786:	210f      	movs	r1, #15
 8001788:	f04f 30ff 	mov.w	r0, #4294967295
 800178c:	f7ff ff8e 	bl	80016ac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001790:	4b05      	ldr	r3, [pc, #20]	; (80017a8 <SysTick_Config+0x40>)
 8001792:	2200      	movs	r2, #0
 8001794:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001796:	4b04      	ldr	r3, [pc, #16]	; (80017a8 <SysTick_Config+0x40>)
 8001798:	2207      	movs	r2, #7
 800179a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800179c:	2300      	movs	r3, #0
}
 800179e:	4618      	mov	r0, r3
 80017a0:	3708      	adds	r7, #8
 80017a2:	46bd      	mov	sp, r7
 80017a4:	bd80      	pop	{r7, pc}
 80017a6:	bf00      	nop
 80017a8:	e000e010 	.word	0xe000e010

080017ac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017ac:	b580      	push	{r7, lr}
 80017ae:	b082      	sub	sp, #8
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80017b4:	6878      	ldr	r0, [r7, #4]
 80017b6:	f7ff ff29 	bl	800160c <__NVIC_SetPriorityGrouping>
}
 80017ba:	bf00      	nop
 80017bc:	3708      	adds	r7, #8
 80017be:	46bd      	mov	sp, r7
 80017c0:	bd80      	pop	{r7, pc}

080017c2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80017c2:	b580      	push	{r7, lr}
 80017c4:	b086      	sub	sp, #24
 80017c6:	af00      	add	r7, sp, #0
 80017c8:	4603      	mov	r3, r0
 80017ca:	60b9      	str	r1, [r7, #8]
 80017cc:	607a      	str	r2, [r7, #4]
 80017ce:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80017d0:	2300      	movs	r3, #0
 80017d2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80017d4:	f7ff ff3e 	bl	8001654 <__NVIC_GetPriorityGrouping>
 80017d8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80017da:	687a      	ldr	r2, [r7, #4]
 80017dc:	68b9      	ldr	r1, [r7, #8]
 80017de:	6978      	ldr	r0, [r7, #20]
 80017e0:	f7ff ff8e 	bl	8001700 <NVIC_EncodePriority>
 80017e4:	4602      	mov	r2, r0
 80017e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80017ea:	4611      	mov	r1, r2
 80017ec:	4618      	mov	r0, r3
 80017ee:	f7ff ff5d 	bl	80016ac <__NVIC_SetPriority>
}
 80017f2:	bf00      	nop
 80017f4:	3718      	adds	r7, #24
 80017f6:	46bd      	mov	sp, r7
 80017f8:	bd80      	pop	{r7, pc}

080017fa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017fa:	b580      	push	{r7, lr}
 80017fc:	b082      	sub	sp, #8
 80017fe:	af00      	add	r7, sp, #0
 8001800:	4603      	mov	r3, r0
 8001802:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001804:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001808:	4618      	mov	r0, r3
 800180a:	f7ff ff31 	bl	8001670 <__NVIC_EnableIRQ>
}
 800180e:	bf00      	nop
 8001810:	3708      	adds	r7, #8
 8001812:	46bd      	mov	sp, r7
 8001814:	bd80      	pop	{r7, pc}

08001816 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001816:	b580      	push	{r7, lr}
 8001818:	b082      	sub	sp, #8
 800181a:	af00      	add	r7, sp, #0
 800181c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800181e:	6878      	ldr	r0, [r7, #4]
 8001820:	f7ff ffa2 	bl	8001768 <SysTick_Config>
 8001824:	4603      	mov	r3, r0
}
 8001826:	4618      	mov	r0, r3
 8001828:	3708      	adds	r7, #8
 800182a:	46bd      	mov	sp, r7
 800182c:	bd80      	pop	{r7, pc}
	...

08001830 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001830:	b480      	push	{r7}
 8001832:	b089      	sub	sp, #36	; 0x24
 8001834:	af00      	add	r7, sp, #0
 8001836:	6078      	str	r0, [r7, #4]
 8001838:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800183a:	2300      	movs	r3, #0
 800183c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800183e:	2300      	movs	r3, #0
 8001840:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001842:	2300      	movs	r3, #0
 8001844:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001846:	2300      	movs	r3, #0
 8001848:	61fb      	str	r3, [r7, #28]
 800184a:	e159      	b.n	8001b00 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800184c:	2201      	movs	r2, #1
 800184e:	69fb      	ldr	r3, [r7, #28]
 8001850:	fa02 f303 	lsl.w	r3, r2, r3
 8001854:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001856:	683b      	ldr	r3, [r7, #0]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	697a      	ldr	r2, [r7, #20]
 800185c:	4013      	ands	r3, r2
 800185e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001860:	693a      	ldr	r2, [r7, #16]
 8001862:	697b      	ldr	r3, [r7, #20]
 8001864:	429a      	cmp	r2, r3
 8001866:	f040 8148 	bne.w	8001afa <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800186a:	683b      	ldr	r3, [r7, #0]
 800186c:	685b      	ldr	r3, [r3, #4]
 800186e:	f003 0303 	and.w	r3, r3, #3
 8001872:	2b01      	cmp	r3, #1
 8001874:	d005      	beq.n	8001882 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001876:	683b      	ldr	r3, [r7, #0]
 8001878:	685b      	ldr	r3, [r3, #4]
 800187a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800187e:	2b02      	cmp	r3, #2
 8001880:	d130      	bne.n	80018e4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	689b      	ldr	r3, [r3, #8]
 8001886:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001888:	69fb      	ldr	r3, [r7, #28]
 800188a:	005b      	lsls	r3, r3, #1
 800188c:	2203      	movs	r2, #3
 800188e:	fa02 f303 	lsl.w	r3, r2, r3
 8001892:	43db      	mvns	r3, r3
 8001894:	69ba      	ldr	r2, [r7, #24]
 8001896:	4013      	ands	r3, r2
 8001898:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800189a:	683b      	ldr	r3, [r7, #0]
 800189c:	68da      	ldr	r2, [r3, #12]
 800189e:	69fb      	ldr	r3, [r7, #28]
 80018a0:	005b      	lsls	r3, r3, #1
 80018a2:	fa02 f303 	lsl.w	r3, r2, r3
 80018a6:	69ba      	ldr	r2, [r7, #24]
 80018a8:	4313      	orrs	r3, r2
 80018aa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	69ba      	ldr	r2, [r7, #24]
 80018b0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	685b      	ldr	r3, [r3, #4]
 80018b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80018b8:	2201      	movs	r2, #1
 80018ba:	69fb      	ldr	r3, [r7, #28]
 80018bc:	fa02 f303 	lsl.w	r3, r2, r3
 80018c0:	43db      	mvns	r3, r3
 80018c2:	69ba      	ldr	r2, [r7, #24]
 80018c4:	4013      	ands	r3, r2
 80018c6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80018c8:	683b      	ldr	r3, [r7, #0]
 80018ca:	685b      	ldr	r3, [r3, #4]
 80018cc:	091b      	lsrs	r3, r3, #4
 80018ce:	f003 0201 	and.w	r2, r3, #1
 80018d2:	69fb      	ldr	r3, [r7, #28]
 80018d4:	fa02 f303 	lsl.w	r3, r2, r3
 80018d8:	69ba      	ldr	r2, [r7, #24]
 80018da:	4313      	orrs	r3, r2
 80018dc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	69ba      	ldr	r2, [r7, #24]
 80018e2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80018e4:	683b      	ldr	r3, [r7, #0]
 80018e6:	685b      	ldr	r3, [r3, #4]
 80018e8:	f003 0303 	and.w	r3, r3, #3
 80018ec:	2b03      	cmp	r3, #3
 80018ee:	d017      	beq.n	8001920 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	68db      	ldr	r3, [r3, #12]
 80018f4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80018f6:	69fb      	ldr	r3, [r7, #28]
 80018f8:	005b      	lsls	r3, r3, #1
 80018fa:	2203      	movs	r2, #3
 80018fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001900:	43db      	mvns	r3, r3
 8001902:	69ba      	ldr	r2, [r7, #24]
 8001904:	4013      	ands	r3, r2
 8001906:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001908:	683b      	ldr	r3, [r7, #0]
 800190a:	689a      	ldr	r2, [r3, #8]
 800190c:	69fb      	ldr	r3, [r7, #28]
 800190e:	005b      	lsls	r3, r3, #1
 8001910:	fa02 f303 	lsl.w	r3, r2, r3
 8001914:	69ba      	ldr	r2, [r7, #24]
 8001916:	4313      	orrs	r3, r2
 8001918:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	69ba      	ldr	r2, [r7, #24]
 800191e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001920:	683b      	ldr	r3, [r7, #0]
 8001922:	685b      	ldr	r3, [r3, #4]
 8001924:	f003 0303 	and.w	r3, r3, #3
 8001928:	2b02      	cmp	r3, #2
 800192a:	d123      	bne.n	8001974 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800192c:	69fb      	ldr	r3, [r7, #28]
 800192e:	08da      	lsrs	r2, r3, #3
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	3208      	adds	r2, #8
 8001934:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001938:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800193a:	69fb      	ldr	r3, [r7, #28]
 800193c:	f003 0307 	and.w	r3, r3, #7
 8001940:	009b      	lsls	r3, r3, #2
 8001942:	220f      	movs	r2, #15
 8001944:	fa02 f303 	lsl.w	r3, r2, r3
 8001948:	43db      	mvns	r3, r3
 800194a:	69ba      	ldr	r2, [r7, #24]
 800194c:	4013      	ands	r3, r2
 800194e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001950:	683b      	ldr	r3, [r7, #0]
 8001952:	691a      	ldr	r2, [r3, #16]
 8001954:	69fb      	ldr	r3, [r7, #28]
 8001956:	f003 0307 	and.w	r3, r3, #7
 800195a:	009b      	lsls	r3, r3, #2
 800195c:	fa02 f303 	lsl.w	r3, r2, r3
 8001960:	69ba      	ldr	r2, [r7, #24]
 8001962:	4313      	orrs	r3, r2
 8001964:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001966:	69fb      	ldr	r3, [r7, #28]
 8001968:	08da      	lsrs	r2, r3, #3
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	3208      	adds	r2, #8
 800196e:	69b9      	ldr	r1, [r7, #24]
 8001970:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800197a:	69fb      	ldr	r3, [r7, #28]
 800197c:	005b      	lsls	r3, r3, #1
 800197e:	2203      	movs	r2, #3
 8001980:	fa02 f303 	lsl.w	r3, r2, r3
 8001984:	43db      	mvns	r3, r3
 8001986:	69ba      	ldr	r2, [r7, #24]
 8001988:	4013      	ands	r3, r2
 800198a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800198c:	683b      	ldr	r3, [r7, #0]
 800198e:	685b      	ldr	r3, [r3, #4]
 8001990:	f003 0203 	and.w	r2, r3, #3
 8001994:	69fb      	ldr	r3, [r7, #28]
 8001996:	005b      	lsls	r3, r3, #1
 8001998:	fa02 f303 	lsl.w	r3, r2, r3
 800199c:	69ba      	ldr	r2, [r7, #24]
 800199e:	4313      	orrs	r3, r2
 80019a0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	69ba      	ldr	r2, [r7, #24]
 80019a6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80019a8:	683b      	ldr	r3, [r7, #0]
 80019aa:	685b      	ldr	r3, [r3, #4]
 80019ac:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	f000 80a2 	beq.w	8001afa <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019b6:	2300      	movs	r3, #0
 80019b8:	60fb      	str	r3, [r7, #12]
 80019ba:	4b57      	ldr	r3, [pc, #348]	; (8001b18 <HAL_GPIO_Init+0x2e8>)
 80019bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019be:	4a56      	ldr	r2, [pc, #344]	; (8001b18 <HAL_GPIO_Init+0x2e8>)
 80019c0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80019c4:	6453      	str	r3, [r2, #68]	; 0x44
 80019c6:	4b54      	ldr	r3, [pc, #336]	; (8001b18 <HAL_GPIO_Init+0x2e8>)
 80019c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019ca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80019ce:	60fb      	str	r3, [r7, #12]
 80019d0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80019d2:	4a52      	ldr	r2, [pc, #328]	; (8001b1c <HAL_GPIO_Init+0x2ec>)
 80019d4:	69fb      	ldr	r3, [r7, #28]
 80019d6:	089b      	lsrs	r3, r3, #2
 80019d8:	3302      	adds	r3, #2
 80019da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80019de:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80019e0:	69fb      	ldr	r3, [r7, #28]
 80019e2:	f003 0303 	and.w	r3, r3, #3
 80019e6:	009b      	lsls	r3, r3, #2
 80019e8:	220f      	movs	r2, #15
 80019ea:	fa02 f303 	lsl.w	r3, r2, r3
 80019ee:	43db      	mvns	r3, r3
 80019f0:	69ba      	ldr	r2, [r7, #24]
 80019f2:	4013      	ands	r3, r2
 80019f4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	4a49      	ldr	r2, [pc, #292]	; (8001b20 <HAL_GPIO_Init+0x2f0>)
 80019fa:	4293      	cmp	r3, r2
 80019fc:	d019      	beq.n	8001a32 <HAL_GPIO_Init+0x202>
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	4a48      	ldr	r2, [pc, #288]	; (8001b24 <HAL_GPIO_Init+0x2f4>)
 8001a02:	4293      	cmp	r3, r2
 8001a04:	d013      	beq.n	8001a2e <HAL_GPIO_Init+0x1fe>
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	4a47      	ldr	r2, [pc, #284]	; (8001b28 <HAL_GPIO_Init+0x2f8>)
 8001a0a:	4293      	cmp	r3, r2
 8001a0c:	d00d      	beq.n	8001a2a <HAL_GPIO_Init+0x1fa>
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	4a46      	ldr	r2, [pc, #280]	; (8001b2c <HAL_GPIO_Init+0x2fc>)
 8001a12:	4293      	cmp	r3, r2
 8001a14:	d007      	beq.n	8001a26 <HAL_GPIO_Init+0x1f6>
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	4a45      	ldr	r2, [pc, #276]	; (8001b30 <HAL_GPIO_Init+0x300>)
 8001a1a:	4293      	cmp	r3, r2
 8001a1c:	d101      	bne.n	8001a22 <HAL_GPIO_Init+0x1f2>
 8001a1e:	2304      	movs	r3, #4
 8001a20:	e008      	b.n	8001a34 <HAL_GPIO_Init+0x204>
 8001a22:	2307      	movs	r3, #7
 8001a24:	e006      	b.n	8001a34 <HAL_GPIO_Init+0x204>
 8001a26:	2303      	movs	r3, #3
 8001a28:	e004      	b.n	8001a34 <HAL_GPIO_Init+0x204>
 8001a2a:	2302      	movs	r3, #2
 8001a2c:	e002      	b.n	8001a34 <HAL_GPIO_Init+0x204>
 8001a2e:	2301      	movs	r3, #1
 8001a30:	e000      	b.n	8001a34 <HAL_GPIO_Init+0x204>
 8001a32:	2300      	movs	r3, #0
 8001a34:	69fa      	ldr	r2, [r7, #28]
 8001a36:	f002 0203 	and.w	r2, r2, #3
 8001a3a:	0092      	lsls	r2, r2, #2
 8001a3c:	4093      	lsls	r3, r2
 8001a3e:	69ba      	ldr	r2, [r7, #24]
 8001a40:	4313      	orrs	r3, r2
 8001a42:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001a44:	4935      	ldr	r1, [pc, #212]	; (8001b1c <HAL_GPIO_Init+0x2ec>)
 8001a46:	69fb      	ldr	r3, [r7, #28]
 8001a48:	089b      	lsrs	r3, r3, #2
 8001a4a:	3302      	adds	r3, #2
 8001a4c:	69ba      	ldr	r2, [r7, #24]
 8001a4e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001a52:	4b38      	ldr	r3, [pc, #224]	; (8001b34 <HAL_GPIO_Init+0x304>)
 8001a54:	689b      	ldr	r3, [r3, #8]
 8001a56:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a58:	693b      	ldr	r3, [r7, #16]
 8001a5a:	43db      	mvns	r3, r3
 8001a5c:	69ba      	ldr	r2, [r7, #24]
 8001a5e:	4013      	ands	r3, r2
 8001a60:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001a62:	683b      	ldr	r3, [r7, #0]
 8001a64:	685b      	ldr	r3, [r3, #4]
 8001a66:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d003      	beq.n	8001a76 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001a6e:	69ba      	ldr	r2, [r7, #24]
 8001a70:	693b      	ldr	r3, [r7, #16]
 8001a72:	4313      	orrs	r3, r2
 8001a74:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001a76:	4a2f      	ldr	r2, [pc, #188]	; (8001b34 <HAL_GPIO_Init+0x304>)
 8001a78:	69bb      	ldr	r3, [r7, #24]
 8001a7a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001a7c:	4b2d      	ldr	r3, [pc, #180]	; (8001b34 <HAL_GPIO_Init+0x304>)
 8001a7e:	68db      	ldr	r3, [r3, #12]
 8001a80:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a82:	693b      	ldr	r3, [r7, #16]
 8001a84:	43db      	mvns	r3, r3
 8001a86:	69ba      	ldr	r2, [r7, #24]
 8001a88:	4013      	ands	r3, r2
 8001a8a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001a8c:	683b      	ldr	r3, [r7, #0]
 8001a8e:	685b      	ldr	r3, [r3, #4]
 8001a90:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d003      	beq.n	8001aa0 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001a98:	69ba      	ldr	r2, [r7, #24]
 8001a9a:	693b      	ldr	r3, [r7, #16]
 8001a9c:	4313      	orrs	r3, r2
 8001a9e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001aa0:	4a24      	ldr	r2, [pc, #144]	; (8001b34 <HAL_GPIO_Init+0x304>)
 8001aa2:	69bb      	ldr	r3, [r7, #24]
 8001aa4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001aa6:	4b23      	ldr	r3, [pc, #140]	; (8001b34 <HAL_GPIO_Init+0x304>)
 8001aa8:	685b      	ldr	r3, [r3, #4]
 8001aaa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001aac:	693b      	ldr	r3, [r7, #16]
 8001aae:	43db      	mvns	r3, r3
 8001ab0:	69ba      	ldr	r2, [r7, #24]
 8001ab2:	4013      	ands	r3, r2
 8001ab4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001ab6:	683b      	ldr	r3, [r7, #0]
 8001ab8:	685b      	ldr	r3, [r3, #4]
 8001aba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d003      	beq.n	8001aca <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001ac2:	69ba      	ldr	r2, [r7, #24]
 8001ac4:	693b      	ldr	r3, [r7, #16]
 8001ac6:	4313      	orrs	r3, r2
 8001ac8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001aca:	4a1a      	ldr	r2, [pc, #104]	; (8001b34 <HAL_GPIO_Init+0x304>)
 8001acc:	69bb      	ldr	r3, [r7, #24]
 8001ace:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001ad0:	4b18      	ldr	r3, [pc, #96]	; (8001b34 <HAL_GPIO_Init+0x304>)
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ad6:	693b      	ldr	r3, [r7, #16]
 8001ad8:	43db      	mvns	r3, r3
 8001ada:	69ba      	ldr	r2, [r7, #24]
 8001adc:	4013      	ands	r3, r2
 8001ade:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001ae0:	683b      	ldr	r3, [r7, #0]
 8001ae2:	685b      	ldr	r3, [r3, #4]
 8001ae4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d003      	beq.n	8001af4 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001aec:	69ba      	ldr	r2, [r7, #24]
 8001aee:	693b      	ldr	r3, [r7, #16]
 8001af0:	4313      	orrs	r3, r2
 8001af2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001af4:	4a0f      	ldr	r2, [pc, #60]	; (8001b34 <HAL_GPIO_Init+0x304>)
 8001af6:	69bb      	ldr	r3, [r7, #24]
 8001af8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001afa:	69fb      	ldr	r3, [r7, #28]
 8001afc:	3301      	adds	r3, #1
 8001afe:	61fb      	str	r3, [r7, #28]
 8001b00:	69fb      	ldr	r3, [r7, #28]
 8001b02:	2b0f      	cmp	r3, #15
 8001b04:	f67f aea2 	bls.w	800184c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001b08:	bf00      	nop
 8001b0a:	bf00      	nop
 8001b0c:	3724      	adds	r7, #36	; 0x24
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b14:	4770      	bx	lr
 8001b16:	bf00      	nop
 8001b18:	40023800 	.word	0x40023800
 8001b1c:	40013800 	.word	0x40013800
 8001b20:	40020000 	.word	0x40020000
 8001b24:	40020400 	.word	0x40020400
 8001b28:	40020800 	.word	0x40020800
 8001b2c:	40020c00 	.word	0x40020c00
 8001b30:	40021000 	.word	0x40021000
 8001b34:	40013c00 	.word	0x40013c00

08001b38 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001b38:	b480      	push	{r7}
 8001b3a:	b083      	sub	sp, #12
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	6078      	str	r0, [r7, #4]
 8001b40:	460b      	mov	r3, r1
 8001b42:	807b      	strh	r3, [r7, #2]
 8001b44:	4613      	mov	r3, r2
 8001b46:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001b48:	787b      	ldrb	r3, [r7, #1]
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d003      	beq.n	8001b56 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001b4e:	887a      	ldrh	r2, [r7, #2]
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001b54:	e003      	b.n	8001b5e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001b56:	887b      	ldrh	r3, [r7, #2]
 8001b58:	041a      	lsls	r2, r3, #16
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	619a      	str	r2, [r3, #24]
}
 8001b5e:	bf00      	nop
 8001b60:	370c      	adds	r7, #12
 8001b62:	46bd      	mov	sp, r7
 8001b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b68:	4770      	bx	lr

08001b6a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001b6a:	b480      	push	{r7}
 8001b6c:	b085      	sub	sp, #20
 8001b6e:	af00      	add	r7, sp, #0
 8001b70:	6078      	str	r0, [r7, #4]
 8001b72:	460b      	mov	r3, r1
 8001b74:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	695b      	ldr	r3, [r3, #20]
 8001b7a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001b7c:	887a      	ldrh	r2, [r7, #2]
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	4013      	ands	r3, r2
 8001b82:	041a      	lsls	r2, r3, #16
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	43d9      	mvns	r1, r3
 8001b88:	887b      	ldrh	r3, [r7, #2]
 8001b8a:	400b      	ands	r3, r1
 8001b8c:	431a      	orrs	r2, r3
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	619a      	str	r2, [r3, #24]
}
 8001b92:	bf00      	nop
 8001b94:	3714      	adds	r7, #20
 8001b96:	46bd      	mov	sp, r7
 8001b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b9c:	4770      	bx	lr
	...

08001ba0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	b082      	sub	sp, #8
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	4603      	mov	r3, r0
 8001ba8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001baa:	4b08      	ldr	r3, [pc, #32]	; (8001bcc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001bac:	695a      	ldr	r2, [r3, #20]
 8001bae:	88fb      	ldrh	r3, [r7, #6]
 8001bb0:	4013      	ands	r3, r2
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d006      	beq.n	8001bc4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001bb6:	4a05      	ldr	r2, [pc, #20]	; (8001bcc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001bb8:	88fb      	ldrh	r3, [r7, #6]
 8001bba:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001bbc:	88fb      	ldrh	r3, [r7, #6]
 8001bbe:	4618      	mov	r0, r3
 8001bc0:	f000 f806 	bl	8001bd0 <HAL_GPIO_EXTI_Callback>
  }
}
 8001bc4:	bf00      	nop
 8001bc6:	3708      	adds	r7, #8
 8001bc8:	46bd      	mov	sp, r7
 8001bca:	bd80      	pop	{r7, pc}
 8001bcc:	40013c00 	.word	0x40013c00

08001bd0 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001bd0:	b480      	push	{r7}
 8001bd2:	b083      	sub	sp, #12
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	4603      	mov	r3, r0
 8001bd8:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001bda:	bf00      	nop
 8001bdc:	370c      	adds	r7, #12
 8001bde:	46bd      	mov	sp, r7
 8001be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be4:	4770      	bx	lr
	...

08001be8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001be8:	b580      	push	{r7, lr}
 8001bea:	b084      	sub	sp, #16
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d101      	bne.n	8001bfa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001bf6:	2301      	movs	r3, #1
 8001bf8:	e12b      	b.n	8001e52 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001c00:	b2db      	uxtb	r3, r3
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d106      	bne.n	8001c14 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	2200      	movs	r2, #0
 8001c0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001c0e:	6878      	ldr	r0, [r7, #4]
 8001c10:	f7ff fb10 	bl	8001234 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	2224      	movs	r2, #36	; 0x24
 8001c18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	681a      	ldr	r2, [r3, #0]
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	f022 0201 	bic.w	r2, r2, #1
 8001c2a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	681a      	ldr	r2, [r3, #0]
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001c3a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	681a      	ldr	r2, [r3, #0]
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001c4a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001c4c:	f001 fb92 	bl	8003374 <HAL_RCC_GetPCLK1Freq>
 8001c50:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	685b      	ldr	r3, [r3, #4]
 8001c56:	4a81      	ldr	r2, [pc, #516]	; (8001e5c <HAL_I2C_Init+0x274>)
 8001c58:	4293      	cmp	r3, r2
 8001c5a:	d807      	bhi.n	8001c6c <HAL_I2C_Init+0x84>
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	4a80      	ldr	r2, [pc, #512]	; (8001e60 <HAL_I2C_Init+0x278>)
 8001c60:	4293      	cmp	r3, r2
 8001c62:	bf94      	ite	ls
 8001c64:	2301      	movls	r3, #1
 8001c66:	2300      	movhi	r3, #0
 8001c68:	b2db      	uxtb	r3, r3
 8001c6a:	e006      	b.n	8001c7a <HAL_I2C_Init+0x92>
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	4a7d      	ldr	r2, [pc, #500]	; (8001e64 <HAL_I2C_Init+0x27c>)
 8001c70:	4293      	cmp	r3, r2
 8001c72:	bf94      	ite	ls
 8001c74:	2301      	movls	r3, #1
 8001c76:	2300      	movhi	r3, #0
 8001c78:	b2db      	uxtb	r3, r3
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d001      	beq.n	8001c82 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001c7e:	2301      	movs	r3, #1
 8001c80:	e0e7      	b.n	8001e52 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	4a78      	ldr	r2, [pc, #480]	; (8001e68 <HAL_I2C_Init+0x280>)
 8001c86:	fba2 2303 	umull	r2, r3, r2, r3
 8001c8a:	0c9b      	lsrs	r3, r3, #18
 8001c8c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	685b      	ldr	r3, [r3, #4]
 8001c94:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	68ba      	ldr	r2, [r7, #8]
 8001c9e:	430a      	orrs	r2, r1
 8001ca0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	6a1b      	ldr	r3, [r3, #32]
 8001ca8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	685b      	ldr	r3, [r3, #4]
 8001cb0:	4a6a      	ldr	r2, [pc, #424]	; (8001e5c <HAL_I2C_Init+0x274>)
 8001cb2:	4293      	cmp	r3, r2
 8001cb4:	d802      	bhi.n	8001cbc <HAL_I2C_Init+0xd4>
 8001cb6:	68bb      	ldr	r3, [r7, #8]
 8001cb8:	3301      	adds	r3, #1
 8001cba:	e009      	b.n	8001cd0 <HAL_I2C_Init+0xe8>
 8001cbc:	68bb      	ldr	r3, [r7, #8]
 8001cbe:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001cc2:	fb02 f303 	mul.w	r3, r2, r3
 8001cc6:	4a69      	ldr	r2, [pc, #420]	; (8001e6c <HAL_I2C_Init+0x284>)
 8001cc8:	fba2 2303 	umull	r2, r3, r2, r3
 8001ccc:	099b      	lsrs	r3, r3, #6
 8001cce:	3301      	adds	r3, #1
 8001cd0:	687a      	ldr	r2, [r7, #4]
 8001cd2:	6812      	ldr	r2, [r2, #0]
 8001cd4:	430b      	orrs	r3, r1
 8001cd6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	69db      	ldr	r3, [r3, #28]
 8001cde:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001ce2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	685b      	ldr	r3, [r3, #4]
 8001cea:	495c      	ldr	r1, [pc, #368]	; (8001e5c <HAL_I2C_Init+0x274>)
 8001cec:	428b      	cmp	r3, r1
 8001cee:	d819      	bhi.n	8001d24 <HAL_I2C_Init+0x13c>
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	1e59      	subs	r1, r3, #1
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	685b      	ldr	r3, [r3, #4]
 8001cf8:	005b      	lsls	r3, r3, #1
 8001cfa:	fbb1 f3f3 	udiv	r3, r1, r3
 8001cfe:	1c59      	adds	r1, r3, #1
 8001d00:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001d04:	400b      	ands	r3, r1
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d00a      	beq.n	8001d20 <HAL_I2C_Init+0x138>
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	1e59      	subs	r1, r3, #1
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	685b      	ldr	r3, [r3, #4]
 8001d12:	005b      	lsls	r3, r3, #1
 8001d14:	fbb1 f3f3 	udiv	r3, r1, r3
 8001d18:	3301      	adds	r3, #1
 8001d1a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001d1e:	e051      	b.n	8001dc4 <HAL_I2C_Init+0x1dc>
 8001d20:	2304      	movs	r3, #4
 8001d22:	e04f      	b.n	8001dc4 <HAL_I2C_Init+0x1dc>
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	689b      	ldr	r3, [r3, #8]
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d111      	bne.n	8001d50 <HAL_I2C_Init+0x168>
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	1e58      	subs	r0, r3, #1
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	6859      	ldr	r1, [r3, #4]
 8001d34:	460b      	mov	r3, r1
 8001d36:	005b      	lsls	r3, r3, #1
 8001d38:	440b      	add	r3, r1
 8001d3a:	fbb0 f3f3 	udiv	r3, r0, r3
 8001d3e:	3301      	adds	r3, #1
 8001d40:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	bf0c      	ite	eq
 8001d48:	2301      	moveq	r3, #1
 8001d4a:	2300      	movne	r3, #0
 8001d4c:	b2db      	uxtb	r3, r3
 8001d4e:	e012      	b.n	8001d76 <HAL_I2C_Init+0x18e>
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	1e58      	subs	r0, r3, #1
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	6859      	ldr	r1, [r3, #4]
 8001d58:	460b      	mov	r3, r1
 8001d5a:	009b      	lsls	r3, r3, #2
 8001d5c:	440b      	add	r3, r1
 8001d5e:	0099      	lsls	r1, r3, #2
 8001d60:	440b      	add	r3, r1
 8001d62:	fbb0 f3f3 	udiv	r3, r0, r3
 8001d66:	3301      	adds	r3, #1
 8001d68:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	bf0c      	ite	eq
 8001d70:	2301      	moveq	r3, #1
 8001d72:	2300      	movne	r3, #0
 8001d74:	b2db      	uxtb	r3, r3
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d001      	beq.n	8001d7e <HAL_I2C_Init+0x196>
 8001d7a:	2301      	movs	r3, #1
 8001d7c:	e022      	b.n	8001dc4 <HAL_I2C_Init+0x1dc>
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	689b      	ldr	r3, [r3, #8]
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d10e      	bne.n	8001da4 <HAL_I2C_Init+0x1bc>
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	1e58      	subs	r0, r3, #1
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	6859      	ldr	r1, [r3, #4]
 8001d8e:	460b      	mov	r3, r1
 8001d90:	005b      	lsls	r3, r3, #1
 8001d92:	440b      	add	r3, r1
 8001d94:	fbb0 f3f3 	udiv	r3, r0, r3
 8001d98:	3301      	adds	r3, #1
 8001d9a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001d9e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001da2:	e00f      	b.n	8001dc4 <HAL_I2C_Init+0x1dc>
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	1e58      	subs	r0, r3, #1
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	6859      	ldr	r1, [r3, #4]
 8001dac:	460b      	mov	r3, r1
 8001dae:	009b      	lsls	r3, r3, #2
 8001db0:	440b      	add	r3, r1
 8001db2:	0099      	lsls	r1, r3, #2
 8001db4:	440b      	add	r3, r1
 8001db6:	fbb0 f3f3 	udiv	r3, r0, r3
 8001dba:	3301      	adds	r3, #1
 8001dbc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001dc0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001dc4:	6879      	ldr	r1, [r7, #4]
 8001dc6:	6809      	ldr	r1, [r1, #0]
 8001dc8:	4313      	orrs	r3, r2
 8001dca:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	69da      	ldr	r2, [r3, #28]
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	6a1b      	ldr	r3, [r3, #32]
 8001dde:	431a      	orrs	r2, r3
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	430a      	orrs	r2, r1
 8001de6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	689b      	ldr	r3, [r3, #8]
 8001dee:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001df2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001df6:	687a      	ldr	r2, [r7, #4]
 8001df8:	6911      	ldr	r1, [r2, #16]
 8001dfa:	687a      	ldr	r2, [r7, #4]
 8001dfc:	68d2      	ldr	r2, [r2, #12]
 8001dfe:	4311      	orrs	r1, r2
 8001e00:	687a      	ldr	r2, [r7, #4]
 8001e02:	6812      	ldr	r2, [r2, #0]
 8001e04:	430b      	orrs	r3, r1
 8001e06:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	68db      	ldr	r3, [r3, #12]
 8001e0e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	695a      	ldr	r2, [r3, #20]
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	699b      	ldr	r3, [r3, #24]
 8001e1a:	431a      	orrs	r2, r3
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	430a      	orrs	r2, r1
 8001e22:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	681a      	ldr	r2, [r3, #0]
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	f042 0201 	orr.w	r2, r2, #1
 8001e32:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	2200      	movs	r2, #0
 8001e38:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	2220      	movs	r2, #32
 8001e3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	2200      	movs	r2, #0
 8001e46:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	2200      	movs	r2, #0
 8001e4c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001e50:	2300      	movs	r3, #0
}
 8001e52:	4618      	mov	r0, r3
 8001e54:	3710      	adds	r7, #16
 8001e56:	46bd      	mov	sp, r7
 8001e58:	bd80      	pop	{r7, pc}
 8001e5a:	bf00      	nop
 8001e5c:	000186a0 	.word	0x000186a0
 8001e60:	001e847f 	.word	0x001e847f
 8001e64:	003d08ff 	.word	0x003d08ff
 8001e68:	431bde83 	.word	0x431bde83
 8001e6c:	10624dd3 	.word	0x10624dd3

08001e70 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001e70:	b580      	push	{r7, lr}
 8001e72:	b088      	sub	sp, #32
 8001e74:	af02      	add	r7, sp, #8
 8001e76:	60f8      	str	r0, [r7, #12]
 8001e78:	607a      	str	r2, [r7, #4]
 8001e7a:	461a      	mov	r2, r3
 8001e7c:	460b      	mov	r3, r1
 8001e7e:	817b      	strh	r3, [r7, #10]
 8001e80:	4613      	mov	r3, r2
 8001e82:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001e84:	f7ff fb92 	bl	80015ac <HAL_GetTick>
 8001e88:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001e90:	b2db      	uxtb	r3, r3
 8001e92:	2b20      	cmp	r3, #32
 8001e94:	f040 80e0 	bne.w	8002058 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001e98:	697b      	ldr	r3, [r7, #20]
 8001e9a:	9300      	str	r3, [sp, #0]
 8001e9c:	2319      	movs	r3, #25
 8001e9e:	2201      	movs	r2, #1
 8001ea0:	4970      	ldr	r1, [pc, #448]	; (8002064 <HAL_I2C_Master_Transmit+0x1f4>)
 8001ea2:	68f8      	ldr	r0, [r7, #12]
 8001ea4:	f000 fc58 	bl	8002758 <I2C_WaitOnFlagUntilTimeout>
 8001ea8:	4603      	mov	r3, r0
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d001      	beq.n	8001eb2 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8001eae:	2302      	movs	r3, #2
 8001eb0:	e0d3      	b.n	800205a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001eb8:	2b01      	cmp	r3, #1
 8001eba:	d101      	bne.n	8001ec0 <HAL_I2C_Master_Transmit+0x50>
 8001ebc:	2302      	movs	r3, #2
 8001ebe:	e0cc      	b.n	800205a <HAL_I2C_Master_Transmit+0x1ea>
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	2201      	movs	r2, #1
 8001ec4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	f003 0301 	and.w	r3, r3, #1
 8001ed2:	2b01      	cmp	r3, #1
 8001ed4:	d007      	beq.n	8001ee6 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	681a      	ldr	r2, [r3, #0]
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	f042 0201 	orr.w	r2, r2, #1
 8001ee4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	681a      	ldr	r2, [r3, #0]
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001ef4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	2221      	movs	r2, #33	; 0x21
 8001efa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	2210      	movs	r2, #16
 8001f02:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	2200      	movs	r2, #0
 8001f0a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	687a      	ldr	r2, [r7, #4]
 8001f10:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	893a      	ldrh	r2, [r7, #8]
 8001f16:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f1c:	b29a      	uxth	r2, r3
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	4a50      	ldr	r2, [pc, #320]	; (8002068 <HAL_I2C_Master_Transmit+0x1f8>)
 8001f26:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001f28:	8979      	ldrh	r1, [r7, #10]
 8001f2a:	697b      	ldr	r3, [r7, #20]
 8001f2c:	6a3a      	ldr	r2, [r7, #32]
 8001f2e:	68f8      	ldr	r0, [r7, #12]
 8001f30:	f000 fac2 	bl	80024b8 <I2C_MasterRequestWrite>
 8001f34:	4603      	mov	r3, r0
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d001      	beq.n	8001f3e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8001f3a:	2301      	movs	r3, #1
 8001f3c:	e08d      	b.n	800205a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001f3e:	2300      	movs	r3, #0
 8001f40:	613b      	str	r3, [r7, #16]
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	695b      	ldr	r3, [r3, #20]
 8001f48:	613b      	str	r3, [r7, #16]
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	699b      	ldr	r3, [r3, #24]
 8001f50:	613b      	str	r3, [r7, #16]
 8001f52:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8001f54:	e066      	b.n	8002024 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001f56:	697a      	ldr	r2, [r7, #20]
 8001f58:	6a39      	ldr	r1, [r7, #32]
 8001f5a:	68f8      	ldr	r0, [r7, #12]
 8001f5c:	f000 fcd2 	bl	8002904 <I2C_WaitOnTXEFlagUntilTimeout>
 8001f60:	4603      	mov	r3, r0
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d00d      	beq.n	8001f82 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f6a:	2b04      	cmp	r3, #4
 8001f6c:	d107      	bne.n	8001f7e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	681a      	ldr	r2, [r3, #0]
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001f7c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001f7e:	2301      	movs	r3, #1
 8001f80:	e06b      	b.n	800205a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f86:	781a      	ldrb	r2, [r3, #0]
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f92:	1c5a      	adds	r2, r3, #1
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f9c:	b29b      	uxth	r3, r3
 8001f9e:	3b01      	subs	r3, #1
 8001fa0:	b29a      	uxth	r2, r3
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001faa:	3b01      	subs	r3, #1
 8001fac:	b29a      	uxth	r2, r3
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	695b      	ldr	r3, [r3, #20]
 8001fb8:	f003 0304 	and.w	r3, r3, #4
 8001fbc:	2b04      	cmp	r3, #4
 8001fbe:	d11b      	bne.n	8001ff8 <HAL_I2C_Master_Transmit+0x188>
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d017      	beq.n	8001ff8 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fcc:	781a      	ldrb	r2, [r3, #0]
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fd8:	1c5a      	adds	r2, r3, #1
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001fe2:	b29b      	uxth	r3, r3
 8001fe4:	3b01      	subs	r3, #1
 8001fe6:	b29a      	uxth	r2, r3
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ff0:	3b01      	subs	r3, #1
 8001ff2:	b29a      	uxth	r2, r3
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001ff8:	697a      	ldr	r2, [r7, #20]
 8001ffa:	6a39      	ldr	r1, [r7, #32]
 8001ffc:	68f8      	ldr	r0, [r7, #12]
 8001ffe:	f000 fcc2 	bl	8002986 <I2C_WaitOnBTFFlagUntilTimeout>
 8002002:	4603      	mov	r3, r0
 8002004:	2b00      	cmp	r3, #0
 8002006:	d00d      	beq.n	8002024 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800200c:	2b04      	cmp	r3, #4
 800200e:	d107      	bne.n	8002020 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	681a      	ldr	r2, [r3, #0]
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800201e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002020:	2301      	movs	r3, #1
 8002022:	e01a      	b.n	800205a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002028:	2b00      	cmp	r3, #0
 800202a:	d194      	bne.n	8001f56 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	681a      	ldr	r2, [r3, #0]
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800203a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	2220      	movs	r2, #32
 8002040:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	2200      	movs	r2, #0
 8002048:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	2200      	movs	r2, #0
 8002050:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002054:	2300      	movs	r3, #0
 8002056:	e000      	b.n	800205a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002058:	2302      	movs	r3, #2
  }
}
 800205a:	4618      	mov	r0, r3
 800205c:	3718      	adds	r7, #24
 800205e:	46bd      	mov	sp, r7
 8002060:	bd80      	pop	{r7, pc}
 8002062:	bf00      	nop
 8002064:	00100002 	.word	0x00100002
 8002068:	ffff0000 	.word	0xffff0000

0800206c <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800206c:	b580      	push	{r7, lr}
 800206e:	b08c      	sub	sp, #48	; 0x30
 8002070:	af02      	add	r7, sp, #8
 8002072:	60f8      	str	r0, [r7, #12]
 8002074:	607a      	str	r2, [r7, #4]
 8002076:	461a      	mov	r2, r3
 8002078:	460b      	mov	r3, r1
 800207a:	817b      	strh	r3, [r7, #10]
 800207c:	4613      	mov	r3, r2
 800207e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002080:	f7ff fa94 	bl	80015ac <HAL_GetTick>
 8002084:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800208c:	b2db      	uxtb	r3, r3
 800208e:	2b20      	cmp	r3, #32
 8002090:	f040 820b 	bne.w	80024aa <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002094:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002096:	9300      	str	r3, [sp, #0]
 8002098:	2319      	movs	r3, #25
 800209a:	2201      	movs	r2, #1
 800209c:	497c      	ldr	r1, [pc, #496]	; (8002290 <HAL_I2C_Master_Receive+0x224>)
 800209e:	68f8      	ldr	r0, [r7, #12]
 80020a0:	f000 fb5a 	bl	8002758 <I2C_WaitOnFlagUntilTimeout>
 80020a4:	4603      	mov	r3, r0
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d001      	beq.n	80020ae <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 80020aa:	2302      	movs	r3, #2
 80020ac:	e1fe      	b.n	80024ac <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80020b4:	2b01      	cmp	r3, #1
 80020b6:	d101      	bne.n	80020bc <HAL_I2C_Master_Receive+0x50>
 80020b8:	2302      	movs	r3, #2
 80020ba:	e1f7      	b.n	80024ac <HAL_I2C_Master_Receive+0x440>
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	2201      	movs	r2, #1
 80020c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	f003 0301 	and.w	r3, r3, #1
 80020ce:	2b01      	cmp	r3, #1
 80020d0:	d007      	beq.n	80020e2 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	681a      	ldr	r2, [r3, #0]
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	f042 0201 	orr.w	r2, r2, #1
 80020e0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	681a      	ldr	r2, [r3, #0]
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80020f0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	2222      	movs	r2, #34	; 0x22
 80020f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	2210      	movs	r2, #16
 80020fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	2200      	movs	r2, #0
 8002106:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	687a      	ldr	r2, [r7, #4]
 800210c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	893a      	ldrh	r2, [r7, #8]
 8002112:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002118:	b29a      	uxth	r2, r3
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	4a5c      	ldr	r2, [pc, #368]	; (8002294 <HAL_I2C_Master_Receive+0x228>)
 8002122:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002124:	8979      	ldrh	r1, [r7, #10]
 8002126:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002128:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800212a:	68f8      	ldr	r0, [r7, #12]
 800212c:	f000 fa46 	bl	80025bc <I2C_MasterRequestRead>
 8002130:	4603      	mov	r3, r0
 8002132:	2b00      	cmp	r3, #0
 8002134:	d001      	beq.n	800213a <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8002136:	2301      	movs	r3, #1
 8002138:	e1b8      	b.n	80024ac <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800213e:	2b00      	cmp	r3, #0
 8002140:	d113      	bne.n	800216a <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002142:	2300      	movs	r3, #0
 8002144:	623b      	str	r3, [r7, #32]
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	695b      	ldr	r3, [r3, #20]
 800214c:	623b      	str	r3, [r7, #32]
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	699b      	ldr	r3, [r3, #24]
 8002154:	623b      	str	r3, [r7, #32]
 8002156:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	681a      	ldr	r2, [r3, #0]
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002166:	601a      	str	r2, [r3, #0]
 8002168:	e18c      	b.n	8002484 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800216e:	2b01      	cmp	r3, #1
 8002170:	d11b      	bne.n	80021aa <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	681a      	ldr	r2, [r3, #0]
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002180:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002182:	2300      	movs	r3, #0
 8002184:	61fb      	str	r3, [r7, #28]
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	695b      	ldr	r3, [r3, #20]
 800218c:	61fb      	str	r3, [r7, #28]
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	699b      	ldr	r3, [r3, #24]
 8002194:	61fb      	str	r3, [r7, #28]
 8002196:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	681a      	ldr	r2, [r3, #0]
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80021a6:	601a      	str	r2, [r3, #0]
 80021a8:	e16c      	b.n	8002484 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80021ae:	2b02      	cmp	r3, #2
 80021b0:	d11b      	bne.n	80021ea <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	681a      	ldr	r2, [r3, #0]
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80021c0:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	681a      	ldr	r2, [r3, #0]
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80021d0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80021d2:	2300      	movs	r3, #0
 80021d4:	61bb      	str	r3, [r7, #24]
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	695b      	ldr	r3, [r3, #20]
 80021dc:	61bb      	str	r3, [r7, #24]
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	699b      	ldr	r3, [r3, #24]
 80021e4:	61bb      	str	r3, [r7, #24]
 80021e6:	69bb      	ldr	r3, [r7, #24]
 80021e8:	e14c      	b.n	8002484 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	681a      	ldr	r2, [r3, #0]
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80021f8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80021fa:	2300      	movs	r3, #0
 80021fc:	617b      	str	r3, [r7, #20]
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	695b      	ldr	r3, [r3, #20]
 8002204:	617b      	str	r3, [r7, #20]
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	699b      	ldr	r3, [r3, #24]
 800220c:	617b      	str	r3, [r7, #20]
 800220e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8002210:	e138      	b.n	8002484 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002216:	2b03      	cmp	r3, #3
 8002218:	f200 80f1 	bhi.w	80023fe <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002220:	2b01      	cmp	r3, #1
 8002222:	d123      	bne.n	800226c <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002224:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002226:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002228:	68f8      	ldr	r0, [r7, #12]
 800222a:	f000 fbed 	bl	8002a08 <I2C_WaitOnRXNEFlagUntilTimeout>
 800222e:	4603      	mov	r3, r0
 8002230:	2b00      	cmp	r3, #0
 8002232:	d001      	beq.n	8002238 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8002234:	2301      	movs	r3, #1
 8002236:	e139      	b.n	80024ac <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	691a      	ldr	r2, [r3, #16]
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002242:	b2d2      	uxtb	r2, r2
 8002244:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800224a:	1c5a      	adds	r2, r3, #1
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002254:	3b01      	subs	r3, #1
 8002256:	b29a      	uxth	r2, r3
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002260:	b29b      	uxth	r3, r3
 8002262:	3b01      	subs	r3, #1
 8002264:	b29a      	uxth	r2, r3
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	855a      	strh	r2, [r3, #42]	; 0x2a
 800226a:	e10b      	b.n	8002484 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002270:	2b02      	cmp	r3, #2
 8002272:	d14e      	bne.n	8002312 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002274:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002276:	9300      	str	r3, [sp, #0]
 8002278:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800227a:	2200      	movs	r2, #0
 800227c:	4906      	ldr	r1, [pc, #24]	; (8002298 <HAL_I2C_Master_Receive+0x22c>)
 800227e:	68f8      	ldr	r0, [r7, #12]
 8002280:	f000 fa6a 	bl	8002758 <I2C_WaitOnFlagUntilTimeout>
 8002284:	4603      	mov	r3, r0
 8002286:	2b00      	cmp	r3, #0
 8002288:	d008      	beq.n	800229c <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 800228a:	2301      	movs	r3, #1
 800228c:	e10e      	b.n	80024ac <HAL_I2C_Master_Receive+0x440>
 800228e:	bf00      	nop
 8002290:	00100002 	.word	0x00100002
 8002294:	ffff0000 	.word	0xffff0000
 8002298:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	681a      	ldr	r2, [r3, #0]
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80022aa:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	691a      	ldr	r2, [r3, #16]
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022b6:	b2d2      	uxtb	r2, r2
 80022b8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022be:	1c5a      	adds	r2, r3, #1
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022c8:	3b01      	subs	r3, #1
 80022ca:	b29a      	uxth	r2, r3
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022d4:	b29b      	uxth	r3, r3
 80022d6:	3b01      	subs	r3, #1
 80022d8:	b29a      	uxth	r2, r3
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	691a      	ldr	r2, [r3, #16]
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022e8:	b2d2      	uxtb	r2, r2
 80022ea:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022f0:	1c5a      	adds	r2, r3, #1
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022fa:	3b01      	subs	r3, #1
 80022fc:	b29a      	uxth	r2, r3
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002306:	b29b      	uxth	r3, r3
 8002308:	3b01      	subs	r3, #1
 800230a:	b29a      	uxth	r2, r3
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002310:	e0b8      	b.n	8002484 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002312:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002314:	9300      	str	r3, [sp, #0]
 8002316:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002318:	2200      	movs	r2, #0
 800231a:	4966      	ldr	r1, [pc, #408]	; (80024b4 <HAL_I2C_Master_Receive+0x448>)
 800231c:	68f8      	ldr	r0, [r7, #12]
 800231e:	f000 fa1b 	bl	8002758 <I2C_WaitOnFlagUntilTimeout>
 8002322:	4603      	mov	r3, r0
 8002324:	2b00      	cmp	r3, #0
 8002326:	d001      	beq.n	800232c <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8002328:	2301      	movs	r3, #1
 800232a:	e0bf      	b.n	80024ac <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	681a      	ldr	r2, [r3, #0]
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800233a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	691a      	ldr	r2, [r3, #16]
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002346:	b2d2      	uxtb	r2, r2
 8002348:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800234e:	1c5a      	adds	r2, r3, #1
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002358:	3b01      	subs	r3, #1
 800235a:	b29a      	uxth	r2, r3
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002364:	b29b      	uxth	r3, r3
 8002366:	3b01      	subs	r3, #1
 8002368:	b29a      	uxth	r2, r3
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800236e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002370:	9300      	str	r3, [sp, #0]
 8002372:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002374:	2200      	movs	r2, #0
 8002376:	494f      	ldr	r1, [pc, #316]	; (80024b4 <HAL_I2C_Master_Receive+0x448>)
 8002378:	68f8      	ldr	r0, [r7, #12]
 800237a:	f000 f9ed 	bl	8002758 <I2C_WaitOnFlagUntilTimeout>
 800237e:	4603      	mov	r3, r0
 8002380:	2b00      	cmp	r3, #0
 8002382:	d001      	beq.n	8002388 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8002384:	2301      	movs	r3, #1
 8002386:	e091      	b.n	80024ac <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	681a      	ldr	r2, [r3, #0]
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002396:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	691a      	ldr	r2, [r3, #16]
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023a2:	b2d2      	uxtb	r2, r2
 80023a4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023aa:	1c5a      	adds	r2, r3, #1
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023b4:	3b01      	subs	r3, #1
 80023b6:	b29a      	uxth	r2, r3
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023c0:	b29b      	uxth	r3, r3
 80023c2:	3b01      	subs	r3, #1
 80023c4:	b29a      	uxth	r2, r3
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	691a      	ldr	r2, [r3, #16]
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023d4:	b2d2      	uxtb	r2, r2
 80023d6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023dc:	1c5a      	adds	r2, r3, #1
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023e6:	3b01      	subs	r3, #1
 80023e8:	b29a      	uxth	r2, r3
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023f2:	b29b      	uxth	r3, r3
 80023f4:	3b01      	subs	r3, #1
 80023f6:	b29a      	uxth	r2, r3
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	855a      	strh	r2, [r3, #42]	; 0x2a
 80023fc:	e042      	b.n	8002484 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80023fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002400:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002402:	68f8      	ldr	r0, [r7, #12]
 8002404:	f000 fb00 	bl	8002a08 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002408:	4603      	mov	r3, r0
 800240a:	2b00      	cmp	r3, #0
 800240c:	d001      	beq.n	8002412 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 800240e:	2301      	movs	r3, #1
 8002410:	e04c      	b.n	80024ac <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	691a      	ldr	r2, [r3, #16]
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800241c:	b2d2      	uxtb	r2, r2
 800241e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002424:	1c5a      	adds	r2, r3, #1
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800242e:	3b01      	subs	r3, #1
 8002430:	b29a      	uxth	r2, r3
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800243a:	b29b      	uxth	r3, r3
 800243c:	3b01      	subs	r3, #1
 800243e:	b29a      	uxth	r2, r3
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	695b      	ldr	r3, [r3, #20]
 800244a:	f003 0304 	and.w	r3, r3, #4
 800244e:	2b04      	cmp	r3, #4
 8002450:	d118      	bne.n	8002484 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	691a      	ldr	r2, [r3, #16]
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800245c:	b2d2      	uxtb	r2, r2
 800245e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002464:	1c5a      	adds	r2, r3, #1
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800246e:	3b01      	subs	r3, #1
 8002470:	b29a      	uxth	r2, r3
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800247a:	b29b      	uxth	r3, r3
 800247c:	3b01      	subs	r3, #1
 800247e:	b29a      	uxth	r2, r3
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002488:	2b00      	cmp	r3, #0
 800248a:	f47f aec2 	bne.w	8002212 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	2220      	movs	r2, #32
 8002492:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	2200      	movs	r2, #0
 800249a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	2200      	movs	r2, #0
 80024a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80024a6:	2300      	movs	r3, #0
 80024a8:	e000      	b.n	80024ac <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 80024aa:	2302      	movs	r3, #2
  }
}
 80024ac:	4618      	mov	r0, r3
 80024ae:	3728      	adds	r7, #40	; 0x28
 80024b0:	46bd      	mov	sp, r7
 80024b2:	bd80      	pop	{r7, pc}
 80024b4:	00010004 	.word	0x00010004

080024b8 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80024b8:	b580      	push	{r7, lr}
 80024ba:	b088      	sub	sp, #32
 80024bc:	af02      	add	r7, sp, #8
 80024be:	60f8      	str	r0, [r7, #12]
 80024c0:	607a      	str	r2, [r7, #4]
 80024c2:	603b      	str	r3, [r7, #0]
 80024c4:	460b      	mov	r3, r1
 80024c6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024cc:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80024ce:	697b      	ldr	r3, [r7, #20]
 80024d0:	2b08      	cmp	r3, #8
 80024d2:	d006      	beq.n	80024e2 <I2C_MasterRequestWrite+0x2a>
 80024d4:	697b      	ldr	r3, [r7, #20]
 80024d6:	2b01      	cmp	r3, #1
 80024d8:	d003      	beq.n	80024e2 <I2C_MasterRequestWrite+0x2a>
 80024da:	697b      	ldr	r3, [r7, #20]
 80024dc:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80024e0:	d108      	bne.n	80024f4 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	681a      	ldr	r2, [r3, #0]
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80024f0:	601a      	str	r2, [r3, #0]
 80024f2:	e00b      	b.n	800250c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024f8:	2b12      	cmp	r3, #18
 80024fa:	d107      	bne.n	800250c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	681a      	ldr	r2, [r3, #0]
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800250a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800250c:	683b      	ldr	r3, [r7, #0]
 800250e:	9300      	str	r3, [sp, #0]
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	2200      	movs	r2, #0
 8002514:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002518:	68f8      	ldr	r0, [r7, #12]
 800251a:	f000 f91d 	bl	8002758 <I2C_WaitOnFlagUntilTimeout>
 800251e:	4603      	mov	r3, r0
 8002520:	2b00      	cmp	r3, #0
 8002522:	d00d      	beq.n	8002540 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800252e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002532:	d103      	bne.n	800253c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	f44f 7200 	mov.w	r2, #512	; 0x200
 800253a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800253c:	2303      	movs	r3, #3
 800253e:	e035      	b.n	80025ac <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	691b      	ldr	r3, [r3, #16]
 8002544:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002548:	d108      	bne.n	800255c <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800254a:	897b      	ldrh	r3, [r7, #10]
 800254c:	b2db      	uxtb	r3, r3
 800254e:	461a      	mov	r2, r3
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002558:	611a      	str	r2, [r3, #16]
 800255a:	e01b      	b.n	8002594 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800255c:	897b      	ldrh	r3, [r7, #10]
 800255e:	11db      	asrs	r3, r3, #7
 8002560:	b2db      	uxtb	r3, r3
 8002562:	f003 0306 	and.w	r3, r3, #6
 8002566:	b2db      	uxtb	r3, r3
 8002568:	f063 030f 	orn	r3, r3, #15
 800256c:	b2da      	uxtb	r2, r3
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002574:	683b      	ldr	r3, [r7, #0]
 8002576:	687a      	ldr	r2, [r7, #4]
 8002578:	490e      	ldr	r1, [pc, #56]	; (80025b4 <I2C_MasterRequestWrite+0xfc>)
 800257a:	68f8      	ldr	r0, [r7, #12]
 800257c:	f000 f943 	bl	8002806 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002580:	4603      	mov	r3, r0
 8002582:	2b00      	cmp	r3, #0
 8002584:	d001      	beq.n	800258a <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8002586:	2301      	movs	r3, #1
 8002588:	e010      	b.n	80025ac <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800258a:	897b      	ldrh	r3, [r7, #10]
 800258c:	b2da      	uxtb	r2, r3
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002594:	683b      	ldr	r3, [r7, #0]
 8002596:	687a      	ldr	r2, [r7, #4]
 8002598:	4907      	ldr	r1, [pc, #28]	; (80025b8 <I2C_MasterRequestWrite+0x100>)
 800259a:	68f8      	ldr	r0, [r7, #12]
 800259c:	f000 f933 	bl	8002806 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80025a0:	4603      	mov	r3, r0
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d001      	beq.n	80025aa <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80025a6:	2301      	movs	r3, #1
 80025a8:	e000      	b.n	80025ac <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80025aa:	2300      	movs	r3, #0
}
 80025ac:	4618      	mov	r0, r3
 80025ae:	3718      	adds	r7, #24
 80025b0:	46bd      	mov	sp, r7
 80025b2:	bd80      	pop	{r7, pc}
 80025b4:	00010008 	.word	0x00010008
 80025b8:	00010002 	.word	0x00010002

080025bc <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80025bc:	b580      	push	{r7, lr}
 80025be:	b088      	sub	sp, #32
 80025c0:	af02      	add	r7, sp, #8
 80025c2:	60f8      	str	r0, [r7, #12]
 80025c4:	607a      	str	r2, [r7, #4]
 80025c6:	603b      	str	r3, [r7, #0]
 80025c8:	460b      	mov	r3, r1
 80025ca:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025d0:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	681a      	ldr	r2, [r3, #0]
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80025e0:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80025e2:	697b      	ldr	r3, [r7, #20]
 80025e4:	2b08      	cmp	r3, #8
 80025e6:	d006      	beq.n	80025f6 <I2C_MasterRequestRead+0x3a>
 80025e8:	697b      	ldr	r3, [r7, #20]
 80025ea:	2b01      	cmp	r3, #1
 80025ec:	d003      	beq.n	80025f6 <I2C_MasterRequestRead+0x3a>
 80025ee:	697b      	ldr	r3, [r7, #20]
 80025f0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80025f4:	d108      	bne.n	8002608 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	681a      	ldr	r2, [r3, #0]
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002604:	601a      	str	r2, [r3, #0]
 8002606:	e00b      	b.n	8002620 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800260c:	2b11      	cmp	r3, #17
 800260e:	d107      	bne.n	8002620 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	681a      	ldr	r2, [r3, #0]
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800261e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002620:	683b      	ldr	r3, [r7, #0]
 8002622:	9300      	str	r3, [sp, #0]
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	2200      	movs	r2, #0
 8002628:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800262c:	68f8      	ldr	r0, [r7, #12]
 800262e:	f000 f893 	bl	8002758 <I2C_WaitOnFlagUntilTimeout>
 8002632:	4603      	mov	r3, r0
 8002634:	2b00      	cmp	r3, #0
 8002636:	d00d      	beq.n	8002654 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002642:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002646:	d103      	bne.n	8002650 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800264e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002650:	2303      	movs	r3, #3
 8002652:	e079      	b.n	8002748 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	691b      	ldr	r3, [r3, #16]
 8002658:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800265c:	d108      	bne.n	8002670 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800265e:	897b      	ldrh	r3, [r7, #10]
 8002660:	b2db      	uxtb	r3, r3
 8002662:	f043 0301 	orr.w	r3, r3, #1
 8002666:	b2da      	uxtb	r2, r3
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	611a      	str	r2, [r3, #16]
 800266e:	e05f      	b.n	8002730 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002670:	897b      	ldrh	r3, [r7, #10]
 8002672:	11db      	asrs	r3, r3, #7
 8002674:	b2db      	uxtb	r3, r3
 8002676:	f003 0306 	and.w	r3, r3, #6
 800267a:	b2db      	uxtb	r3, r3
 800267c:	f063 030f 	orn	r3, r3, #15
 8002680:	b2da      	uxtb	r2, r3
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002688:	683b      	ldr	r3, [r7, #0]
 800268a:	687a      	ldr	r2, [r7, #4]
 800268c:	4930      	ldr	r1, [pc, #192]	; (8002750 <I2C_MasterRequestRead+0x194>)
 800268e:	68f8      	ldr	r0, [r7, #12]
 8002690:	f000 f8b9 	bl	8002806 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002694:	4603      	mov	r3, r0
 8002696:	2b00      	cmp	r3, #0
 8002698:	d001      	beq.n	800269e <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 800269a:	2301      	movs	r3, #1
 800269c:	e054      	b.n	8002748 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800269e:	897b      	ldrh	r3, [r7, #10]
 80026a0:	b2da      	uxtb	r2, r3
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80026a8:	683b      	ldr	r3, [r7, #0]
 80026aa:	687a      	ldr	r2, [r7, #4]
 80026ac:	4929      	ldr	r1, [pc, #164]	; (8002754 <I2C_MasterRequestRead+0x198>)
 80026ae:	68f8      	ldr	r0, [r7, #12]
 80026b0:	f000 f8a9 	bl	8002806 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80026b4:	4603      	mov	r3, r0
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d001      	beq.n	80026be <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 80026ba:	2301      	movs	r3, #1
 80026bc:	e044      	b.n	8002748 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80026be:	2300      	movs	r3, #0
 80026c0:	613b      	str	r3, [r7, #16]
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	695b      	ldr	r3, [r3, #20]
 80026c8:	613b      	str	r3, [r7, #16]
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	699b      	ldr	r3, [r3, #24]
 80026d0:	613b      	str	r3, [r7, #16]
 80026d2:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	681a      	ldr	r2, [r3, #0]
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80026e2:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80026e4:	683b      	ldr	r3, [r7, #0]
 80026e6:	9300      	str	r3, [sp, #0]
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	2200      	movs	r2, #0
 80026ec:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80026f0:	68f8      	ldr	r0, [r7, #12]
 80026f2:	f000 f831 	bl	8002758 <I2C_WaitOnFlagUntilTimeout>
 80026f6:	4603      	mov	r3, r0
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d00d      	beq.n	8002718 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002706:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800270a:	d103      	bne.n	8002714 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002712:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8002714:	2303      	movs	r3, #3
 8002716:	e017      	b.n	8002748 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8002718:	897b      	ldrh	r3, [r7, #10]
 800271a:	11db      	asrs	r3, r3, #7
 800271c:	b2db      	uxtb	r3, r3
 800271e:	f003 0306 	and.w	r3, r3, #6
 8002722:	b2db      	uxtb	r3, r3
 8002724:	f063 030e 	orn	r3, r3, #14
 8002728:	b2da      	uxtb	r2, r3
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002730:	683b      	ldr	r3, [r7, #0]
 8002732:	687a      	ldr	r2, [r7, #4]
 8002734:	4907      	ldr	r1, [pc, #28]	; (8002754 <I2C_MasterRequestRead+0x198>)
 8002736:	68f8      	ldr	r0, [r7, #12]
 8002738:	f000 f865 	bl	8002806 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800273c:	4603      	mov	r3, r0
 800273e:	2b00      	cmp	r3, #0
 8002740:	d001      	beq.n	8002746 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8002742:	2301      	movs	r3, #1
 8002744:	e000      	b.n	8002748 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8002746:	2300      	movs	r3, #0
}
 8002748:	4618      	mov	r0, r3
 800274a:	3718      	adds	r7, #24
 800274c:	46bd      	mov	sp, r7
 800274e:	bd80      	pop	{r7, pc}
 8002750:	00010008 	.word	0x00010008
 8002754:	00010002 	.word	0x00010002

08002758 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002758:	b580      	push	{r7, lr}
 800275a:	b084      	sub	sp, #16
 800275c:	af00      	add	r7, sp, #0
 800275e:	60f8      	str	r0, [r7, #12]
 8002760:	60b9      	str	r1, [r7, #8]
 8002762:	603b      	str	r3, [r7, #0]
 8002764:	4613      	mov	r3, r2
 8002766:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002768:	e025      	b.n	80027b6 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800276a:	683b      	ldr	r3, [r7, #0]
 800276c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002770:	d021      	beq.n	80027b6 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002772:	f7fe ff1b 	bl	80015ac <HAL_GetTick>
 8002776:	4602      	mov	r2, r0
 8002778:	69bb      	ldr	r3, [r7, #24]
 800277a:	1ad3      	subs	r3, r2, r3
 800277c:	683a      	ldr	r2, [r7, #0]
 800277e:	429a      	cmp	r2, r3
 8002780:	d302      	bcc.n	8002788 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002782:	683b      	ldr	r3, [r7, #0]
 8002784:	2b00      	cmp	r3, #0
 8002786:	d116      	bne.n	80027b6 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	2200      	movs	r2, #0
 800278c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	2220      	movs	r2, #32
 8002792:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	2200      	movs	r2, #0
 800279a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027a2:	f043 0220 	orr.w	r2, r3, #32
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	2200      	movs	r2, #0
 80027ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80027b2:	2301      	movs	r3, #1
 80027b4:	e023      	b.n	80027fe <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80027b6:	68bb      	ldr	r3, [r7, #8]
 80027b8:	0c1b      	lsrs	r3, r3, #16
 80027ba:	b2db      	uxtb	r3, r3
 80027bc:	2b01      	cmp	r3, #1
 80027be:	d10d      	bne.n	80027dc <I2C_WaitOnFlagUntilTimeout+0x84>
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	695b      	ldr	r3, [r3, #20]
 80027c6:	43da      	mvns	r2, r3
 80027c8:	68bb      	ldr	r3, [r7, #8]
 80027ca:	4013      	ands	r3, r2
 80027cc:	b29b      	uxth	r3, r3
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	bf0c      	ite	eq
 80027d2:	2301      	moveq	r3, #1
 80027d4:	2300      	movne	r3, #0
 80027d6:	b2db      	uxtb	r3, r3
 80027d8:	461a      	mov	r2, r3
 80027da:	e00c      	b.n	80027f6 <I2C_WaitOnFlagUntilTimeout+0x9e>
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	699b      	ldr	r3, [r3, #24]
 80027e2:	43da      	mvns	r2, r3
 80027e4:	68bb      	ldr	r3, [r7, #8]
 80027e6:	4013      	ands	r3, r2
 80027e8:	b29b      	uxth	r3, r3
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	bf0c      	ite	eq
 80027ee:	2301      	moveq	r3, #1
 80027f0:	2300      	movne	r3, #0
 80027f2:	b2db      	uxtb	r3, r3
 80027f4:	461a      	mov	r2, r3
 80027f6:	79fb      	ldrb	r3, [r7, #7]
 80027f8:	429a      	cmp	r2, r3
 80027fa:	d0b6      	beq.n	800276a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80027fc:	2300      	movs	r3, #0
}
 80027fe:	4618      	mov	r0, r3
 8002800:	3710      	adds	r7, #16
 8002802:	46bd      	mov	sp, r7
 8002804:	bd80      	pop	{r7, pc}

08002806 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002806:	b580      	push	{r7, lr}
 8002808:	b084      	sub	sp, #16
 800280a:	af00      	add	r7, sp, #0
 800280c:	60f8      	str	r0, [r7, #12]
 800280e:	60b9      	str	r1, [r7, #8]
 8002810:	607a      	str	r2, [r7, #4]
 8002812:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002814:	e051      	b.n	80028ba <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	695b      	ldr	r3, [r3, #20]
 800281c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002820:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002824:	d123      	bne.n	800286e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	681a      	ldr	r2, [r3, #0]
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002834:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800283e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	2200      	movs	r2, #0
 8002844:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	2220      	movs	r2, #32
 800284a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	2200      	movs	r2, #0
 8002852:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800285a:	f043 0204 	orr.w	r2, r3, #4
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	2200      	movs	r2, #0
 8002866:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800286a:	2301      	movs	r3, #1
 800286c:	e046      	b.n	80028fc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002874:	d021      	beq.n	80028ba <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002876:	f7fe fe99 	bl	80015ac <HAL_GetTick>
 800287a:	4602      	mov	r2, r0
 800287c:	683b      	ldr	r3, [r7, #0]
 800287e:	1ad3      	subs	r3, r2, r3
 8002880:	687a      	ldr	r2, [r7, #4]
 8002882:	429a      	cmp	r2, r3
 8002884:	d302      	bcc.n	800288c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	2b00      	cmp	r3, #0
 800288a:	d116      	bne.n	80028ba <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	2200      	movs	r2, #0
 8002890:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	2220      	movs	r2, #32
 8002896:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	2200      	movs	r2, #0
 800289e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028a6:	f043 0220 	orr.w	r2, r3, #32
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	2200      	movs	r2, #0
 80028b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80028b6:	2301      	movs	r3, #1
 80028b8:	e020      	b.n	80028fc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80028ba:	68bb      	ldr	r3, [r7, #8]
 80028bc:	0c1b      	lsrs	r3, r3, #16
 80028be:	b2db      	uxtb	r3, r3
 80028c0:	2b01      	cmp	r3, #1
 80028c2:	d10c      	bne.n	80028de <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	695b      	ldr	r3, [r3, #20]
 80028ca:	43da      	mvns	r2, r3
 80028cc:	68bb      	ldr	r3, [r7, #8]
 80028ce:	4013      	ands	r3, r2
 80028d0:	b29b      	uxth	r3, r3
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	bf14      	ite	ne
 80028d6:	2301      	movne	r3, #1
 80028d8:	2300      	moveq	r3, #0
 80028da:	b2db      	uxtb	r3, r3
 80028dc:	e00b      	b.n	80028f6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	699b      	ldr	r3, [r3, #24]
 80028e4:	43da      	mvns	r2, r3
 80028e6:	68bb      	ldr	r3, [r7, #8]
 80028e8:	4013      	ands	r3, r2
 80028ea:	b29b      	uxth	r3, r3
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	bf14      	ite	ne
 80028f0:	2301      	movne	r3, #1
 80028f2:	2300      	moveq	r3, #0
 80028f4:	b2db      	uxtb	r3, r3
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d18d      	bne.n	8002816 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80028fa:	2300      	movs	r3, #0
}
 80028fc:	4618      	mov	r0, r3
 80028fe:	3710      	adds	r7, #16
 8002900:	46bd      	mov	sp, r7
 8002902:	bd80      	pop	{r7, pc}

08002904 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002904:	b580      	push	{r7, lr}
 8002906:	b084      	sub	sp, #16
 8002908:	af00      	add	r7, sp, #0
 800290a:	60f8      	str	r0, [r7, #12]
 800290c:	60b9      	str	r1, [r7, #8]
 800290e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002910:	e02d      	b.n	800296e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002912:	68f8      	ldr	r0, [r7, #12]
 8002914:	f000 f8ce 	bl	8002ab4 <I2C_IsAcknowledgeFailed>
 8002918:	4603      	mov	r3, r0
 800291a:	2b00      	cmp	r3, #0
 800291c:	d001      	beq.n	8002922 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800291e:	2301      	movs	r3, #1
 8002920:	e02d      	b.n	800297e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002922:	68bb      	ldr	r3, [r7, #8]
 8002924:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002928:	d021      	beq.n	800296e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800292a:	f7fe fe3f 	bl	80015ac <HAL_GetTick>
 800292e:	4602      	mov	r2, r0
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	1ad3      	subs	r3, r2, r3
 8002934:	68ba      	ldr	r2, [r7, #8]
 8002936:	429a      	cmp	r2, r3
 8002938:	d302      	bcc.n	8002940 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800293a:	68bb      	ldr	r3, [r7, #8]
 800293c:	2b00      	cmp	r3, #0
 800293e:	d116      	bne.n	800296e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	2200      	movs	r2, #0
 8002944:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	2220      	movs	r2, #32
 800294a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	2200      	movs	r2, #0
 8002952:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800295a:	f043 0220 	orr.w	r2, r3, #32
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	2200      	movs	r2, #0
 8002966:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800296a:	2301      	movs	r3, #1
 800296c:	e007      	b.n	800297e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	695b      	ldr	r3, [r3, #20]
 8002974:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002978:	2b80      	cmp	r3, #128	; 0x80
 800297a:	d1ca      	bne.n	8002912 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800297c:	2300      	movs	r3, #0
}
 800297e:	4618      	mov	r0, r3
 8002980:	3710      	adds	r7, #16
 8002982:	46bd      	mov	sp, r7
 8002984:	bd80      	pop	{r7, pc}

08002986 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002986:	b580      	push	{r7, lr}
 8002988:	b084      	sub	sp, #16
 800298a:	af00      	add	r7, sp, #0
 800298c:	60f8      	str	r0, [r7, #12]
 800298e:	60b9      	str	r1, [r7, #8]
 8002990:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002992:	e02d      	b.n	80029f0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002994:	68f8      	ldr	r0, [r7, #12]
 8002996:	f000 f88d 	bl	8002ab4 <I2C_IsAcknowledgeFailed>
 800299a:	4603      	mov	r3, r0
 800299c:	2b00      	cmp	r3, #0
 800299e:	d001      	beq.n	80029a4 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80029a0:	2301      	movs	r3, #1
 80029a2:	e02d      	b.n	8002a00 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80029a4:	68bb      	ldr	r3, [r7, #8]
 80029a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029aa:	d021      	beq.n	80029f0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80029ac:	f7fe fdfe 	bl	80015ac <HAL_GetTick>
 80029b0:	4602      	mov	r2, r0
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	1ad3      	subs	r3, r2, r3
 80029b6:	68ba      	ldr	r2, [r7, #8]
 80029b8:	429a      	cmp	r2, r3
 80029ba:	d302      	bcc.n	80029c2 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80029bc:	68bb      	ldr	r3, [r7, #8]
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d116      	bne.n	80029f0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	2200      	movs	r2, #0
 80029c6:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	2220      	movs	r2, #32
 80029cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	2200      	movs	r2, #0
 80029d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029dc:	f043 0220 	orr.w	r2, r3, #32
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	2200      	movs	r2, #0
 80029e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80029ec:	2301      	movs	r3, #1
 80029ee:	e007      	b.n	8002a00 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	695b      	ldr	r3, [r3, #20]
 80029f6:	f003 0304 	and.w	r3, r3, #4
 80029fa:	2b04      	cmp	r3, #4
 80029fc:	d1ca      	bne.n	8002994 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80029fe:	2300      	movs	r3, #0
}
 8002a00:	4618      	mov	r0, r3
 8002a02:	3710      	adds	r7, #16
 8002a04:	46bd      	mov	sp, r7
 8002a06:	bd80      	pop	{r7, pc}

08002a08 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002a08:	b580      	push	{r7, lr}
 8002a0a:	b084      	sub	sp, #16
 8002a0c:	af00      	add	r7, sp, #0
 8002a0e:	60f8      	str	r0, [r7, #12]
 8002a10:	60b9      	str	r1, [r7, #8]
 8002a12:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002a14:	e042      	b.n	8002a9c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	695b      	ldr	r3, [r3, #20]
 8002a1c:	f003 0310 	and.w	r3, r3, #16
 8002a20:	2b10      	cmp	r3, #16
 8002a22:	d119      	bne.n	8002a58 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	f06f 0210 	mvn.w	r2, #16
 8002a2c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	2200      	movs	r2, #0
 8002a32:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	2220      	movs	r2, #32
 8002a38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	2200      	movs	r2, #0
 8002a40:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	2200      	movs	r2, #0
 8002a50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002a54:	2301      	movs	r3, #1
 8002a56:	e029      	b.n	8002aac <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002a58:	f7fe fda8 	bl	80015ac <HAL_GetTick>
 8002a5c:	4602      	mov	r2, r0
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	1ad3      	subs	r3, r2, r3
 8002a62:	68ba      	ldr	r2, [r7, #8]
 8002a64:	429a      	cmp	r2, r3
 8002a66:	d302      	bcc.n	8002a6e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8002a68:	68bb      	ldr	r3, [r7, #8]
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d116      	bne.n	8002a9c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	2200      	movs	r2, #0
 8002a72:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	2220      	movs	r2, #32
 8002a78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	2200      	movs	r2, #0
 8002a80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a88:	f043 0220 	orr.w	r2, r3, #32
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	2200      	movs	r2, #0
 8002a94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002a98:	2301      	movs	r3, #1
 8002a9a:	e007      	b.n	8002aac <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	695b      	ldr	r3, [r3, #20]
 8002aa2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002aa6:	2b40      	cmp	r3, #64	; 0x40
 8002aa8:	d1b5      	bne.n	8002a16 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002aaa:	2300      	movs	r3, #0
}
 8002aac:	4618      	mov	r0, r3
 8002aae:	3710      	adds	r7, #16
 8002ab0:	46bd      	mov	sp, r7
 8002ab2:	bd80      	pop	{r7, pc}

08002ab4 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002ab4:	b480      	push	{r7}
 8002ab6:	b083      	sub	sp, #12
 8002ab8:	af00      	add	r7, sp, #0
 8002aba:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	695b      	ldr	r3, [r3, #20]
 8002ac2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ac6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002aca:	d11b      	bne.n	8002b04 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002ad4:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	2200      	movs	r2, #0
 8002ada:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	2220      	movs	r2, #32
 8002ae0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	2200      	movs	r2, #0
 8002ae8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002af0:	f043 0204 	orr.w	r2, r3, #4
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	2200      	movs	r2, #0
 8002afc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002b00:	2301      	movs	r3, #1
 8002b02:	e000      	b.n	8002b06 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002b04:	2300      	movs	r3, #0
}
 8002b06:	4618      	mov	r0, r3
 8002b08:	370c      	adds	r7, #12
 8002b0a:	46bd      	mov	sp, r7
 8002b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b10:	4770      	bx	lr
	...

08002b14 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002b14:	b580      	push	{r7, lr}
 8002b16:	b086      	sub	sp, #24
 8002b18:	af00      	add	r7, sp, #0
 8002b1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d101      	bne.n	8002b26 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002b22:	2301      	movs	r3, #1
 8002b24:	e267      	b.n	8002ff6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	f003 0301 	and.w	r3, r3, #1
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d075      	beq.n	8002c1e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002b32:	4b88      	ldr	r3, [pc, #544]	; (8002d54 <HAL_RCC_OscConfig+0x240>)
 8002b34:	689b      	ldr	r3, [r3, #8]
 8002b36:	f003 030c 	and.w	r3, r3, #12
 8002b3a:	2b04      	cmp	r3, #4
 8002b3c:	d00c      	beq.n	8002b58 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002b3e:	4b85      	ldr	r3, [pc, #532]	; (8002d54 <HAL_RCC_OscConfig+0x240>)
 8002b40:	689b      	ldr	r3, [r3, #8]
 8002b42:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002b46:	2b08      	cmp	r3, #8
 8002b48:	d112      	bne.n	8002b70 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002b4a:	4b82      	ldr	r3, [pc, #520]	; (8002d54 <HAL_RCC_OscConfig+0x240>)
 8002b4c:	685b      	ldr	r3, [r3, #4]
 8002b4e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b52:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002b56:	d10b      	bne.n	8002b70 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b58:	4b7e      	ldr	r3, [pc, #504]	; (8002d54 <HAL_RCC_OscConfig+0x240>)
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d05b      	beq.n	8002c1c <HAL_RCC_OscConfig+0x108>
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	685b      	ldr	r3, [r3, #4]
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d157      	bne.n	8002c1c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002b6c:	2301      	movs	r3, #1
 8002b6e:	e242      	b.n	8002ff6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	685b      	ldr	r3, [r3, #4]
 8002b74:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b78:	d106      	bne.n	8002b88 <HAL_RCC_OscConfig+0x74>
 8002b7a:	4b76      	ldr	r3, [pc, #472]	; (8002d54 <HAL_RCC_OscConfig+0x240>)
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	4a75      	ldr	r2, [pc, #468]	; (8002d54 <HAL_RCC_OscConfig+0x240>)
 8002b80:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b84:	6013      	str	r3, [r2, #0]
 8002b86:	e01d      	b.n	8002bc4 <HAL_RCC_OscConfig+0xb0>
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	685b      	ldr	r3, [r3, #4]
 8002b8c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002b90:	d10c      	bne.n	8002bac <HAL_RCC_OscConfig+0x98>
 8002b92:	4b70      	ldr	r3, [pc, #448]	; (8002d54 <HAL_RCC_OscConfig+0x240>)
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	4a6f      	ldr	r2, [pc, #444]	; (8002d54 <HAL_RCC_OscConfig+0x240>)
 8002b98:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002b9c:	6013      	str	r3, [r2, #0]
 8002b9e:	4b6d      	ldr	r3, [pc, #436]	; (8002d54 <HAL_RCC_OscConfig+0x240>)
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	4a6c      	ldr	r2, [pc, #432]	; (8002d54 <HAL_RCC_OscConfig+0x240>)
 8002ba4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ba8:	6013      	str	r3, [r2, #0]
 8002baa:	e00b      	b.n	8002bc4 <HAL_RCC_OscConfig+0xb0>
 8002bac:	4b69      	ldr	r3, [pc, #420]	; (8002d54 <HAL_RCC_OscConfig+0x240>)
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	4a68      	ldr	r2, [pc, #416]	; (8002d54 <HAL_RCC_OscConfig+0x240>)
 8002bb2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002bb6:	6013      	str	r3, [r2, #0]
 8002bb8:	4b66      	ldr	r3, [pc, #408]	; (8002d54 <HAL_RCC_OscConfig+0x240>)
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	4a65      	ldr	r2, [pc, #404]	; (8002d54 <HAL_RCC_OscConfig+0x240>)
 8002bbe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002bc2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	685b      	ldr	r3, [r3, #4]
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d013      	beq.n	8002bf4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bcc:	f7fe fcee 	bl	80015ac <HAL_GetTick>
 8002bd0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002bd2:	e008      	b.n	8002be6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002bd4:	f7fe fcea 	bl	80015ac <HAL_GetTick>
 8002bd8:	4602      	mov	r2, r0
 8002bda:	693b      	ldr	r3, [r7, #16]
 8002bdc:	1ad3      	subs	r3, r2, r3
 8002bde:	2b64      	cmp	r3, #100	; 0x64
 8002be0:	d901      	bls.n	8002be6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002be2:	2303      	movs	r3, #3
 8002be4:	e207      	b.n	8002ff6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002be6:	4b5b      	ldr	r3, [pc, #364]	; (8002d54 <HAL_RCC_OscConfig+0x240>)
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d0f0      	beq.n	8002bd4 <HAL_RCC_OscConfig+0xc0>
 8002bf2:	e014      	b.n	8002c1e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bf4:	f7fe fcda 	bl	80015ac <HAL_GetTick>
 8002bf8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002bfa:	e008      	b.n	8002c0e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002bfc:	f7fe fcd6 	bl	80015ac <HAL_GetTick>
 8002c00:	4602      	mov	r2, r0
 8002c02:	693b      	ldr	r3, [r7, #16]
 8002c04:	1ad3      	subs	r3, r2, r3
 8002c06:	2b64      	cmp	r3, #100	; 0x64
 8002c08:	d901      	bls.n	8002c0e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002c0a:	2303      	movs	r3, #3
 8002c0c:	e1f3      	b.n	8002ff6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c0e:	4b51      	ldr	r3, [pc, #324]	; (8002d54 <HAL_RCC_OscConfig+0x240>)
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d1f0      	bne.n	8002bfc <HAL_RCC_OscConfig+0xe8>
 8002c1a:	e000      	b.n	8002c1e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c1c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	f003 0302 	and.w	r3, r3, #2
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d063      	beq.n	8002cf2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002c2a:	4b4a      	ldr	r3, [pc, #296]	; (8002d54 <HAL_RCC_OscConfig+0x240>)
 8002c2c:	689b      	ldr	r3, [r3, #8]
 8002c2e:	f003 030c 	and.w	r3, r3, #12
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d00b      	beq.n	8002c4e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002c36:	4b47      	ldr	r3, [pc, #284]	; (8002d54 <HAL_RCC_OscConfig+0x240>)
 8002c38:	689b      	ldr	r3, [r3, #8]
 8002c3a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002c3e:	2b08      	cmp	r3, #8
 8002c40:	d11c      	bne.n	8002c7c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002c42:	4b44      	ldr	r3, [pc, #272]	; (8002d54 <HAL_RCC_OscConfig+0x240>)
 8002c44:	685b      	ldr	r3, [r3, #4]
 8002c46:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d116      	bne.n	8002c7c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002c4e:	4b41      	ldr	r3, [pc, #260]	; (8002d54 <HAL_RCC_OscConfig+0x240>)
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	f003 0302 	and.w	r3, r3, #2
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d005      	beq.n	8002c66 <HAL_RCC_OscConfig+0x152>
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	68db      	ldr	r3, [r3, #12]
 8002c5e:	2b01      	cmp	r3, #1
 8002c60:	d001      	beq.n	8002c66 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002c62:	2301      	movs	r3, #1
 8002c64:	e1c7      	b.n	8002ff6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c66:	4b3b      	ldr	r3, [pc, #236]	; (8002d54 <HAL_RCC_OscConfig+0x240>)
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	691b      	ldr	r3, [r3, #16]
 8002c72:	00db      	lsls	r3, r3, #3
 8002c74:	4937      	ldr	r1, [pc, #220]	; (8002d54 <HAL_RCC_OscConfig+0x240>)
 8002c76:	4313      	orrs	r3, r2
 8002c78:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002c7a:	e03a      	b.n	8002cf2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	68db      	ldr	r3, [r3, #12]
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d020      	beq.n	8002cc6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002c84:	4b34      	ldr	r3, [pc, #208]	; (8002d58 <HAL_RCC_OscConfig+0x244>)
 8002c86:	2201      	movs	r2, #1
 8002c88:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c8a:	f7fe fc8f 	bl	80015ac <HAL_GetTick>
 8002c8e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c90:	e008      	b.n	8002ca4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002c92:	f7fe fc8b 	bl	80015ac <HAL_GetTick>
 8002c96:	4602      	mov	r2, r0
 8002c98:	693b      	ldr	r3, [r7, #16]
 8002c9a:	1ad3      	subs	r3, r2, r3
 8002c9c:	2b02      	cmp	r3, #2
 8002c9e:	d901      	bls.n	8002ca4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002ca0:	2303      	movs	r3, #3
 8002ca2:	e1a8      	b.n	8002ff6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ca4:	4b2b      	ldr	r3, [pc, #172]	; (8002d54 <HAL_RCC_OscConfig+0x240>)
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	f003 0302 	and.w	r3, r3, #2
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d0f0      	beq.n	8002c92 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002cb0:	4b28      	ldr	r3, [pc, #160]	; (8002d54 <HAL_RCC_OscConfig+0x240>)
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	691b      	ldr	r3, [r3, #16]
 8002cbc:	00db      	lsls	r3, r3, #3
 8002cbe:	4925      	ldr	r1, [pc, #148]	; (8002d54 <HAL_RCC_OscConfig+0x240>)
 8002cc0:	4313      	orrs	r3, r2
 8002cc2:	600b      	str	r3, [r1, #0]
 8002cc4:	e015      	b.n	8002cf2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002cc6:	4b24      	ldr	r3, [pc, #144]	; (8002d58 <HAL_RCC_OscConfig+0x244>)
 8002cc8:	2200      	movs	r2, #0
 8002cca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ccc:	f7fe fc6e 	bl	80015ac <HAL_GetTick>
 8002cd0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002cd2:	e008      	b.n	8002ce6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002cd4:	f7fe fc6a 	bl	80015ac <HAL_GetTick>
 8002cd8:	4602      	mov	r2, r0
 8002cda:	693b      	ldr	r3, [r7, #16]
 8002cdc:	1ad3      	subs	r3, r2, r3
 8002cde:	2b02      	cmp	r3, #2
 8002ce0:	d901      	bls.n	8002ce6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002ce2:	2303      	movs	r3, #3
 8002ce4:	e187      	b.n	8002ff6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002ce6:	4b1b      	ldr	r3, [pc, #108]	; (8002d54 <HAL_RCC_OscConfig+0x240>)
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	f003 0302 	and.w	r3, r3, #2
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d1f0      	bne.n	8002cd4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	f003 0308 	and.w	r3, r3, #8
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d036      	beq.n	8002d6c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	695b      	ldr	r3, [r3, #20]
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d016      	beq.n	8002d34 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002d06:	4b15      	ldr	r3, [pc, #84]	; (8002d5c <HAL_RCC_OscConfig+0x248>)
 8002d08:	2201      	movs	r2, #1
 8002d0a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d0c:	f7fe fc4e 	bl	80015ac <HAL_GetTick>
 8002d10:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002d12:	e008      	b.n	8002d26 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002d14:	f7fe fc4a 	bl	80015ac <HAL_GetTick>
 8002d18:	4602      	mov	r2, r0
 8002d1a:	693b      	ldr	r3, [r7, #16]
 8002d1c:	1ad3      	subs	r3, r2, r3
 8002d1e:	2b02      	cmp	r3, #2
 8002d20:	d901      	bls.n	8002d26 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002d22:	2303      	movs	r3, #3
 8002d24:	e167      	b.n	8002ff6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002d26:	4b0b      	ldr	r3, [pc, #44]	; (8002d54 <HAL_RCC_OscConfig+0x240>)
 8002d28:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d2a:	f003 0302 	and.w	r3, r3, #2
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d0f0      	beq.n	8002d14 <HAL_RCC_OscConfig+0x200>
 8002d32:	e01b      	b.n	8002d6c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002d34:	4b09      	ldr	r3, [pc, #36]	; (8002d5c <HAL_RCC_OscConfig+0x248>)
 8002d36:	2200      	movs	r2, #0
 8002d38:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d3a:	f7fe fc37 	bl	80015ac <HAL_GetTick>
 8002d3e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002d40:	e00e      	b.n	8002d60 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002d42:	f7fe fc33 	bl	80015ac <HAL_GetTick>
 8002d46:	4602      	mov	r2, r0
 8002d48:	693b      	ldr	r3, [r7, #16]
 8002d4a:	1ad3      	subs	r3, r2, r3
 8002d4c:	2b02      	cmp	r3, #2
 8002d4e:	d907      	bls.n	8002d60 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002d50:	2303      	movs	r3, #3
 8002d52:	e150      	b.n	8002ff6 <HAL_RCC_OscConfig+0x4e2>
 8002d54:	40023800 	.word	0x40023800
 8002d58:	42470000 	.word	0x42470000
 8002d5c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002d60:	4b88      	ldr	r3, [pc, #544]	; (8002f84 <HAL_RCC_OscConfig+0x470>)
 8002d62:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d64:	f003 0302 	and.w	r3, r3, #2
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d1ea      	bne.n	8002d42 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	f003 0304 	and.w	r3, r3, #4
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	f000 8097 	beq.w	8002ea8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002d7a:	2300      	movs	r3, #0
 8002d7c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002d7e:	4b81      	ldr	r3, [pc, #516]	; (8002f84 <HAL_RCC_OscConfig+0x470>)
 8002d80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d10f      	bne.n	8002daa <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002d8a:	2300      	movs	r3, #0
 8002d8c:	60bb      	str	r3, [r7, #8]
 8002d8e:	4b7d      	ldr	r3, [pc, #500]	; (8002f84 <HAL_RCC_OscConfig+0x470>)
 8002d90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d92:	4a7c      	ldr	r2, [pc, #496]	; (8002f84 <HAL_RCC_OscConfig+0x470>)
 8002d94:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d98:	6413      	str	r3, [r2, #64]	; 0x40
 8002d9a:	4b7a      	ldr	r3, [pc, #488]	; (8002f84 <HAL_RCC_OscConfig+0x470>)
 8002d9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002da2:	60bb      	str	r3, [r7, #8]
 8002da4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002da6:	2301      	movs	r3, #1
 8002da8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002daa:	4b77      	ldr	r3, [pc, #476]	; (8002f88 <HAL_RCC_OscConfig+0x474>)
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d118      	bne.n	8002de8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002db6:	4b74      	ldr	r3, [pc, #464]	; (8002f88 <HAL_RCC_OscConfig+0x474>)
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	4a73      	ldr	r2, [pc, #460]	; (8002f88 <HAL_RCC_OscConfig+0x474>)
 8002dbc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002dc0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002dc2:	f7fe fbf3 	bl	80015ac <HAL_GetTick>
 8002dc6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002dc8:	e008      	b.n	8002ddc <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002dca:	f7fe fbef 	bl	80015ac <HAL_GetTick>
 8002dce:	4602      	mov	r2, r0
 8002dd0:	693b      	ldr	r3, [r7, #16]
 8002dd2:	1ad3      	subs	r3, r2, r3
 8002dd4:	2b02      	cmp	r3, #2
 8002dd6:	d901      	bls.n	8002ddc <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002dd8:	2303      	movs	r3, #3
 8002dda:	e10c      	b.n	8002ff6 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ddc:	4b6a      	ldr	r3, [pc, #424]	; (8002f88 <HAL_RCC_OscConfig+0x474>)
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d0f0      	beq.n	8002dca <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	689b      	ldr	r3, [r3, #8]
 8002dec:	2b01      	cmp	r3, #1
 8002dee:	d106      	bne.n	8002dfe <HAL_RCC_OscConfig+0x2ea>
 8002df0:	4b64      	ldr	r3, [pc, #400]	; (8002f84 <HAL_RCC_OscConfig+0x470>)
 8002df2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002df4:	4a63      	ldr	r2, [pc, #396]	; (8002f84 <HAL_RCC_OscConfig+0x470>)
 8002df6:	f043 0301 	orr.w	r3, r3, #1
 8002dfa:	6713      	str	r3, [r2, #112]	; 0x70
 8002dfc:	e01c      	b.n	8002e38 <HAL_RCC_OscConfig+0x324>
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	689b      	ldr	r3, [r3, #8]
 8002e02:	2b05      	cmp	r3, #5
 8002e04:	d10c      	bne.n	8002e20 <HAL_RCC_OscConfig+0x30c>
 8002e06:	4b5f      	ldr	r3, [pc, #380]	; (8002f84 <HAL_RCC_OscConfig+0x470>)
 8002e08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e0a:	4a5e      	ldr	r2, [pc, #376]	; (8002f84 <HAL_RCC_OscConfig+0x470>)
 8002e0c:	f043 0304 	orr.w	r3, r3, #4
 8002e10:	6713      	str	r3, [r2, #112]	; 0x70
 8002e12:	4b5c      	ldr	r3, [pc, #368]	; (8002f84 <HAL_RCC_OscConfig+0x470>)
 8002e14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e16:	4a5b      	ldr	r2, [pc, #364]	; (8002f84 <HAL_RCC_OscConfig+0x470>)
 8002e18:	f043 0301 	orr.w	r3, r3, #1
 8002e1c:	6713      	str	r3, [r2, #112]	; 0x70
 8002e1e:	e00b      	b.n	8002e38 <HAL_RCC_OscConfig+0x324>
 8002e20:	4b58      	ldr	r3, [pc, #352]	; (8002f84 <HAL_RCC_OscConfig+0x470>)
 8002e22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e24:	4a57      	ldr	r2, [pc, #348]	; (8002f84 <HAL_RCC_OscConfig+0x470>)
 8002e26:	f023 0301 	bic.w	r3, r3, #1
 8002e2a:	6713      	str	r3, [r2, #112]	; 0x70
 8002e2c:	4b55      	ldr	r3, [pc, #340]	; (8002f84 <HAL_RCC_OscConfig+0x470>)
 8002e2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e30:	4a54      	ldr	r2, [pc, #336]	; (8002f84 <HAL_RCC_OscConfig+0x470>)
 8002e32:	f023 0304 	bic.w	r3, r3, #4
 8002e36:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	689b      	ldr	r3, [r3, #8]
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d015      	beq.n	8002e6c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e40:	f7fe fbb4 	bl	80015ac <HAL_GetTick>
 8002e44:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e46:	e00a      	b.n	8002e5e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002e48:	f7fe fbb0 	bl	80015ac <HAL_GetTick>
 8002e4c:	4602      	mov	r2, r0
 8002e4e:	693b      	ldr	r3, [r7, #16]
 8002e50:	1ad3      	subs	r3, r2, r3
 8002e52:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e56:	4293      	cmp	r3, r2
 8002e58:	d901      	bls.n	8002e5e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002e5a:	2303      	movs	r3, #3
 8002e5c:	e0cb      	b.n	8002ff6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e5e:	4b49      	ldr	r3, [pc, #292]	; (8002f84 <HAL_RCC_OscConfig+0x470>)
 8002e60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e62:	f003 0302 	and.w	r3, r3, #2
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d0ee      	beq.n	8002e48 <HAL_RCC_OscConfig+0x334>
 8002e6a:	e014      	b.n	8002e96 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e6c:	f7fe fb9e 	bl	80015ac <HAL_GetTick>
 8002e70:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002e72:	e00a      	b.n	8002e8a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002e74:	f7fe fb9a 	bl	80015ac <HAL_GetTick>
 8002e78:	4602      	mov	r2, r0
 8002e7a:	693b      	ldr	r3, [r7, #16]
 8002e7c:	1ad3      	subs	r3, r2, r3
 8002e7e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e82:	4293      	cmp	r3, r2
 8002e84:	d901      	bls.n	8002e8a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002e86:	2303      	movs	r3, #3
 8002e88:	e0b5      	b.n	8002ff6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002e8a:	4b3e      	ldr	r3, [pc, #248]	; (8002f84 <HAL_RCC_OscConfig+0x470>)
 8002e8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e8e:	f003 0302 	and.w	r3, r3, #2
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d1ee      	bne.n	8002e74 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002e96:	7dfb      	ldrb	r3, [r7, #23]
 8002e98:	2b01      	cmp	r3, #1
 8002e9a:	d105      	bne.n	8002ea8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002e9c:	4b39      	ldr	r3, [pc, #228]	; (8002f84 <HAL_RCC_OscConfig+0x470>)
 8002e9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ea0:	4a38      	ldr	r2, [pc, #224]	; (8002f84 <HAL_RCC_OscConfig+0x470>)
 8002ea2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002ea6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	699b      	ldr	r3, [r3, #24]
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	f000 80a1 	beq.w	8002ff4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002eb2:	4b34      	ldr	r3, [pc, #208]	; (8002f84 <HAL_RCC_OscConfig+0x470>)
 8002eb4:	689b      	ldr	r3, [r3, #8]
 8002eb6:	f003 030c 	and.w	r3, r3, #12
 8002eba:	2b08      	cmp	r3, #8
 8002ebc:	d05c      	beq.n	8002f78 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	699b      	ldr	r3, [r3, #24]
 8002ec2:	2b02      	cmp	r3, #2
 8002ec4:	d141      	bne.n	8002f4a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ec6:	4b31      	ldr	r3, [pc, #196]	; (8002f8c <HAL_RCC_OscConfig+0x478>)
 8002ec8:	2200      	movs	r2, #0
 8002eca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ecc:	f7fe fb6e 	bl	80015ac <HAL_GetTick>
 8002ed0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ed2:	e008      	b.n	8002ee6 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002ed4:	f7fe fb6a 	bl	80015ac <HAL_GetTick>
 8002ed8:	4602      	mov	r2, r0
 8002eda:	693b      	ldr	r3, [r7, #16]
 8002edc:	1ad3      	subs	r3, r2, r3
 8002ede:	2b02      	cmp	r3, #2
 8002ee0:	d901      	bls.n	8002ee6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002ee2:	2303      	movs	r3, #3
 8002ee4:	e087      	b.n	8002ff6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ee6:	4b27      	ldr	r3, [pc, #156]	; (8002f84 <HAL_RCC_OscConfig+0x470>)
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d1f0      	bne.n	8002ed4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	69da      	ldr	r2, [r3, #28]
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	6a1b      	ldr	r3, [r3, #32]
 8002efa:	431a      	orrs	r2, r3
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f00:	019b      	lsls	r3, r3, #6
 8002f02:	431a      	orrs	r2, r3
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f08:	085b      	lsrs	r3, r3, #1
 8002f0a:	3b01      	subs	r3, #1
 8002f0c:	041b      	lsls	r3, r3, #16
 8002f0e:	431a      	orrs	r2, r3
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f14:	061b      	lsls	r3, r3, #24
 8002f16:	491b      	ldr	r1, [pc, #108]	; (8002f84 <HAL_RCC_OscConfig+0x470>)
 8002f18:	4313      	orrs	r3, r2
 8002f1a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002f1c:	4b1b      	ldr	r3, [pc, #108]	; (8002f8c <HAL_RCC_OscConfig+0x478>)
 8002f1e:	2201      	movs	r2, #1
 8002f20:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f22:	f7fe fb43 	bl	80015ac <HAL_GetTick>
 8002f26:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f28:	e008      	b.n	8002f3c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002f2a:	f7fe fb3f 	bl	80015ac <HAL_GetTick>
 8002f2e:	4602      	mov	r2, r0
 8002f30:	693b      	ldr	r3, [r7, #16]
 8002f32:	1ad3      	subs	r3, r2, r3
 8002f34:	2b02      	cmp	r3, #2
 8002f36:	d901      	bls.n	8002f3c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002f38:	2303      	movs	r3, #3
 8002f3a:	e05c      	b.n	8002ff6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f3c:	4b11      	ldr	r3, [pc, #68]	; (8002f84 <HAL_RCC_OscConfig+0x470>)
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d0f0      	beq.n	8002f2a <HAL_RCC_OscConfig+0x416>
 8002f48:	e054      	b.n	8002ff4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f4a:	4b10      	ldr	r3, [pc, #64]	; (8002f8c <HAL_RCC_OscConfig+0x478>)
 8002f4c:	2200      	movs	r2, #0
 8002f4e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f50:	f7fe fb2c 	bl	80015ac <HAL_GetTick>
 8002f54:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f56:	e008      	b.n	8002f6a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002f58:	f7fe fb28 	bl	80015ac <HAL_GetTick>
 8002f5c:	4602      	mov	r2, r0
 8002f5e:	693b      	ldr	r3, [r7, #16]
 8002f60:	1ad3      	subs	r3, r2, r3
 8002f62:	2b02      	cmp	r3, #2
 8002f64:	d901      	bls.n	8002f6a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002f66:	2303      	movs	r3, #3
 8002f68:	e045      	b.n	8002ff6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f6a:	4b06      	ldr	r3, [pc, #24]	; (8002f84 <HAL_RCC_OscConfig+0x470>)
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d1f0      	bne.n	8002f58 <HAL_RCC_OscConfig+0x444>
 8002f76:	e03d      	b.n	8002ff4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	699b      	ldr	r3, [r3, #24]
 8002f7c:	2b01      	cmp	r3, #1
 8002f7e:	d107      	bne.n	8002f90 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002f80:	2301      	movs	r3, #1
 8002f82:	e038      	b.n	8002ff6 <HAL_RCC_OscConfig+0x4e2>
 8002f84:	40023800 	.word	0x40023800
 8002f88:	40007000 	.word	0x40007000
 8002f8c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002f90:	4b1b      	ldr	r3, [pc, #108]	; (8003000 <HAL_RCC_OscConfig+0x4ec>)
 8002f92:	685b      	ldr	r3, [r3, #4]
 8002f94:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	699b      	ldr	r3, [r3, #24]
 8002f9a:	2b01      	cmp	r3, #1
 8002f9c:	d028      	beq.n	8002ff0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002fa8:	429a      	cmp	r2, r3
 8002faa:	d121      	bne.n	8002ff0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002fb6:	429a      	cmp	r2, r3
 8002fb8:	d11a      	bne.n	8002ff0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002fba:	68fa      	ldr	r2, [r7, #12]
 8002fbc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002fc0:	4013      	ands	r3, r2
 8002fc2:	687a      	ldr	r2, [r7, #4]
 8002fc4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002fc6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002fc8:	4293      	cmp	r3, r2
 8002fca:	d111      	bne.n	8002ff0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fd6:	085b      	lsrs	r3, r3, #1
 8002fd8:	3b01      	subs	r3, #1
 8002fda:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002fdc:	429a      	cmp	r2, r3
 8002fde:	d107      	bne.n	8002ff0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fea:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002fec:	429a      	cmp	r2, r3
 8002fee:	d001      	beq.n	8002ff4 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002ff0:	2301      	movs	r3, #1
 8002ff2:	e000      	b.n	8002ff6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002ff4:	2300      	movs	r3, #0
}
 8002ff6:	4618      	mov	r0, r3
 8002ff8:	3718      	adds	r7, #24
 8002ffa:	46bd      	mov	sp, r7
 8002ffc:	bd80      	pop	{r7, pc}
 8002ffe:	bf00      	nop
 8003000:	40023800 	.word	0x40023800

08003004 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003004:	b580      	push	{r7, lr}
 8003006:	b084      	sub	sp, #16
 8003008:	af00      	add	r7, sp, #0
 800300a:	6078      	str	r0, [r7, #4]
 800300c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	2b00      	cmp	r3, #0
 8003012:	d101      	bne.n	8003018 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003014:	2301      	movs	r3, #1
 8003016:	e0cc      	b.n	80031b2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003018:	4b68      	ldr	r3, [pc, #416]	; (80031bc <HAL_RCC_ClockConfig+0x1b8>)
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	f003 0307 	and.w	r3, r3, #7
 8003020:	683a      	ldr	r2, [r7, #0]
 8003022:	429a      	cmp	r2, r3
 8003024:	d90c      	bls.n	8003040 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003026:	4b65      	ldr	r3, [pc, #404]	; (80031bc <HAL_RCC_ClockConfig+0x1b8>)
 8003028:	683a      	ldr	r2, [r7, #0]
 800302a:	b2d2      	uxtb	r2, r2
 800302c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800302e:	4b63      	ldr	r3, [pc, #396]	; (80031bc <HAL_RCC_ClockConfig+0x1b8>)
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	f003 0307 	and.w	r3, r3, #7
 8003036:	683a      	ldr	r2, [r7, #0]
 8003038:	429a      	cmp	r2, r3
 800303a:	d001      	beq.n	8003040 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800303c:	2301      	movs	r3, #1
 800303e:	e0b8      	b.n	80031b2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	f003 0302 	and.w	r3, r3, #2
 8003048:	2b00      	cmp	r3, #0
 800304a:	d020      	beq.n	800308e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	f003 0304 	and.w	r3, r3, #4
 8003054:	2b00      	cmp	r3, #0
 8003056:	d005      	beq.n	8003064 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003058:	4b59      	ldr	r3, [pc, #356]	; (80031c0 <HAL_RCC_ClockConfig+0x1bc>)
 800305a:	689b      	ldr	r3, [r3, #8]
 800305c:	4a58      	ldr	r2, [pc, #352]	; (80031c0 <HAL_RCC_ClockConfig+0x1bc>)
 800305e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003062:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	f003 0308 	and.w	r3, r3, #8
 800306c:	2b00      	cmp	r3, #0
 800306e:	d005      	beq.n	800307c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003070:	4b53      	ldr	r3, [pc, #332]	; (80031c0 <HAL_RCC_ClockConfig+0x1bc>)
 8003072:	689b      	ldr	r3, [r3, #8]
 8003074:	4a52      	ldr	r2, [pc, #328]	; (80031c0 <HAL_RCC_ClockConfig+0x1bc>)
 8003076:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800307a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800307c:	4b50      	ldr	r3, [pc, #320]	; (80031c0 <HAL_RCC_ClockConfig+0x1bc>)
 800307e:	689b      	ldr	r3, [r3, #8]
 8003080:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	689b      	ldr	r3, [r3, #8]
 8003088:	494d      	ldr	r1, [pc, #308]	; (80031c0 <HAL_RCC_ClockConfig+0x1bc>)
 800308a:	4313      	orrs	r3, r2
 800308c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	f003 0301 	and.w	r3, r3, #1
 8003096:	2b00      	cmp	r3, #0
 8003098:	d044      	beq.n	8003124 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	685b      	ldr	r3, [r3, #4]
 800309e:	2b01      	cmp	r3, #1
 80030a0:	d107      	bne.n	80030b2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80030a2:	4b47      	ldr	r3, [pc, #284]	; (80031c0 <HAL_RCC_ClockConfig+0x1bc>)
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d119      	bne.n	80030e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80030ae:	2301      	movs	r3, #1
 80030b0:	e07f      	b.n	80031b2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	685b      	ldr	r3, [r3, #4]
 80030b6:	2b02      	cmp	r3, #2
 80030b8:	d003      	beq.n	80030c2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80030be:	2b03      	cmp	r3, #3
 80030c0:	d107      	bne.n	80030d2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80030c2:	4b3f      	ldr	r3, [pc, #252]	; (80031c0 <HAL_RCC_ClockConfig+0x1bc>)
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d109      	bne.n	80030e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80030ce:	2301      	movs	r3, #1
 80030d0:	e06f      	b.n	80031b2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80030d2:	4b3b      	ldr	r3, [pc, #236]	; (80031c0 <HAL_RCC_ClockConfig+0x1bc>)
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	f003 0302 	and.w	r3, r3, #2
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d101      	bne.n	80030e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80030de:	2301      	movs	r3, #1
 80030e0:	e067      	b.n	80031b2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80030e2:	4b37      	ldr	r3, [pc, #220]	; (80031c0 <HAL_RCC_ClockConfig+0x1bc>)
 80030e4:	689b      	ldr	r3, [r3, #8]
 80030e6:	f023 0203 	bic.w	r2, r3, #3
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	685b      	ldr	r3, [r3, #4]
 80030ee:	4934      	ldr	r1, [pc, #208]	; (80031c0 <HAL_RCC_ClockConfig+0x1bc>)
 80030f0:	4313      	orrs	r3, r2
 80030f2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80030f4:	f7fe fa5a 	bl	80015ac <HAL_GetTick>
 80030f8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80030fa:	e00a      	b.n	8003112 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80030fc:	f7fe fa56 	bl	80015ac <HAL_GetTick>
 8003100:	4602      	mov	r2, r0
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	1ad3      	subs	r3, r2, r3
 8003106:	f241 3288 	movw	r2, #5000	; 0x1388
 800310a:	4293      	cmp	r3, r2
 800310c:	d901      	bls.n	8003112 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800310e:	2303      	movs	r3, #3
 8003110:	e04f      	b.n	80031b2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003112:	4b2b      	ldr	r3, [pc, #172]	; (80031c0 <HAL_RCC_ClockConfig+0x1bc>)
 8003114:	689b      	ldr	r3, [r3, #8]
 8003116:	f003 020c 	and.w	r2, r3, #12
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	685b      	ldr	r3, [r3, #4]
 800311e:	009b      	lsls	r3, r3, #2
 8003120:	429a      	cmp	r2, r3
 8003122:	d1eb      	bne.n	80030fc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003124:	4b25      	ldr	r3, [pc, #148]	; (80031bc <HAL_RCC_ClockConfig+0x1b8>)
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	f003 0307 	and.w	r3, r3, #7
 800312c:	683a      	ldr	r2, [r7, #0]
 800312e:	429a      	cmp	r2, r3
 8003130:	d20c      	bcs.n	800314c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003132:	4b22      	ldr	r3, [pc, #136]	; (80031bc <HAL_RCC_ClockConfig+0x1b8>)
 8003134:	683a      	ldr	r2, [r7, #0]
 8003136:	b2d2      	uxtb	r2, r2
 8003138:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800313a:	4b20      	ldr	r3, [pc, #128]	; (80031bc <HAL_RCC_ClockConfig+0x1b8>)
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	f003 0307 	and.w	r3, r3, #7
 8003142:	683a      	ldr	r2, [r7, #0]
 8003144:	429a      	cmp	r2, r3
 8003146:	d001      	beq.n	800314c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003148:	2301      	movs	r3, #1
 800314a:	e032      	b.n	80031b2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	f003 0304 	and.w	r3, r3, #4
 8003154:	2b00      	cmp	r3, #0
 8003156:	d008      	beq.n	800316a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003158:	4b19      	ldr	r3, [pc, #100]	; (80031c0 <HAL_RCC_ClockConfig+0x1bc>)
 800315a:	689b      	ldr	r3, [r3, #8]
 800315c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	68db      	ldr	r3, [r3, #12]
 8003164:	4916      	ldr	r1, [pc, #88]	; (80031c0 <HAL_RCC_ClockConfig+0x1bc>)
 8003166:	4313      	orrs	r3, r2
 8003168:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	f003 0308 	and.w	r3, r3, #8
 8003172:	2b00      	cmp	r3, #0
 8003174:	d009      	beq.n	800318a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003176:	4b12      	ldr	r3, [pc, #72]	; (80031c0 <HAL_RCC_ClockConfig+0x1bc>)
 8003178:	689b      	ldr	r3, [r3, #8]
 800317a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	691b      	ldr	r3, [r3, #16]
 8003182:	00db      	lsls	r3, r3, #3
 8003184:	490e      	ldr	r1, [pc, #56]	; (80031c0 <HAL_RCC_ClockConfig+0x1bc>)
 8003186:	4313      	orrs	r3, r2
 8003188:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800318a:	f000 f821 	bl	80031d0 <HAL_RCC_GetSysClockFreq>
 800318e:	4602      	mov	r2, r0
 8003190:	4b0b      	ldr	r3, [pc, #44]	; (80031c0 <HAL_RCC_ClockConfig+0x1bc>)
 8003192:	689b      	ldr	r3, [r3, #8]
 8003194:	091b      	lsrs	r3, r3, #4
 8003196:	f003 030f 	and.w	r3, r3, #15
 800319a:	490a      	ldr	r1, [pc, #40]	; (80031c4 <HAL_RCC_ClockConfig+0x1c0>)
 800319c:	5ccb      	ldrb	r3, [r1, r3]
 800319e:	fa22 f303 	lsr.w	r3, r2, r3
 80031a2:	4a09      	ldr	r2, [pc, #36]	; (80031c8 <HAL_RCC_ClockConfig+0x1c4>)
 80031a4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80031a6:	4b09      	ldr	r3, [pc, #36]	; (80031cc <HAL_RCC_ClockConfig+0x1c8>)
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	4618      	mov	r0, r3
 80031ac:	f7fe f9ba 	bl	8001524 <HAL_InitTick>

  return HAL_OK;
 80031b0:	2300      	movs	r3, #0
}
 80031b2:	4618      	mov	r0, r3
 80031b4:	3710      	adds	r7, #16
 80031b6:	46bd      	mov	sp, r7
 80031b8:	bd80      	pop	{r7, pc}
 80031ba:	bf00      	nop
 80031bc:	40023c00 	.word	0x40023c00
 80031c0:	40023800 	.word	0x40023800
 80031c4:	08005ab4 	.word	0x08005ab4
 80031c8:	20000000 	.word	0x20000000
 80031cc:	20000004 	.word	0x20000004

080031d0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80031d0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80031d4:	b090      	sub	sp, #64	; 0x40
 80031d6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80031d8:	2300      	movs	r3, #0
 80031da:	637b      	str	r3, [r7, #52]	; 0x34
 80031dc:	2300      	movs	r3, #0
 80031de:	63fb      	str	r3, [r7, #60]	; 0x3c
 80031e0:	2300      	movs	r3, #0
 80031e2:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 80031e4:	2300      	movs	r3, #0
 80031e6:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80031e8:	4b59      	ldr	r3, [pc, #356]	; (8003350 <HAL_RCC_GetSysClockFreq+0x180>)
 80031ea:	689b      	ldr	r3, [r3, #8]
 80031ec:	f003 030c 	and.w	r3, r3, #12
 80031f0:	2b08      	cmp	r3, #8
 80031f2:	d00d      	beq.n	8003210 <HAL_RCC_GetSysClockFreq+0x40>
 80031f4:	2b08      	cmp	r3, #8
 80031f6:	f200 80a1 	bhi.w	800333c <HAL_RCC_GetSysClockFreq+0x16c>
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d002      	beq.n	8003204 <HAL_RCC_GetSysClockFreq+0x34>
 80031fe:	2b04      	cmp	r3, #4
 8003200:	d003      	beq.n	800320a <HAL_RCC_GetSysClockFreq+0x3a>
 8003202:	e09b      	b.n	800333c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003204:	4b53      	ldr	r3, [pc, #332]	; (8003354 <HAL_RCC_GetSysClockFreq+0x184>)
 8003206:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8003208:	e09b      	b.n	8003342 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800320a:	4b53      	ldr	r3, [pc, #332]	; (8003358 <HAL_RCC_GetSysClockFreq+0x188>)
 800320c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800320e:	e098      	b.n	8003342 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003210:	4b4f      	ldr	r3, [pc, #316]	; (8003350 <HAL_RCC_GetSysClockFreq+0x180>)
 8003212:	685b      	ldr	r3, [r3, #4]
 8003214:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003218:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800321a:	4b4d      	ldr	r3, [pc, #308]	; (8003350 <HAL_RCC_GetSysClockFreq+0x180>)
 800321c:	685b      	ldr	r3, [r3, #4]
 800321e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003222:	2b00      	cmp	r3, #0
 8003224:	d028      	beq.n	8003278 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003226:	4b4a      	ldr	r3, [pc, #296]	; (8003350 <HAL_RCC_GetSysClockFreq+0x180>)
 8003228:	685b      	ldr	r3, [r3, #4]
 800322a:	099b      	lsrs	r3, r3, #6
 800322c:	2200      	movs	r2, #0
 800322e:	623b      	str	r3, [r7, #32]
 8003230:	627a      	str	r2, [r7, #36]	; 0x24
 8003232:	6a3b      	ldr	r3, [r7, #32]
 8003234:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003238:	2100      	movs	r1, #0
 800323a:	4b47      	ldr	r3, [pc, #284]	; (8003358 <HAL_RCC_GetSysClockFreq+0x188>)
 800323c:	fb03 f201 	mul.w	r2, r3, r1
 8003240:	2300      	movs	r3, #0
 8003242:	fb00 f303 	mul.w	r3, r0, r3
 8003246:	4413      	add	r3, r2
 8003248:	4a43      	ldr	r2, [pc, #268]	; (8003358 <HAL_RCC_GetSysClockFreq+0x188>)
 800324a:	fba0 1202 	umull	r1, r2, r0, r2
 800324e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003250:	460a      	mov	r2, r1
 8003252:	62ba      	str	r2, [r7, #40]	; 0x28
 8003254:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003256:	4413      	add	r3, r2
 8003258:	62fb      	str	r3, [r7, #44]	; 0x2c
 800325a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800325c:	2200      	movs	r2, #0
 800325e:	61bb      	str	r3, [r7, #24]
 8003260:	61fa      	str	r2, [r7, #28]
 8003262:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003266:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800326a:	f7fd fbd3 	bl	8000a14 <__aeabi_uldivmod>
 800326e:	4602      	mov	r2, r0
 8003270:	460b      	mov	r3, r1
 8003272:	4613      	mov	r3, r2
 8003274:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003276:	e053      	b.n	8003320 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003278:	4b35      	ldr	r3, [pc, #212]	; (8003350 <HAL_RCC_GetSysClockFreq+0x180>)
 800327a:	685b      	ldr	r3, [r3, #4]
 800327c:	099b      	lsrs	r3, r3, #6
 800327e:	2200      	movs	r2, #0
 8003280:	613b      	str	r3, [r7, #16]
 8003282:	617a      	str	r2, [r7, #20]
 8003284:	693b      	ldr	r3, [r7, #16]
 8003286:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800328a:	f04f 0b00 	mov.w	fp, #0
 800328e:	4652      	mov	r2, sl
 8003290:	465b      	mov	r3, fp
 8003292:	f04f 0000 	mov.w	r0, #0
 8003296:	f04f 0100 	mov.w	r1, #0
 800329a:	0159      	lsls	r1, r3, #5
 800329c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80032a0:	0150      	lsls	r0, r2, #5
 80032a2:	4602      	mov	r2, r0
 80032a4:	460b      	mov	r3, r1
 80032a6:	ebb2 080a 	subs.w	r8, r2, sl
 80032aa:	eb63 090b 	sbc.w	r9, r3, fp
 80032ae:	f04f 0200 	mov.w	r2, #0
 80032b2:	f04f 0300 	mov.w	r3, #0
 80032b6:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80032ba:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80032be:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80032c2:	ebb2 0408 	subs.w	r4, r2, r8
 80032c6:	eb63 0509 	sbc.w	r5, r3, r9
 80032ca:	f04f 0200 	mov.w	r2, #0
 80032ce:	f04f 0300 	mov.w	r3, #0
 80032d2:	00eb      	lsls	r3, r5, #3
 80032d4:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80032d8:	00e2      	lsls	r2, r4, #3
 80032da:	4614      	mov	r4, r2
 80032dc:	461d      	mov	r5, r3
 80032de:	eb14 030a 	adds.w	r3, r4, sl
 80032e2:	603b      	str	r3, [r7, #0]
 80032e4:	eb45 030b 	adc.w	r3, r5, fp
 80032e8:	607b      	str	r3, [r7, #4]
 80032ea:	f04f 0200 	mov.w	r2, #0
 80032ee:	f04f 0300 	mov.w	r3, #0
 80032f2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80032f6:	4629      	mov	r1, r5
 80032f8:	028b      	lsls	r3, r1, #10
 80032fa:	4621      	mov	r1, r4
 80032fc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003300:	4621      	mov	r1, r4
 8003302:	028a      	lsls	r2, r1, #10
 8003304:	4610      	mov	r0, r2
 8003306:	4619      	mov	r1, r3
 8003308:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800330a:	2200      	movs	r2, #0
 800330c:	60bb      	str	r3, [r7, #8]
 800330e:	60fa      	str	r2, [r7, #12]
 8003310:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003314:	f7fd fb7e 	bl	8000a14 <__aeabi_uldivmod>
 8003318:	4602      	mov	r2, r0
 800331a:	460b      	mov	r3, r1
 800331c:	4613      	mov	r3, r2
 800331e:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003320:	4b0b      	ldr	r3, [pc, #44]	; (8003350 <HAL_RCC_GetSysClockFreq+0x180>)
 8003322:	685b      	ldr	r3, [r3, #4]
 8003324:	0c1b      	lsrs	r3, r3, #16
 8003326:	f003 0303 	and.w	r3, r3, #3
 800332a:	3301      	adds	r3, #1
 800332c:	005b      	lsls	r3, r3, #1
 800332e:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8003330:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003332:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003334:	fbb2 f3f3 	udiv	r3, r2, r3
 8003338:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800333a:	e002      	b.n	8003342 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800333c:	4b05      	ldr	r3, [pc, #20]	; (8003354 <HAL_RCC_GetSysClockFreq+0x184>)
 800333e:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003340:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003342:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8003344:	4618      	mov	r0, r3
 8003346:	3740      	adds	r7, #64	; 0x40
 8003348:	46bd      	mov	sp, r7
 800334a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800334e:	bf00      	nop
 8003350:	40023800 	.word	0x40023800
 8003354:	00f42400 	.word	0x00f42400
 8003358:	017d7840 	.word	0x017d7840

0800335c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800335c:	b480      	push	{r7}
 800335e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003360:	4b03      	ldr	r3, [pc, #12]	; (8003370 <HAL_RCC_GetHCLKFreq+0x14>)
 8003362:	681b      	ldr	r3, [r3, #0]
}
 8003364:	4618      	mov	r0, r3
 8003366:	46bd      	mov	sp, r7
 8003368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800336c:	4770      	bx	lr
 800336e:	bf00      	nop
 8003370:	20000000 	.word	0x20000000

08003374 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003374:	b580      	push	{r7, lr}
 8003376:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003378:	f7ff fff0 	bl	800335c <HAL_RCC_GetHCLKFreq>
 800337c:	4602      	mov	r2, r0
 800337e:	4b05      	ldr	r3, [pc, #20]	; (8003394 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003380:	689b      	ldr	r3, [r3, #8]
 8003382:	0a9b      	lsrs	r3, r3, #10
 8003384:	f003 0307 	and.w	r3, r3, #7
 8003388:	4903      	ldr	r1, [pc, #12]	; (8003398 <HAL_RCC_GetPCLK1Freq+0x24>)
 800338a:	5ccb      	ldrb	r3, [r1, r3]
 800338c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003390:	4618      	mov	r0, r3
 8003392:	bd80      	pop	{r7, pc}
 8003394:	40023800 	.word	0x40023800
 8003398:	08005ac4 	.word	0x08005ac4

0800339c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800339c:	b580      	push	{r7, lr}
 800339e:	b082      	sub	sp, #8
 80033a0:	af00      	add	r7, sp, #0
 80033a2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d101      	bne.n	80033ae <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80033aa:	2301      	movs	r3, #1
 80033ac:	e07b      	b.n	80034a6 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d108      	bne.n	80033c8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	685b      	ldr	r3, [r3, #4]
 80033ba:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80033be:	d009      	beq.n	80033d4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	2200      	movs	r2, #0
 80033c4:	61da      	str	r2, [r3, #28]
 80033c6:	e005      	b.n	80033d4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	2200      	movs	r2, #0
 80033cc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	2200      	movs	r2, #0
 80033d2:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	2200      	movs	r2, #0
 80033d8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80033e0:	b2db      	uxtb	r3, r3
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d106      	bne.n	80033f4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	2200      	movs	r2, #0
 80033ea:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80033ee:	6878      	ldr	r0, [r7, #4]
 80033f0:	f7fd ff78 	bl	80012e4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	2202      	movs	r2, #2
 80033f8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	681a      	ldr	r2, [r3, #0]
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800340a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	685b      	ldr	r3, [r3, #4]
 8003410:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	689b      	ldr	r3, [r3, #8]
 8003418:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800341c:	431a      	orrs	r2, r3
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	68db      	ldr	r3, [r3, #12]
 8003422:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003426:	431a      	orrs	r2, r3
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	691b      	ldr	r3, [r3, #16]
 800342c:	f003 0302 	and.w	r3, r3, #2
 8003430:	431a      	orrs	r2, r3
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	695b      	ldr	r3, [r3, #20]
 8003436:	f003 0301 	and.w	r3, r3, #1
 800343a:	431a      	orrs	r2, r3
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	699b      	ldr	r3, [r3, #24]
 8003440:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003444:	431a      	orrs	r2, r3
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	69db      	ldr	r3, [r3, #28]
 800344a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800344e:	431a      	orrs	r2, r3
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	6a1b      	ldr	r3, [r3, #32]
 8003454:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003458:	ea42 0103 	orr.w	r1, r2, r3
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003460:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	430a      	orrs	r2, r1
 800346a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	699b      	ldr	r3, [r3, #24]
 8003470:	0c1b      	lsrs	r3, r3, #16
 8003472:	f003 0104 	and.w	r1, r3, #4
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800347a:	f003 0210 	and.w	r2, r3, #16
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	430a      	orrs	r2, r1
 8003484:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	69da      	ldr	r2, [r3, #28]
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003494:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	2200      	movs	r2, #0
 800349a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	2201      	movs	r2, #1
 80034a0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80034a4:	2300      	movs	r3, #0
}
 80034a6:	4618      	mov	r0, r3
 80034a8:	3708      	adds	r7, #8
 80034aa:	46bd      	mov	sp, r7
 80034ac:	bd80      	pop	{r7, pc}

080034ae <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80034ae:	b580      	push	{r7, lr}
 80034b0:	b088      	sub	sp, #32
 80034b2:	af00      	add	r7, sp, #0
 80034b4:	60f8      	str	r0, [r7, #12]
 80034b6:	60b9      	str	r1, [r7, #8]
 80034b8:	603b      	str	r3, [r7, #0]
 80034ba:	4613      	mov	r3, r2
 80034bc:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80034be:	2300      	movs	r3, #0
 80034c0:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80034c8:	2b01      	cmp	r3, #1
 80034ca:	d101      	bne.n	80034d0 <HAL_SPI_Transmit+0x22>
 80034cc:	2302      	movs	r3, #2
 80034ce:	e126      	b.n	800371e <HAL_SPI_Transmit+0x270>
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	2201      	movs	r2, #1
 80034d4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80034d8:	f7fe f868 	bl	80015ac <HAL_GetTick>
 80034dc:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80034de:	88fb      	ldrh	r3, [r7, #6]
 80034e0:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80034e8:	b2db      	uxtb	r3, r3
 80034ea:	2b01      	cmp	r3, #1
 80034ec:	d002      	beq.n	80034f4 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80034ee:	2302      	movs	r3, #2
 80034f0:	77fb      	strb	r3, [r7, #31]
    goto error;
 80034f2:	e10b      	b.n	800370c <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 80034f4:	68bb      	ldr	r3, [r7, #8]
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d002      	beq.n	8003500 <HAL_SPI_Transmit+0x52>
 80034fa:	88fb      	ldrh	r3, [r7, #6]
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d102      	bne.n	8003506 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8003500:	2301      	movs	r3, #1
 8003502:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003504:	e102      	b.n	800370c <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	2203      	movs	r2, #3
 800350a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	2200      	movs	r2, #0
 8003512:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	68ba      	ldr	r2, [r7, #8]
 8003518:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	88fa      	ldrh	r2, [r7, #6]
 800351e:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	88fa      	ldrh	r2, [r7, #6]
 8003524:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	2200      	movs	r2, #0
 800352a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	2200      	movs	r2, #0
 8003530:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	2200      	movs	r2, #0
 8003536:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	2200      	movs	r2, #0
 800353c:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	2200      	movs	r2, #0
 8003542:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	689b      	ldr	r3, [r3, #8]
 8003548:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800354c:	d10f      	bne.n	800356e <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	681a      	ldr	r2, [r3, #0]
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800355c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	681a      	ldr	r2, [r3, #0]
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800356c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003578:	2b40      	cmp	r3, #64	; 0x40
 800357a:	d007      	beq.n	800358c <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	681a      	ldr	r2, [r3, #0]
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800358a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	68db      	ldr	r3, [r3, #12]
 8003590:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003594:	d14b      	bne.n	800362e <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	685b      	ldr	r3, [r3, #4]
 800359a:	2b00      	cmp	r3, #0
 800359c:	d002      	beq.n	80035a4 <HAL_SPI_Transmit+0xf6>
 800359e:	8afb      	ldrh	r3, [r7, #22]
 80035a0:	2b01      	cmp	r3, #1
 80035a2:	d13e      	bne.n	8003622 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035a8:	881a      	ldrh	r2, [r3, #0]
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035b4:	1c9a      	adds	r2, r3, #2
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80035be:	b29b      	uxth	r3, r3
 80035c0:	3b01      	subs	r3, #1
 80035c2:	b29a      	uxth	r2, r3
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80035c8:	e02b      	b.n	8003622 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	689b      	ldr	r3, [r3, #8]
 80035d0:	f003 0302 	and.w	r3, r3, #2
 80035d4:	2b02      	cmp	r3, #2
 80035d6:	d112      	bne.n	80035fe <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035dc:	881a      	ldrh	r2, [r3, #0]
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035e8:	1c9a      	adds	r2, r3, #2
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80035f2:	b29b      	uxth	r3, r3
 80035f4:	3b01      	subs	r3, #1
 80035f6:	b29a      	uxth	r2, r3
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	86da      	strh	r2, [r3, #54]	; 0x36
 80035fc:	e011      	b.n	8003622 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80035fe:	f7fd ffd5 	bl	80015ac <HAL_GetTick>
 8003602:	4602      	mov	r2, r0
 8003604:	69bb      	ldr	r3, [r7, #24]
 8003606:	1ad3      	subs	r3, r2, r3
 8003608:	683a      	ldr	r2, [r7, #0]
 800360a:	429a      	cmp	r2, r3
 800360c:	d803      	bhi.n	8003616 <HAL_SPI_Transmit+0x168>
 800360e:	683b      	ldr	r3, [r7, #0]
 8003610:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003614:	d102      	bne.n	800361c <HAL_SPI_Transmit+0x16e>
 8003616:	683b      	ldr	r3, [r7, #0]
 8003618:	2b00      	cmp	r3, #0
 800361a:	d102      	bne.n	8003622 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 800361c:	2303      	movs	r3, #3
 800361e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003620:	e074      	b.n	800370c <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003626:	b29b      	uxth	r3, r3
 8003628:	2b00      	cmp	r3, #0
 800362a:	d1ce      	bne.n	80035ca <HAL_SPI_Transmit+0x11c>
 800362c:	e04c      	b.n	80036c8 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	685b      	ldr	r3, [r3, #4]
 8003632:	2b00      	cmp	r3, #0
 8003634:	d002      	beq.n	800363c <HAL_SPI_Transmit+0x18e>
 8003636:	8afb      	ldrh	r3, [r7, #22]
 8003638:	2b01      	cmp	r3, #1
 800363a:	d140      	bne.n	80036be <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	330c      	adds	r3, #12
 8003646:	7812      	ldrb	r2, [r2, #0]
 8003648:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800364e:	1c5a      	adds	r2, r3, #1
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003658:	b29b      	uxth	r3, r3
 800365a:	3b01      	subs	r3, #1
 800365c:	b29a      	uxth	r2, r3
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8003662:	e02c      	b.n	80036be <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	689b      	ldr	r3, [r3, #8]
 800366a:	f003 0302 	and.w	r3, r3, #2
 800366e:	2b02      	cmp	r3, #2
 8003670:	d113      	bne.n	800369a <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	330c      	adds	r3, #12
 800367c:	7812      	ldrb	r2, [r2, #0]
 800367e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003684:	1c5a      	adds	r2, r3, #1
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800368e:	b29b      	uxth	r3, r3
 8003690:	3b01      	subs	r3, #1
 8003692:	b29a      	uxth	r2, r3
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	86da      	strh	r2, [r3, #54]	; 0x36
 8003698:	e011      	b.n	80036be <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800369a:	f7fd ff87 	bl	80015ac <HAL_GetTick>
 800369e:	4602      	mov	r2, r0
 80036a0:	69bb      	ldr	r3, [r7, #24]
 80036a2:	1ad3      	subs	r3, r2, r3
 80036a4:	683a      	ldr	r2, [r7, #0]
 80036a6:	429a      	cmp	r2, r3
 80036a8:	d803      	bhi.n	80036b2 <HAL_SPI_Transmit+0x204>
 80036aa:	683b      	ldr	r3, [r7, #0]
 80036ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036b0:	d102      	bne.n	80036b8 <HAL_SPI_Transmit+0x20a>
 80036b2:	683b      	ldr	r3, [r7, #0]
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d102      	bne.n	80036be <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 80036b8:	2303      	movs	r3, #3
 80036ba:	77fb      	strb	r3, [r7, #31]
          goto error;
 80036bc:	e026      	b.n	800370c <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80036c2:	b29b      	uxth	r3, r3
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d1cd      	bne.n	8003664 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80036c8:	69ba      	ldr	r2, [r7, #24]
 80036ca:	6839      	ldr	r1, [r7, #0]
 80036cc:	68f8      	ldr	r0, [r7, #12]
 80036ce:	f000 fa55 	bl	8003b7c <SPI_EndRxTxTransaction>
 80036d2:	4603      	mov	r3, r0
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d002      	beq.n	80036de <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	2220      	movs	r2, #32
 80036dc:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	689b      	ldr	r3, [r3, #8]
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d10a      	bne.n	80036fc <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80036e6:	2300      	movs	r3, #0
 80036e8:	613b      	str	r3, [r7, #16]
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	68db      	ldr	r3, [r3, #12]
 80036f0:	613b      	str	r3, [r7, #16]
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	689b      	ldr	r3, [r3, #8]
 80036f8:	613b      	str	r3, [r7, #16]
 80036fa:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003700:	2b00      	cmp	r3, #0
 8003702:	d002      	beq.n	800370a <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8003704:	2301      	movs	r3, #1
 8003706:	77fb      	strb	r3, [r7, #31]
 8003708:	e000      	b.n	800370c <HAL_SPI_Transmit+0x25e>
  }

error:
 800370a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	2201      	movs	r2, #1
 8003710:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	2200      	movs	r2, #0
 8003718:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800371c:	7ffb      	ldrb	r3, [r7, #31]
}
 800371e:	4618      	mov	r0, r3
 8003720:	3720      	adds	r7, #32
 8003722:	46bd      	mov	sp, r7
 8003724:	bd80      	pop	{r7, pc}

08003726 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003726:	b580      	push	{r7, lr}
 8003728:	b08c      	sub	sp, #48	; 0x30
 800372a:	af00      	add	r7, sp, #0
 800372c:	60f8      	str	r0, [r7, #12]
 800372e:	60b9      	str	r1, [r7, #8]
 8003730:	607a      	str	r2, [r7, #4]
 8003732:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003734:	2301      	movs	r3, #1
 8003736:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003738:	2300      	movs	r3, #0
 800373a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003744:	2b01      	cmp	r3, #1
 8003746:	d101      	bne.n	800374c <HAL_SPI_TransmitReceive+0x26>
 8003748:	2302      	movs	r3, #2
 800374a:	e18a      	b.n	8003a62 <HAL_SPI_TransmitReceive+0x33c>
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	2201      	movs	r2, #1
 8003750:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003754:	f7fd ff2a 	bl	80015ac <HAL_GetTick>
 8003758:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003760:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	685b      	ldr	r3, [r3, #4]
 8003768:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800376a:	887b      	ldrh	r3, [r7, #2]
 800376c:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800376e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003772:	2b01      	cmp	r3, #1
 8003774:	d00f      	beq.n	8003796 <HAL_SPI_TransmitReceive+0x70>
 8003776:	69fb      	ldr	r3, [r7, #28]
 8003778:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800377c:	d107      	bne.n	800378e <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	689b      	ldr	r3, [r3, #8]
 8003782:	2b00      	cmp	r3, #0
 8003784:	d103      	bne.n	800378e <HAL_SPI_TransmitReceive+0x68>
 8003786:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800378a:	2b04      	cmp	r3, #4
 800378c:	d003      	beq.n	8003796 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800378e:	2302      	movs	r3, #2
 8003790:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003794:	e15b      	b.n	8003a4e <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003796:	68bb      	ldr	r3, [r7, #8]
 8003798:	2b00      	cmp	r3, #0
 800379a:	d005      	beq.n	80037a8 <HAL_SPI_TransmitReceive+0x82>
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d002      	beq.n	80037a8 <HAL_SPI_TransmitReceive+0x82>
 80037a2:	887b      	ldrh	r3, [r7, #2]
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d103      	bne.n	80037b0 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80037a8:	2301      	movs	r3, #1
 80037aa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80037ae:	e14e      	b.n	8003a4e <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80037b6:	b2db      	uxtb	r3, r3
 80037b8:	2b04      	cmp	r3, #4
 80037ba:	d003      	beq.n	80037c4 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	2205      	movs	r2, #5
 80037c0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	2200      	movs	r2, #0
 80037c8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	687a      	ldr	r2, [r7, #4]
 80037ce:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	887a      	ldrh	r2, [r7, #2]
 80037d4:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	887a      	ldrh	r2, [r7, #2]
 80037da:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	68ba      	ldr	r2, [r7, #8]
 80037e0:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	887a      	ldrh	r2, [r7, #2]
 80037e6:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	887a      	ldrh	r2, [r7, #2]
 80037ec:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	2200      	movs	r2, #0
 80037f2:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	2200      	movs	r2, #0
 80037f8:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003804:	2b40      	cmp	r3, #64	; 0x40
 8003806:	d007      	beq.n	8003818 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	681a      	ldr	r2, [r3, #0]
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003816:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	68db      	ldr	r3, [r3, #12]
 800381c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003820:	d178      	bne.n	8003914 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	685b      	ldr	r3, [r3, #4]
 8003826:	2b00      	cmp	r3, #0
 8003828:	d002      	beq.n	8003830 <HAL_SPI_TransmitReceive+0x10a>
 800382a:	8b7b      	ldrh	r3, [r7, #26]
 800382c:	2b01      	cmp	r3, #1
 800382e:	d166      	bne.n	80038fe <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003834:	881a      	ldrh	r2, [r3, #0]
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003840:	1c9a      	adds	r2, r3, #2
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800384a:	b29b      	uxth	r3, r3
 800384c:	3b01      	subs	r3, #1
 800384e:	b29a      	uxth	r2, r3
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003854:	e053      	b.n	80038fe <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	689b      	ldr	r3, [r3, #8]
 800385c:	f003 0302 	and.w	r3, r3, #2
 8003860:	2b02      	cmp	r3, #2
 8003862:	d11b      	bne.n	800389c <HAL_SPI_TransmitReceive+0x176>
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003868:	b29b      	uxth	r3, r3
 800386a:	2b00      	cmp	r3, #0
 800386c:	d016      	beq.n	800389c <HAL_SPI_TransmitReceive+0x176>
 800386e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003870:	2b01      	cmp	r3, #1
 8003872:	d113      	bne.n	800389c <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003878:	881a      	ldrh	r2, [r3, #0]
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003884:	1c9a      	adds	r2, r3, #2
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800388e:	b29b      	uxth	r3, r3
 8003890:	3b01      	subs	r3, #1
 8003892:	b29a      	uxth	r2, r3
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003898:	2300      	movs	r3, #0
 800389a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	689b      	ldr	r3, [r3, #8]
 80038a2:	f003 0301 	and.w	r3, r3, #1
 80038a6:	2b01      	cmp	r3, #1
 80038a8:	d119      	bne.n	80038de <HAL_SPI_TransmitReceive+0x1b8>
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80038ae:	b29b      	uxth	r3, r3
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d014      	beq.n	80038de <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	68da      	ldr	r2, [r3, #12]
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038be:	b292      	uxth	r2, r2
 80038c0:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038c6:	1c9a      	adds	r2, r3, #2
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80038d0:	b29b      	uxth	r3, r3
 80038d2:	3b01      	subs	r3, #1
 80038d4:	b29a      	uxth	r2, r3
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80038da:	2301      	movs	r3, #1
 80038dc:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80038de:	f7fd fe65 	bl	80015ac <HAL_GetTick>
 80038e2:	4602      	mov	r2, r0
 80038e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038e6:	1ad3      	subs	r3, r2, r3
 80038e8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80038ea:	429a      	cmp	r2, r3
 80038ec:	d807      	bhi.n	80038fe <HAL_SPI_TransmitReceive+0x1d8>
 80038ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80038f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038f4:	d003      	beq.n	80038fe <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 80038f6:	2303      	movs	r3, #3
 80038f8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80038fc:	e0a7      	b.n	8003a4e <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003902:	b29b      	uxth	r3, r3
 8003904:	2b00      	cmp	r3, #0
 8003906:	d1a6      	bne.n	8003856 <HAL_SPI_TransmitReceive+0x130>
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800390c:	b29b      	uxth	r3, r3
 800390e:	2b00      	cmp	r3, #0
 8003910:	d1a1      	bne.n	8003856 <HAL_SPI_TransmitReceive+0x130>
 8003912:	e07c      	b.n	8003a0e <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	685b      	ldr	r3, [r3, #4]
 8003918:	2b00      	cmp	r3, #0
 800391a:	d002      	beq.n	8003922 <HAL_SPI_TransmitReceive+0x1fc>
 800391c:	8b7b      	ldrh	r3, [r7, #26]
 800391e:	2b01      	cmp	r3, #1
 8003920:	d16b      	bne.n	80039fa <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	330c      	adds	r3, #12
 800392c:	7812      	ldrb	r2, [r2, #0]
 800392e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003934:	1c5a      	adds	r2, r3, #1
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800393e:	b29b      	uxth	r3, r3
 8003940:	3b01      	subs	r3, #1
 8003942:	b29a      	uxth	r2, r3
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003948:	e057      	b.n	80039fa <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	689b      	ldr	r3, [r3, #8]
 8003950:	f003 0302 	and.w	r3, r3, #2
 8003954:	2b02      	cmp	r3, #2
 8003956:	d11c      	bne.n	8003992 <HAL_SPI_TransmitReceive+0x26c>
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800395c:	b29b      	uxth	r3, r3
 800395e:	2b00      	cmp	r3, #0
 8003960:	d017      	beq.n	8003992 <HAL_SPI_TransmitReceive+0x26c>
 8003962:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003964:	2b01      	cmp	r3, #1
 8003966:	d114      	bne.n	8003992 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	330c      	adds	r3, #12
 8003972:	7812      	ldrb	r2, [r2, #0]
 8003974:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800397a:	1c5a      	adds	r2, r3, #1
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003984:	b29b      	uxth	r3, r3
 8003986:	3b01      	subs	r3, #1
 8003988:	b29a      	uxth	r2, r3
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800398e:	2300      	movs	r3, #0
 8003990:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	689b      	ldr	r3, [r3, #8]
 8003998:	f003 0301 	and.w	r3, r3, #1
 800399c:	2b01      	cmp	r3, #1
 800399e:	d119      	bne.n	80039d4 <HAL_SPI_TransmitReceive+0x2ae>
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80039a4:	b29b      	uxth	r3, r3
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d014      	beq.n	80039d4 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	68da      	ldr	r2, [r3, #12]
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039b4:	b2d2      	uxtb	r2, r2
 80039b6:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039bc:	1c5a      	adds	r2, r3, #1
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80039c6:	b29b      	uxth	r3, r3
 80039c8:	3b01      	subs	r3, #1
 80039ca:	b29a      	uxth	r2, r3
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80039d0:	2301      	movs	r3, #1
 80039d2:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80039d4:	f7fd fdea 	bl	80015ac <HAL_GetTick>
 80039d8:	4602      	mov	r2, r0
 80039da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039dc:	1ad3      	subs	r3, r2, r3
 80039de:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80039e0:	429a      	cmp	r2, r3
 80039e2:	d803      	bhi.n	80039ec <HAL_SPI_TransmitReceive+0x2c6>
 80039e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039ea:	d102      	bne.n	80039f2 <HAL_SPI_TransmitReceive+0x2cc>
 80039ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d103      	bne.n	80039fa <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 80039f2:	2303      	movs	r3, #3
 80039f4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80039f8:	e029      	b.n	8003a4e <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80039fe:	b29b      	uxth	r3, r3
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d1a2      	bne.n	800394a <HAL_SPI_TransmitReceive+0x224>
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003a08:	b29b      	uxth	r3, r3
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d19d      	bne.n	800394a <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003a0e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a10:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003a12:	68f8      	ldr	r0, [r7, #12]
 8003a14:	f000 f8b2 	bl	8003b7c <SPI_EndRxTxTransaction>
 8003a18:	4603      	mov	r3, r0
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d006      	beq.n	8003a2c <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8003a1e:	2301      	movs	r3, #1
 8003a20:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	2220      	movs	r2, #32
 8003a28:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8003a2a:	e010      	b.n	8003a4e <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	689b      	ldr	r3, [r3, #8]
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d10b      	bne.n	8003a4c <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003a34:	2300      	movs	r3, #0
 8003a36:	617b      	str	r3, [r7, #20]
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	68db      	ldr	r3, [r3, #12]
 8003a3e:	617b      	str	r3, [r7, #20]
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	689b      	ldr	r3, [r3, #8]
 8003a46:	617b      	str	r3, [r7, #20]
 8003a48:	697b      	ldr	r3, [r7, #20]
 8003a4a:	e000      	b.n	8003a4e <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8003a4c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	2201      	movs	r2, #1
 8003a52:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	2200      	movs	r2, #0
 8003a5a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003a5e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8003a62:	4618      	mov	r0, r3
 8003a64:	3730      	adds	r7, #48	; 0x30
 8003a66:	46bd      	mov	sp, r7
 8003a68:	bd80      	pop	{r7, pc}
	...

08003a6c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003a6c:	b580      	push	{r7, lr}
 8003a6e:	b088      	sub	sp, #32
 8003a70:	af00      	add	r7, sp, #0
 8003a72:	60f8      	str	r0, [r7, #12]
 8003a74:	60b9      	str	r1, [r7, #8]
 8003a76:	603b      	str	r3, [r7, #0]
 8003a78:	4613      	mov	r3, r2
 8003a7a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003a7c:	f7fd fd96 	bl	80015ac <HAL_GetTick>
 8003a80:	4602      	mov	r2, r0
 8003a82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a84:	1a9b      	subs	r3, r3, r2
 8003a86:	683a      	ldr	r2, [r7, #0]
 8003a88:	4413      	add	r3, r2
 8003a8a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003a8c:	f7fd fd8e 	bl	80015ac <HAL_GetTick>
 8003a90:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003a92:	4b39      	ldr	r3, [pc, #228]	; (8003b78 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	015b      	lsls	r3, r3, #5
 8003a98:	0d1b      	lsrs	r3, r3, #20
 8003a9a:	69fa      	ldr	r2, [r7, #28]
 8003a9c:	fb02 f303 	mul.w	r3, r2, r3
 8003aa0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003aa2:	e054      	b.n	8003b4e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003aa4:	683b      	ldr	r3, [r7, #0]
 8003aa6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003aaa:	d050      	beq.n	8003b4e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003aac:	f7fd fd7e 	bl	80015ac <HAL_GetTick>
 8003ab0:	4602      	mov	r2, r0
 8003ab2:	69bb      	ldr	r3, [r7, #24]
 8003ab4:	1ad3      	subs	r3, r2, r3
 8003ab6:	69fa      	ldr	r2, [r7, #28]
 8003ab8:	429a      	cmp	r2, r3
 8003aba:	d902      	bls.n	8003ac2 <SPI_WaitFlagStateUntilTimeout+0x56>
 8003abc:	69fb      	ldr	r3, [r7, #28]
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d13d      	bne.n	8003b3e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	685a      	ldr	r2, [r3, #4]
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003ad0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	685b      	ldr	r3, [r3, #4]
 8003ad6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003ada:	d111      	bne.n	8003b00 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	689b      	ldr	r3, [r3, #8]
 8003ae0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003ae4:	d004      	beq.n	8003af0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	689b      	ldr	r3, [r3, #8]
 8003aea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003aee:	d107      	bne.n	8003b00 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	681a      	ldr	r2, [r3, #0]
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003afe:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b04:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003b08:	d10f      	bne.n	8003b2a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	681a      	ldr	r2, [r3, #0]
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003b18:	601a      	str	r2, [r3, #0]
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	681a      	ldr	r2, [r3, #0]
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003b28:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	2201      	movs	r2, #1
 8003b2e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	2200      	movs	r2, #0
 8003b36:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8003b3a:	2303      	movs	r3, #3
 8003b3c:	e017      	b.n	8003b6e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003b3e:	697b      	ldr	r3, [r7, #20]
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d101      	bne.n	8003b48 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003b44:	2300      	movs	r3, #0
 8003b46:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003b48:	697b      	ldr	r3, [r7, #20]
 8003b4a:	3b01      	subs	r3, #1
 8003b4c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	689a      	ldr	r2, [r3, #8]
 8003b54:	68bb      	ldr	r3, [r7, #8]
 8003b56:	4013      	ands	r3, r2
 8003b58:	68ba      	ldr	r2, [r7, #8]
 8003b5a:	429a      	cmp	r2, r3
 8003b5c:	bf0c      	ite	eq
 8003b5e:	2301      	moveq	r3, #1
 8003b60:	2300      	movne	r3, #0
 8003b62:	b2db      	uxtb	r3, r3
 8003b64:	461a      	mov	r2, r3
 8003b66:	79fb      	ldrb	r3, [r7, #7]
 8003b68:	429a      	cmp	r2, r3
 8003b6a:	d19b      	bne.n	8003aa4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003b6c:	2300      	movs	r3, #0
}
 8003b6e:	4618      	mov	r0, r3
 8003b70:	3720      	adds	r7, #32
 8003b72:	46bd      	mov	sp, r7
 8003b74:	bd80      	pop	{r7, pc}
 8003b76:	bf00      	nop
 8003b78:	20000000 	.word	0x20000000

08003b7c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003b7c:	b580      	push	{r7, lr}
 8003b7e:	b088      	sub	sp, #32
 8003b80:	af02      	add	r7, sp, #8
 8003b82:	60f8      	str	r0, [r7, #12]
 8003b84:	60b9      	str	r1, [r7, #8]
 8003b86:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8003b88:	4b1b      	ldr	r3, [pc, #108]	; (8003bf8 <SPI_EndRxTxTransaction+0x7c>)
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	4a1b      	ldr	r2, [pc, #108]	; (8003bfc <SPI_EndRxTxTransaction+0x80>)
 8003b8e:	fba2 2303 	umull	r2, r3, r2, r3
 8003b92:	0d5b      	lsrs	r3, r3, #21
 8003b94:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003b98:	fb02 f303 	mul.w	r3, r2, r3
 8003b9c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	685b      	ldr	r3, [r3, #4]
 8003ba2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003ba6:	d112      	bne.n	8003bce <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	9300      	str	r3, [sp, #0]
 8003bac:	68bb      	ldr	r3, [r7, #8]
 8003bae:	2200      	movs	r2, #0
 8003bb0:	2180      	movs	r1, #128	; 0x80
 8003bb2:	68f8      	ldr	r0, [r7, #12]
 8003bb4:	f7ff ff5a 	bl	8003a6c <SPI_WaitFlagStateUntilTimeout>
 8003bb8:	4603      	mov	r3, r0
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d016      	beq.n	8003bec <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003bc2:	f043 0220 	orr.w	r2, r3, #32
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8003bca:	2303      	movs	r3, #3
 8003bcc:	e00f      	b.n	8003bee <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8003bce:	697b      	ldr	r3, [r7, #20]
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d00a      	beq.n	8003bea <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8003bd4:	697b      	ldr	r3, [r7, #20]
 8003bd6:	3b01      	subs	r3, #1
 8003bd8:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	689b      	ldr	r3, [r3, #8]
 8003be0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003be4:	2b80      	cmp	r3, #128	; 0x80
 8003be6:	d0f2      	beq.n	8003bce <SPI_EndRxTxTransaction+0x52>
 8003be8:	e000      	b.n	8003bec <SPI_EndRxTxTransaction+0x70>
        break;
 8003bea:	bf00      	nop
  }

  return HAL_OK;
 8003bec:	2300      	movs	r3, #0
}
 8003bee:	4618      	mov	r0, r3
 8003bf0:	3718      	adds	r7, #24
 8003bf2:	46bd      	mov	sp, r7
 8003bf4:	bd80      	pop	{r7, pc}
 8003bf6:	bf00      	nop
 8003bf8:	20000000 	.word	0x20000000
 8003bfc:	165e9f81 	.word	0x165e9f81

08003c00 <verify>:
float ath_tem;
float ath_hum;


extern I2C_ATH10_Stat verify()
{
 8003c00:	b580      	push	{r7, lr}
 8003c02:	b084      	sub	sp, #16
 8003c04:	af02      	add	r7, sp, #8
	I2C_ATH10_Stat estat_ret;
	estat_ret =	HAL_I2C_Master_Transmit(&I2C_P2, I2C_AD_SEND, C_mesure, 1, Set_time_mes);
 8003c06:	2301      	movs	r3, #1
 8003c08:	9300      	str	r3, [sp, #0]
 8003c0a:	2301      	movs	r3, #1
 8003c0c:	4a0a      	ldr	r2, [pc, #40]	; (8003c38 <verify+0x38>)
 8003c0e:	2170      	movs	r1, #112	; 0x70
 8003c10:	480a      	ldr	r0, [pc, #40]	; (8003c3c <verify+0x3c>)
 8003c12:	f7fe f92d 	bl	8001e70 <HAL_I2C_Master_Transmit>
 8003c16:	4603      	mov	r3, r0
 8003c18:	71fb      	strb	r3, [r7, #7]
	estat_ret= (~(estat_ret))&0x01;
 8003c1a:	79fb      	ldrb	r3, [r7, #7]
 8003c1c:	f003 0301 	and.w	r3, r3, #1
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	bf0c      	ite	eq
 8003c24:	2301      	moveq	r3, #1
 8003c26:	2300      	movne	r3, #0
 8003c28:	b2db      	uxtb	r3, r3
 8003c2a:	71fb      	strb	r3, [r7, #7]
	return estat_ret;
 8003c2c:	79fb      	ldrb	r3, [r7, #7]
}
 8003c2e:	4618      	mov	r0, r3
 8003c30:	3708      	adds	r7, #8
 8003c32:	46bd      	mov	sp, r7
 8003c34:	bd80      	pop	{r7, pc}
 8003c36:	bf00      	nop
 8003c38:	2000000c 	.word	0x2000000c
 8003c3c:	2000086c 	.word	0x2000086c

08003c40 <Raw_value>:


static void Raw_value(uint32_t *temp,uint32_t *humed)
{
 8003c40:	b580      	push	{r7, lr}
 8003c42:	b086      	sub	sp, #24
 8003c44:	af02      	add	r7, sp, #8
 8003c46:	6078      	str	r0, [r7, #4]
 8003c48:	6039      	str	r1, [r7, #0]
	uint32_t bit_temp=0,bit_hum=0;
 8003c4a:	2300      	movs	r3, #0
 8003c4c:	60fb      	str	r3, [r7, #12]
 8003c4e:	2300      	movs	r3, #0
 8003c50:	60bb      	str	r3, [r7, #8]
	HAL_I2C_Master_Transmit(&I2C_P2, I2C_AD_SEND, C_mesure, Size_get_mes, Set_time_mes);
 8003c52:	2301      	movs	r3, #1
 8003c54:	9300      	str	r3, [sp, #0]
 8003c56:	2301      	movs	r3, #1
 8003c58:	4a19      	ldr	r2, [pc, #100]	; (8003cc0 <Raw_value+0x80>)
 8003c5a:	2170      	movs	r1, #112	; 0x70
 8003c5c:	4819      	ldr	r0, [pc, #100]	; (8003cc4 <Raw_value+0x84>)
 8003c5e:	f7fe f907 	bl	8001e70 <HAL_I2C_Master_Transmit>
	HAL_Delay(Set_time_mes);
 8003c62:	2001      	movs	r0, #1
 8003c64:	f7fd fcae 	bl	80015c4 <HAL_Delay>
	HAL_I2C_Master_Receive(&I2C_P2, I2C_AD_SEND, Get_mesure, Get_size_dat, Set_time_mes);
 8003c68:	2301      	movs	r3, #1
 8003c6a:	9300      	str	r3, [sp, #0]
 8003c6c:	2306      	movs	r3, #6
 8003c6e:	4a16      	ldr	r2, [pc, #88]	; (8003cc8 <Raw_value+0x88>)
 8003c70:	2170      	movs	r1, #112	; 0x70
 8003c72:	4814      	ldr	r0, [pc, #80]	; (8003cc4 <Raw_value+0x84>)
 8003c74:	f7fe f9fa 	bl	800206c <HAL_I2C_Master_Receive>
	bit_hum=Get_mesure[1]<<12 |Get_mesure[2]<<4 | ((Get_mesure[3]& 0xF0)>>4);
 8003c78:	4b13      	ldr	r3, [pc, #76]	; (8003cc8 <Raw_value+0x88>)
 8003c7a:	785b      	ldrb	r3, [r3, #1]
 8003c7c:	031a      	lsls	r2, r3, #12
 8003c7e:	4b12      	ldr	r3, [pc, #72]	; (8003cc8 <Raw_value+0x88>)
 8003c80:	789b      	ldrb	r3, [r3, #2]
 8003c82:	011b      	lsls	r3, r3, #4
 8003c84:	4313      	orrs	r3, r2
 8003c86:	4a10      	ldr	r2, [pc, #64]	; (8003cc8 <Raw_value+0x88>)
 8003c88:	78d2      	ldrb	r2, [r2, #3]
 8003c8a:	0912      	lsrs	r2, r2, #4
 8003c8c:	b2d2      	uxtb	r2, r2
 8003c8e:	4313      	orrs	r3, r2
 8003c90:	60bb      	str	r3, [r7, #8]
	bit_temp= (Get_mesure[3]&0x0F)<<16 | Get_mesure[4]<<8| Get_mesure[5];
 8003c92:	4b0d      	ldr	r3, [pc, #52]	; (8003cc8 <Raw_value+0x88>)
 8003c94:	78db      	ldrb	r3, [r3, #3]
 8003c96:	041b      	lsls	r3, r3, #16
 8003c98:	f403 2270 	and.w	r2, r3, #983040	; 0xf0000
 8003c9c:	4b0a      	ldr	r3, [pc, #40]	; (8003cc8 <Raw_value+0x88>)
 8003c9e:	791b      	ldrb	r3, [r3, #4]
 8003ca0:	021b      	lsls	r3, r3, #8
 8003ca2:	4313      	orrs	r3, r2
 8003ca4:	4a08      	ldr	r2, [pc, #32]	; (8003cc8 <Raw_value+0x88>)
 8003ca6:	7952      	ldrb	r2, [r2, #5]
 8003ca8:	4313      	orrs	r3, r2
 8003caa:	60fb      	str	r3, [r7, #12]
	*temp=bit_temp;
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	68fa      	ldr	r2, [r7, #12]
 8003cb0:	601a      	str	r2, [r3, #0]
	*humed=bit_hum;
 8003cb2:	683b      	ldr	r3, [r7, #0]
 8003cb4:	68ba      	ldr	r2, [r7, #8]
 8003cb6:	601a      	str	r2, [r3, #0]
}
 8003cb8:	bf00      	nop
 8003cba:	3710      	adds	r7, #16
 8003cbc:	46bd      	mov	sp, r7
 8003cbe:	bd80      	pop	{r7, pc}
 8003cc0:	2000000c 	.word	0x2000000c
 8003cc4:	2000086c 	.word	0x2000086c
 8003cc8:	200008c0 	.word	0x200008c0

08003ccc <Get_t_h>:

extern void Get_t_h(float *t,float *h)
{
 8003ccc:	b580      	push	{r7, lr}
 8003cce:	b084      	sub	sp, #16
 8003cd0:	af00      	add	r7, sp, #0
 8003cd2:	6078      	str	r0, [r7, #4]
 8003cd4:	6039      	str	r1, [r7, #0]

	uint32_t temp,humed;
	Raw_value(&temp, &humed);
 8003cd6:	f107 0208 	add.w	r2, r7, #8
 8003cda:	f107 030c 	add.w	r3, r7, #12
 8003cde:	4611      	mov	r1, r2
 8003ce0:	4618      	mov	r0, r3
 8003ce2:	f7ff ffad 	bl	8003c40 <Raw_value>
	ath_tem	=((temp/1048576.0)*200.0)-50;
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	4618      	mov	r0, r3
 8003cea:	f7fc fbb7 	bl	800045c <__aeabi_ui2d>
 8003cee:	f04f 0200 	mov.w	r2, #0
 8003cf2:	4b22      	ldr	r3, [pc, #136]	; (8003d7c <Get_t_h+0xb0>)
 8003cf4:	f7fc fd56 	bl	80007a4 <__aeabi_ddiv>
 8003cf8:	4602      	mov	r2, r0
 8003cfa:	460b      	mov	r3, r1
 8003cfc:	4610      	mov	r0, r2
 8003cfe:	4619      	mov	r1, r3
 8003d00:	f04f 0200 	mov.w	r2, #0
 8003d04:	4b1e      	ldr	r3, [pc, #120]	; (8003d80 <Get_t_h+0xb4>)
 8003d06:	f7fc fc23 	bl	8000550 <__aeabi_dmul>
 8003d0a:	4602      	mov	r2, r0
 8003d0c:	460b      	mov	r3, r1
 8003d0e:	4610      	mov	r0, r2
 8003d10:	4619      	mov	r1, r3
 8003d12:	f04f 0200 	mov.w	r2, #0
 8003d16:	4b1b      	ldr	r3, [pc, #108]	; (8003d84 <Get_t_h+0xb8>)
 8003d18:	f7fc fa62 	bl	80001e0 <__aeabi_dsub>
 8003d1c:	4602      	mov	r2, r0
 8003d1e:	460b      	mov	r3, r1
 8003d20:	4610      	mov	r0, r2
 8003d22:	4619      	mov	r1, r3
 8003d24:	f7fc fe26 	bl	8000974 <__aeabi_d2f>
 8003d28:	4603      	mov	r3, r0
 8003d2a:	4a17      	ldr	r2, [pc, #92]	; (8003d88 <Get_t_h+0xbc>)
 8003d2c:	6013      	str	r3, [r2, #0]
	ath_hum =(humed/1048576.0)*100;
 8003d2e:	68bb      	ldr	r3, [r7, #8]
 8003d30:	4618      	mov	r0, r3
 8003d32:	f7fc fb93 	bl	800045c <__aeabi_ui2d>
 8003d36:	f04f 0200 	mov.w	r2, #0
 8003d3a:	4b10      	ldr	r3, [pc, #64]	; (8003d7c <Get_t_h+0xb0>)
 8003d3c:	f7fc fd32 	bl	80007a4 <__aeabi_ddiv>
 8003d40:	4602      	mov	r2, r0
 8003d42:	460b      	mov	r3, r1
 8003d44:	4610      	mov	r0, r2
 8003d46:	4619      	mov	r1, r3
 8003d48:	f04f 0200 	mov.w	r2, #0
 8003d4c:	4b0f      	ldr	r3, [pc, #60]	; (8003d8c <Get_t_h+0xc0>)
 8003d4e:	f7fc fbff 	bl	8000550 <__aeabi_dmul>
 8003d52:	4602      	mov	r2, r0
 8003d54:	460b      	mov	r3, r1
 8003d56:	4610      	mov	r0, r2
 8003d58:	4619      	mov	r1, r3
 8003d5a:	f7fc fe0b 	bl	8000974 <__aeabi_d2f>
 8003d5e:	4603      	mov	r3, r0
 8003d60:	4a0b      	ldr	r2, [pc, #44]	; (8003d90 <Get_t_h+0xc4>)
 8003d62:	6013      	str	r3, [r2, #0]
	*t=ath_tem;
 8003d64:	4b08      	ldr	r3, [pc, #32]	; (8003d88 <Get_t_h+0xbc>)
 8003d66:	681a      	ldr	r2, [r3, #0]
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	601a      	str	r2, [r3, #0]
	*h=ath_hum;
 8003d6c:	4b08      	ldr	r3, [pc, #32]	; (8003d90 <Get_t_h+0xc4>)
 8003d6e:	681a      	ldr	r2, [r3, #0]
 8003d70:	683b      	ldr	r3, [r7, #0]
 8003d72:	601a      	str	r2, [r3, #0]

}
 8003d74:	bf00      	nop
 8003d76:	3710      	adds	r7, #16
 8003d78:	46bd      	mov	sp, r7
 8003d7a:	bd80      	pop	{r7, pc}
 8003d7c:	41300000 	.word	0x41300000
 8003d80:	40690000 	.word	0x40690000
 8003d84:	40490000 	.word	0x40490000
 8003d88:	200008c8 	.word	0x200008c8
 8003d8c:	40590000 	.word	0x40590000
 8003d90:	200008cc 	.word	0x200008cc

08003d94 <calculate_size32>:
}



extern uint16_t calculate_size32(uint16_t size)
{
 8003d94:	b480      	push	{r7}
 8003d96:	b085      	sub	sp, #20
 8003d98:	af00      	add	r7, sp, #0
 8003d9a:	4603      	mov	r3, r0
 8003d9c:	80fb      	strh	r3, [r7, #6]
	uint16_t calculate_size32=0;
 8003d9e:	2300      	movs	r3, #0
 8003da0:	81fb      	strh	r3, [r7, #14]
	calculate_size32++; // by default increment in one
 8003da2:	89fb      	ldrh	r3, [r7, #14]
 8003da4:	3301      	adds	r3, #1
 8003da6:	81fb      	strh	r3, [r7, #14]
	if(4 <= size )
 8003da8:	88fb      	ldrh	r3, [r7, #6]
 8003daa:	2b03      	cmp	r3, #3
 8003dac:	d90e      	bls.n	8003dcc <calculate_size32+0x38>
	{
		size-=4;
 8003dae:	88fb      	ldrh	r3, [r7, #6]
 8003db0:	3b04      	subs	r3, #4
 8003db2:	80fb      	strh	r3, [r7, #6]
		calculate_size32 += size/3;
 8003db4:	88fb      	ldrh	r3, [r7, #6]
 8003db6:	4a09      	ldr	r2, [pc, #36]	; (8003ddc <calculate_size32+0x48>)
 8003db8:	fba2 2303 	umull	r2, r3, r2, r3
 8003dbc:	085b      	lsrs	r3, r3, #1
 8003dbe:	b29a      	uxth	r2, r3
 8003dc0:	89fb      	ldrh	r3, [r7, #14]
 8003dc2:	4413      	add	r3, r2
 8003dc4:	81fb      	strh	r3, [r7, #14]
		calculate_size32++; //increment in one because if is exact divisible in 3 need add the crc
 8003dc6:	89fb      	ldrh	r3, [r7, #14]
 8003dc8:	3301      	adds	r3, #1
 8003dca:	81fb      	strh	r3, [r7, #14]
	}

	return calculate_size32;
 8003dcc:	89fb      	ldrh	r3, [r7, #14]
}
 8003dce:	4618      	mov	r0, r3
 8003dd0:	3714      	adds	r7, #20
 8003dd2:	46bd      	mov	sp, r7
 8003dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd8:	4770      	bx	lr
 8003dda:	bf00      	nop
 8003ddc:	aaaaaaab 	.word	0xaaaaaaab

08003de0 <build_uint32_compare_crc>:

extern void build_uint32_compare_crc(uint16_t size, uint32_t *build_data, uint8_t *data_in)
{
 8003de0:	b480      	push	{r7}
 8003de2:	b087      	sub	sp, #28
 8003de4:	af00      	add	r7, sp, #0
 8003de6:	4603      	mov	r3, r0
 8003de8:	60b9      	str	r1, [r7, #8]
 8003dea:	607a      	str	r2, [r7, #4]
 8003dec:	81fb      	strh	r3, [r7, #14]
	uint8_t size_build = ((size)>4)?4:size;
 8003dee:	89fb      	ldrh	r3, [r7, #14]
 8003df0:	2b04      	cmp	r3, #4
 8003df2:	bf28      	it	cs
 8003df4:	2304      	movcs	r3, #4
 8003df6:	b29b      	uxth	r3, r3
 8003df8:	757b      	strb	r3, [r7, #21]
	uint8_t counter,position_in=0;
 8003dfa:	2300      	movs	r3, #0
 8003dfc:	75bb      	strb	r3, [r7, #22]
	for (counter = size_build ; counter > 0; counter--)
 8003dfe:	7d7b      	ldrb	r3, [r7, #21]
 8003e00:	75fb      	strb	r3, [r7, #23]
 8003e02:	e014      	b.n	8003e2e <build_uint32_compare_crc+0x4e>
	{
		*(build_data) |= *(data_in + position_in) << ((counter-1)*8);
 8003e04:	68bb      	ldr	r3, [r7, #8]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	7dba      	ldrb	r2, [r7, #22]
 8003e0a:	6879      	ldr	r1, [r7, #4]
 8003e0c:	440a      	add	r2, r1
 8003e0e:	7812      	ldrb	r2, [r2, #0]
 8003e10:	4611      	mov	r1, r2
 8003e12:	7dfa      	ldrb	r2, [r7, #23]
 8003e14:	3a01      	subs	r2, #1
 8003e16:	00d2      	lsls	r2, r2, #3
 8003e18:	fa01 f202 	lsl.w	r2, r1, r2
 8003e1c:	431a      	orrs	r2, r3
 8003e1e:	68bb      	ldr	r3, [r7, #8]
 8003e20:	601a      	str	r2, [r3, #0]
		position_in++;
 8003e22:	7dbb      	ldrb	r3, [r7, #22]
 8003e24:	3301      	adds	r3, #1
 8003e26:	75bb      	strb	r3, [r7, #22]
	for (counter = size_build ; counter > 0; counter--)
 8003e28:	7dfb      	ldrb	r3, [r7, #23]
 8003e2a:	3b01      	subs	r3, #1
 8003e2c:	75fb      	strb	r3, [r7, #23]
 8003e2e:	7dfb      	ldrb	r3, [r7, #23]
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d1e7      	bne.n	8003e04 <build_uint32_compare_crc+0x24>
	}

}
 8003e34:	bf00      	nop
 8003e36:	bf00      	nop
 8003e38:	371c      	adds	r7, #28
 8003e3a:	46bd      	mov	sp, r7
 8003e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e40:	4770      	bx	lr
	...

08003e44 <buld_32>:
extern void Set_False_flag_value(void)
{
	flag_lastval=False;
}
extern uint16_t buld_32(uint32_t *data, uint8_t *byte_int,uint16_t *index, uint16_t size)
{
 8003e44:	b480      	push	{r7}
 8003e46:	b087      	sub	sp, #28
 8003e48:	af00      	add	r7, sp, #0
 8003e4a:	60f8      	str	r0, [r7, #12]
 8003e4c:	60b9      	str	r1, [r7, #8]
 8003e4e:	607a      	str	r2, [r7, #4]
 8003e50:	807b      	strh	r3, [r7, #2]
	uint8_t last_crc = (uint8_t)(data[0] & 0xFF);
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	74fb      	strb	r3, [r7, #19]
	int8_t size_index = 0;
 8003e58:	2300      	movs	r3, #0
 8003e5a:	75fb      	strb	r3, [r7, #23]
	uint8_t space_crc = False;
 8003e5c:	2300      	movs	r3, #0
 8003e5e:	75bb      	strb	r3, [r7, #22]
	int8_t index_value;
	uint8_t bits_stored;
	data[0]= 0;
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	2200      	movs	r2, #0
 8003e64:	601a      	str	r2, [r3, #0]

	if( ((size -1 ) - *index) >= 3)
 8003e66:	887b      	ldrh	r3, [r7, #2]
 8003e68:	3b01      	subs	r3, #1
 8003e6a:	687a      	ldr	r2, [r7, #4]
 8003e6c:	8812      	ldrh	r2, [r2, #0]
 8003e6e:	1a9b      	subs	r3, r3, r2
 8003e70:	2b02      	cmp	r3, #2
 8003e72:	dd02      	ble.n	8003e7a <buld_32+0x36>
	{
		size_index = 3;
 8003e74:	2303      	movs	r3, #3
 8003e76:	75fb      	strb	r3, [r7, #23]
 8003e78:	e019      	b.n	8003eae <buld_32+0x6a>
	}
	else
	{
		size_index += (size -1 ) -(*index-1);
 8003e7a:	887b      	ldrh	r3, [r7, #2]
 8003e7c:	b2da      	uxtb	r2, r3
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	881b      	ldrh	r3, [r3, #0]
 8003e82:	b2db      	uxtb	r3, r3
 8003e84:	1ad3      	subs	r3, r2, r3
 8003e86:	b2da      	uxtb	r2, r3
 8003e88:	7dfb      	ldrb	r3, [r7, #23]
 8003e8a:	4413      	add	r3, r2
 8003e8c:	b2db      	uxtb	r3, r3
 8003e8e:	75fb      	strb	r3, [r7, #23]


		if(size_index >= 3)
 8003e90:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003e94:	2b02      	cmp	r3, #2
 8003e96:	dc01      	bgt.n	8003e9c <buld_32+0x58>
		{
			// no is available the size
		}
		else
		{
			space_crc = True;
 8003e98:	2301      	movs	r3, #1
 8003e9a:	75bb      	strb	r3, [r7, #22]
		}
		if(flag_lastval == True)
 8003e9c:	4b32      	ldr	r3, [pc, #200]	; (8003f68 <buld_32+0x124>)
 8003e9e:	781b      	ldrb	r3, [r3, #0]
 8003ea0:	2b01      	cmp	r3, #1
 8003ea2:	d104      	bne.n	8003eae <buld_32+0x6a>
		{
			size_index=0;
 8003ea4:	2300      	movs	r3, #0
 8003ea6:	75fb      	strb	r3, [r7, #23]
			flag_lastval=False;
 8003ea8:	4b2f      	ldr	r3, [pc, #188]	; (8003f68 <buld_32+0x124>)
 8003eaa:	2200      	movs	r2, #0
 8003eac:	701a      	strb	r2, [r3, #0]
		}
	}
	bits_stored = ( (size_index + 1)  * 8);
 8003eae:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003eb2:	3301      	adds	r3, #1
 8003eb4:	b2db      	uxtb	r3, r3
 8003eb6:	00db      	lsls	r3, r3, #3
 8003eb8:	753b      	strb	r3, [r7, #20]
	data[0] = last_crc << (size_index * 8);
 8003eba:	7cfa      	ldrb	r2, [r7, #19]
 8003ebc:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003ec0:	00db      	lsls	r3, r3, #3
 8003ec2:	fa02 f303 	lsl.w	r3, r2, r3
 8003ec6:	461a      	mov	r2, r3
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	601a      	str	r2, [r3, #0]
	size_index-- ;
 8003ecc:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003ed0:	b2db      	uxtb	r3, r3
 8003ed2:	3b01      	subs	r3, #1
 8003ed4:	b2db      	uxtb	r3, r3
 8003ed6:	75fb      	strb	r3, [r7, #23]

	for (index_value = size_index; index_value >= 0; index_value--)
 8003ed8:	7dfb      	ldrb	r3, [r7, #23]
 8003eda:	757b      	strb	r3, [r7, #21]
 8003edc:	e01c      	b.n	8003f18 <buld_32+0xd4>
	{
		data[0] |= byte_int[*index] << (index_value*8 );
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	687a      	ldr	r2, [r7, #4]
 8003ee4:	8812      	ldrh	r2, [r2, #0]
 8003ee6:	4611      	mov	r1, r2
 8003ee8:	68ba      	ldr	r2, [r7, #8]
 8003eea:	440a      	add	r2, r1
 8003eec:	7812      	ldrb	r2, [r2, #0]
 8003eee:	4611      	mov	r1, r2
 8003ef0:	f997 2015 	ldrsb.w	r2, [r7, #21]
 8003ef4:	00d2      	lsls	r2, r2, #3
 8003ef6:	fa01 f202 	lsl.w	r2, r1, r2
 8003efa:	431a      	orrs	r2, r3
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	601a      	str	r2, [r3, #0]
		(*index)++;
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	881b      	ldrh	r3, [r3, #0]
 8003f04:	3301      	adds	r3, #1
 8003f06:	b29a      	uxth	r2, r3
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	801a      	strh	r2, [r3, #0]
	for (index_value = size_index; index_value >= 0; index_value--)
 8003f0c:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8003f10:	b2db      	uxtb	r3, r3
 8003f12:	3b01      	subs	r3, #1
 8003f14:	b2db      	uxtb	r3, r3
 8003f16:	757b      	strb	r3, [r7, #21]
 8003f18:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	dade      	bge.n	8003ede <buld_32+0x9a>
	}
	if(space_crc == True)
 8003f20:	7dbb      	ldrb	r3, [r7, #22]
 8003f22:	2b01      	cmp	r3, #1
 8003f24:	d107      	bne.n	8003f36 <buld_32+0xf2>
	{
		data[0]= data[0]<< 7;
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	01da      	lsls	r2, r3, #7
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	601a      	str	r2, [r3, #0]
		bits_stored += 7;
 8003f30:	7d3b      	ldrb	r3, [r7, #20]
 8003f32:	3307      	adds	r3, #7
 8003f34:	753b      	strb	r3, [r7, #20]
	}
	if( byte_int[(*index)-1] == byte_int[size -1])
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	881b      	ldrh	r3, [r3, #0]
 8003f3a:	3b01      	subs	r3, #1
 8003f3c:	68ba      	ldr	r2, [r7, #8]
 8003f3e:	4413      	add	r3, r2
 8003f40:	781a      	ldrb	r2, [r3, #0]
 8003f42:	887b      	ldrh	r3, [r7, #2]
 8003f44:	3b01      	subs	r3, #1
 8003f46:	68b9      	ldr	r1, [r7, #8]
 8003f48:	440b      	add	r3, r1
 8003f4a:	781b      	ldrb	r3, [r3, #0]
 8003f4c:	429a      	cmp	r2, r3
 8003f4e:	d102      	bne.n	8003f56 <buld_32+0x112>
	{
		flag_lastval=True;
 8003f50:	4b05      	ldr	r3, [pc, #20]	; (8003f68 <buld_32+0x124>)
 8003f52:	2201      	movs	r2, #1
 8003f54:	701a      	strb	r2, [r3, #0]
	}
	return bits_stored;
 8003f56:	7d3b      	ldrb	r3, [r7, #20]
 8003f58:	b29b      	uxth	r3, r3
}
 8003f5a:	4618      	mov	r0, r3
 8003f5c:	371c      	adds	r7, #28
 8003f5e:	46bd      	mov	sp, r7
 8003f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f64:	4770      	bx	lr
 8003f66:	bf00      	nop
 8003f68:	200008d4 	.word	0x200008d4

08003f6c <get_crc>:


extern uint8_t get_crc(uint8_t *Data, uint16_t size)
{
 8003f6c:	b580      	push	{r7, lr}
 8003f6e:	b088      	sub	sp, #32
 8003f70:	af00      	add	r7, sp, #0
 8003f72:	6078      	str	r0, [r7, #4]
 8003f74:	460b      	mov	r3, r1
 8003f76:	807b      	strh	r3, [r7, #2]
	uint32_t use_process_crc[]={0,0};
 8003f78:	2300      	movs	r3, #0
 8003f7a:	60fb      	str	r3, [r7, #12]
 8003f7c:	2300      	movs	r3, #0
 8003f7e:	613b      	str	r3, [r7, #16]
	uint32_t polinom = (uint32_t)(CRC7_value);
 8003f80:	2389      	movs	r3, #137	; 0x89
 8003f82:	617b      	str	r3, [r7, #20]
	uint32_t initialind;
	uint16_t index_pos_in=0;
 8003f84:	2300      	movs	r3, #0
 8003f86:	817b      	strh	r3, [r7, #10]
	uint16_t total_value_32 =  calculate_size32(size);
 8003f88:	887b      	ldrh	r3, [r7, #2]
 8003f8a:	4618      	mov	r0, r3
 8003f8c:	f7ff ff02 	bl	8003d94 <calculate_size32>
 8003f90:	4603      	mov	r3, r0
 8003f92:	837b      	strh	r3, [r7, #26]

	uint8_t finalize =False;
 8003f94:	2300      	movs	r3, #0
 8003f96:	767b      	strb	r3, [r7, #25]

	build_uint32_compare_crc( size, use_process_crc, Data);
 8003f98:	f107 010c 	add.w	r1, r7, #12
 8003f9c:	887b      	ldrh	r3, [r7, #2]
 8003f9e:	687a      	ldr	r2, [r7, #4]
 8003fa0:	4618      	mov	r0, r3
 8003fa2:	f7ff ff1d 	bl	8003de0 <build_uint32_compare_crc>

	initialind = (size*8)+ CRC_LAST_SZ;
 8003fa6:	887b      	ldrh	r3, [r7, #2]
 8003fa8:	00db      	lsls	r3, r3, #3
 8003faa:	3307      	adds	r3, #7
 8003fac:	61fb      	str	r3, [r7, #28]
	if( initialind <= 31 )
 8003fae:	69fb      	ldr	r3, [r7, #28]
 8003fb0:	2b1f      	cmp	r3, #31
 8003fb2:	d805      	bhi.n	8003fc0 <get_crc+0x54>
	{
		use_process_crc[0]=use_process_crc[0] << CRC_LAST_SZ;
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	01db      	lsls	r3, r3, #7
 8003fb8:	60fb      	str	r3, [r7, #12]
		index_pos_in =size;
 8003fba:	887b      	ldrh	r3, [r7, #2]
 8003fbc:	817b      	strh	r3, [r7, #10]
 8003fbe:	e066      	b.n	800408e <get_crc+0x122>
	}
	else
	{
		initialind=32;
 8003fc0:	2320      	movs	r3, #32
 8003fc2:	61fb      	str	r3, [r7, #28]
		index_pos_in +=4;
 8003fc4:	897b      	ldrh	r3, [r7, #10]
 8003fc6:	3304      	adds	r3, #4
 8003fc8:	b29b      	uxth	r3, r3
 8003fca:	817b      	strh	r3, [r7, #10]
	}
	while(False == finalize)
 8003fcc:	e05f      	b.n	800408e <get_crc+0x122>
	{
		for (initialind; initialind > (CRC_LAST_SZ -2); initialind--)
		{

			if( (total_value_32  > 1) & (initialind==CRC_LAST_SZ) )
 8003fce:	8b7b      	ldrh	r3, [r7, #26]
 8003fd0:	2b01      	cmp	r3, #1
 8003fd2:	bf8c      	ite	hi
 8003fd4:	2301      	movhi	r3, #1
 8003fd6:	2300      	movls	r3, #0
 8003fd8:	b2da      	uxtb	r2, r3
 8003fda:	69fb      	ldr	r3, [r7, #28]
 8003fdc:	2b07      	cmp	r3, #7
 8003fde:	bf0c      	ite	eq
 8003fe0:	2301      	moveq	r3, #1
 8003fe2:	2300      	movne	r3, #0
 8003fe4:	b2db      	uxtb	r3, r3
 8003fe6:	4013      	ands	r3, r2
 8003fe8:	b2db      	uxtb	r3, r3
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d00d      	beq.n	800400a <get_crc+0x9e>
			{
				initialind = buld_32(use_process_crc,Data,&index_pos_in,size);
 8003fee:	887b      	ldrh	r3, [r7, #2]
 8003ff0:	f107 020a 	add.w	r2, r7, #10
 8003ff4:	f107 000c 	add.w	r0, r7, #12
 8003ff8:	6879      	ldr	r1, [r7, #4]
 8003ffa:	f7ff ff23 	bl	8003e44 <buld_32>
 8003ffe:	4603      	mov	r3, r0
 8004000:	61fb      	str	r3, [r7, #28]
				total_value_32--;
 8004002:	8b7b      	ldrh	r3, [r7, #26]
 8004004:	3b01      	subs	r3, #1
 8004006:	837b      	strh	r3, [r7, #26]
 8004008:	e034      	b.n	8004074 <get_crc+0x108>

			}
				/*process the  crc and the xor process*/
			else if( ( ((use_process_crc[0]) & (1<< initialind)) != 0)  & (initialind > CRC_LAST_SZ-1) )
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	2101      	movs	r1, #1
 800400e:	69fa      	ldr	r2, [r7, #28]
 8004010:	fa01 f202 	lsl.w	r2, r1, r2
 8004014:	4013      	ands	r3, r2
 8004016:	2b00      	cmp	r3, #0
 8004018:	bf14      	ite	ne
 800401a:	2301      	movne	r3, #1
 800401c:	2300      	moveq	r3, #0
 800401e:	b2da      	uxtb	r2, r3
 8004020:	69fb      	ldr	r3, [r7, #28]
 8004022:	2b06      	cmp	r3, #6
 8004024:	bf8c      	ite	hi
 8004026:	2301      	movhi	r3, #1
 8004028:	2300      	movls	r3, #0
 800402a:	b2db      	uxtb	r3, r3
 800402c:	4013      	ands	r3, r2
 800402e:	b2db      	uxtb	r3, r3
 8004030:	2b00      	cmp	r3, #0
 8004032:	d008      	beq.n	8004046 <get_crc+0xda>
			{
				use_process_crc[0] = (use_process_crc[0] ^ (polinom << (initialind - 7)) ) ;
 8004034:	68fa      	ldr	r2, [r7, #12]
 8004036:	69fb      	ldr	r3, [r7, #28]
 8004038:	3b07      	subs	r3, #7
 800403a:	6979      	ldr	r1, [r7, #20]
 800403c:	fa01 f303 	lsl.w	r3, r1, r3
 8004040:	4053      	eors	r3, r2
 8004042:	60fb      	str	r3, [r7, #12]
 8004044:	e016      	b.n	8004074 <get_crc+0x108>

			}
			else if ( (initialind <= CRC_LAST_SZ) & (total_value_32 <= 1) )
 8004046:	69fb      	ldr	r3, [r7, #28]
 8004048:	2b07      	cmp	r3, #7
 800404a:	bf94      	ite	ls
 800404c:	2301      	movls	r3, #1
 800404e:	2300      	movhi	r3, #0
 8004050:	b2da      	uxtb	r2, r3
 8004052:	8b7b      	ldrh	r3, [r7, #26]
 8004054:	2b01      	cmp	r3, #1
 8004056:	bf94      	ite	ls
 8004058:	2301      	movls	r3, #1
 800405a:	2300      	movhi	r3, #0
 800405c:	b2db      	uxtb	r3, r3
 800405e:	4013      	ands	r3, r2
 8004060:	b2db      	uxtb	r3, r3
 8004062:	2b00      	cmp	r3, #0
 8004064:	d006      	beq.n	8004074 <get_crc+0x108>
			{
				finalize = True;
 8004066:	2301      	movs	r3, #1
 8004068:	767b      	strb	r3, [r7, #25]
				initialind = CRC_LAST_SZ -2;
 800406a:	2305      	movs	r3, #5
 800406c:	61fb      	str	r3, [r7, #28]
				flag_lastval = False;
 800406e:	4b0c      	ldr	r3, [pc, #48]	; (80040a0 <get_crc+0x134>)
 8004070:	2200      	movs	r2, #0
 8004072:	701a      	strb	r2, [r3, #0]

			}

			if( initialind == ((bits_crc*2 ) -1) )
 8004074:	69fb      	ldr	r3, [r7, #28]
 8004076:	2b0f      	cmp	r3, #15
 8004078:	d103      	bne.n	8004082 <get_crc+0x116>
			{
				save_last_crc = use_process_crc[0];
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	461a      	mov	r2, r3
 800407e:	4b09      	ldr	r3, [pc, #36]	; (80040a4 <get_crc+0x138>)
 8004080:	601a      	str	r2, [r3, #0]
		for (initialind; initialind > (CRC_LAST_SZ -2); initialind--)
 8004082:	69fb      	ldr	r3, [r7, #28]
 8004084:	3b01      	subs	r3, #1
 8004086:	61fb      	str	r3, [r7, #28]
 8004088:	69fb      	ldr	r3, [r7, #28]
 800408a:	2b05      	cmp	r3, #5
 800408c:	d89f      	bhi.n	8003fce <get_crc+0x62>
	while(False == finalize)
 800408e:	7e7b      	ldrb	r3, [r7, #25]
 8004090:	2b00      	cmp	r3, #0
 8004092:	d0f9      	beq.n	8004088 <get_crc+0x11c>

			}
		}

	}
	return (uint8_t)(use_process_crc[0]);
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	b2db      	uxtb	r3, r3
}
 8004098:	4618      	mov	r0, r3
 800409a:	3720      	adds	r7, #32
 800409c:	46bd      	mov	sp, r7
 800409e:	bd80      	pop	{r7, pc}
 80040a0:	200008d4 	.word	0x200008d4
 80040a4:	200008d0 	.word	0x200008d0

080040a8 <Verify_File>:
  * @param  select what file need read.
  * @retval State of the process (error true) (no error false).
  * @info	check the data sheet how get the file
  */
uint8_t Verify_File(const uint8_t *Data_File, uint8_t File_selected)
{
 80040a8:	b480      	push	{r7}
 80040aa:	b085      	sub	sp, #20
 80040ac:	af00      	add	r7, sp, #0
 80040ae:	6078      	str	r0, [r7, #4]
 80040b0:	460b      	mov	r3, r1
 80040b2:	70fb      	strb	r3, [r7, #3]
	uint8_t Status_return = False;
 80040b4:	2300      	movs	r3, #0
 80040b6:	73fb      	strb	r3, [r7, #15]
	uint8_t text_index;
	uint8_t check_file = 1;
 80040b8:	2301      	movs	r3, #1
 80040ba:	737b      	strb	r3, [r7, #13]

	if(Data_File != NULL)
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d028      	beq.n	8004114 <Verify_File+0x6c>
	{
		for (text_index = 0; text_index < Files_select[File_selected].size_name; text_index++)
 80040c2:	2300      	movs	r3, #0
 80040c4:	73bb      	strb	r3, [r7, #14]
 80040c6:	e014      	b.n	80040f2 <Verify_File+0x4a>
		{
			if( Files_select[File_selected].File_Name[text_index] != (char)Data_File[text_index] )
 80040c8:	78fa      	ldrb	r2, [r7, #3]
 80040ca:	7bb9      	ldrb	r1, [r7, #14]
 80040cc:	4815      	ldr	r0, [pc, #84]	; (8004124 <Verify_File+0x7c>)
 80040ce:	4613      	mov	r3, r2
 80040d0:	005b      	lsls	r3, r3, #1
 80040d2:	4413      	add	r3, r2
 80040d4:	009b      	lsls	r3, r3, #2
 80040d6:	4403      	add	r3, r0
 80040d8:	440b      	add	r3, r1
 80040da:	781a      	ldrb	r2, [r3, #0]
 80040dc:	7bbb      	ldrb	r3, [r7, #14]
 80040de:	6879      	ldr	r1, [r7, #4]
 80040e0:	440b      	add	r3, r1
 80040e2:	781b      	ldrb	r3, [r3, #0]
 80040e4:	429a      	cmp	r2, r3
 80040e6:	d001      	beq.n	80040ec <Verify_File+0x44>
			{
				check_file = 0;
 80040e8:	2300      	movs	r3, #0
 80040ea:	737b      	strb	r3, [r7, #13]
		for (text_index = 0; text_index < Files_select[File_selected].size_name; text_index++)
 80040ec:	7bbb      	ldrb	r3, [r7, #14]
 80040ee:	3301      	adds	r3, #1
 80040f0:	73bb      	strb	r3, [r7, #14]
 80040f2:	78fa      	ldrb	r2, [r7, #3]
 80040f4:	490b      	ldr	r1, [pc, #44]	; (8004124 <Verify_File+0x7c>)
 80040f6:	4613      	mov	r3, r2
 80040f8:	005b      	lsls	r3, r3, #1
 80040fa:	4413      	add	r3, r2
 80040fc:	009b      	lsls	r3, r3, #2
 80040fe:	440b      	add	r3, r1
 8004100:	330b      	adds	r3, #11
 8004102:	781b      	ldrb	r3, [r3, #0]
 8004104:	7bba      	ldrb	r2, [r7, #14]
 8004106:	429a      	cmp	r2, r3
 8004108:	d3de      	bcc.n	80040c8 <Verify_File+0x20>
			}
		}
		if(check_file == True)
 800410a:	7b7b      	ldrb	r3, [r7, #13]
 800410c:	2b01      	cmp	r3, #1
 800410e:	d101      	bne.n	8004114 <Verify_File+0x6c>
		{
			Status_return = True;
 8004110:	2301      	movs	r3, #1
 8004112:	73fb      	strb	r3, [r7, #15]
		}
	}

	return Status_return;
 8004114:	7bfb      	ldrb	r3, [r7, #15]
}
 8004116:	4618      	mov	r0, r3
 8004118:	3714      	adds	r7, #20
 800411a:	46bd      	mov	sp, r7
 800411c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004120:	4770      	bx	lr
 8004122:	bf00      	nop
 8004124:	08005acc 	.word	0x08005acc

08004128 <init_I2C_P2>:
 *      Author: eduar
 */
#include "I2C_base.h"

extern	I2C_P2_STAT init_I2C_P2()
{
 8004128:	b580      	push	{r7, lr}
 800412a:	b082      	sub	sp, #8
 800412c:	af00      	add	r7, sp, #0
	I2C_P2_STAT status_ret=I2C_STAT_IN;
 800412e:	2301      	movs	r3, #1
 8004130:	71fb      	strb	r3, [r7, #7]

	I2C_P2.Instance = I2C2;
 8004132:	4b14      	ldr	r3, [pc, #80]	; (8004184 <init_I2C_P2+0x5c>)
 8004134:	4a14      	ldr	r2, [pc, #80]	; (8004188 <init_I2C_P2+0x60>)
 8004136:	601a      	str	r2, [r3, #0]
	I2C_P2.Init.ClockSpeed = 400000;
 8004138:	4b12      	ldr	r3, [pc, #72]	; (8004184 <init_I2C_P2+0x5c>)
 800413a:	4a14      	ldr	r2, [pc, #80]	; (800418c <init_I2C_P2+0x64>)
 800413c:	605a      	str	r2, [r3, #4]
	I2C_P2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800413e:	4b11      	ldr	r3, [pc, #68]	; (8004184 <init_I2C_P2+0x5c>)
 8004140:	2200      	movs	r2, #0
 8004142:	609a      	str	r2, [r3, #8]
	I2C_P2.Init.OwnAddress1 = 0;
 8004144:	4b0f      	ldr	r3, [pc, #60]	; (8004184 <init_I2C_P2+0x5c>)
 8004146:	2200      	movs	r2, #0
 8004148:	60da      	str	r2, [r3, #12]
	I2C_P2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800414a:	4b0e      	ldr	r3, [pc, #56]	; (8004184 <init_I2C_P2+0x5c>)
 800414c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8004150:	611a      	str	r2, [r3, #16]
	I2C_P2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8004152:	4b0c      	ldr	r3, [pc, #48]	; (8004184 <init_I2C_P2+0x5c>)
 8004154:	2200      	movs	r2, #0
 8004156:	615a      	str	r2, [r3, #20]
	I2C_P2.Init.OwnAddress2 = 0;
 8004158:	4b0a      	ldr	r3, [pc, #40]	; (8004184 <init_I2C_P2+0x5c>)
 800415a:	2200      	movs	r2, #0
 800415c:	619a      	str	r2, [r3, #24]
	I2C_P2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800415e:	4b09      	ldr	r3, [pc, #36]	; (8004184 <init_I2C_P2+0x5c>)
 8004160:	2200      	movs	r2, #0
 8004162:	61da      	str	r2, [r3, #28]
	I2C_P2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8004164:	4b07      	ldr	r3, [pc, #28]	; (8004184 <init_I2C_P2+0x5c>)
 8004166:	2200      	movs	r2, #0
 8004168:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&I2C_P2) != HAL_OK)
 800416a:	4806      	ldr	r0, [pc, #24]	; (8004184 <init_I2C_P2+0x5c>)
 800416c:	f7fd fd3c 	bl	8001be8 <HAL_I2C_Init>
 8004170:	4603      	mov	r3, r0
 8004172:	2b00      	cmp	r3, #0
 8004174:	d001      	beq.n	800417a <init_I2C_P2+0x52>
	{
		status_ret=I2C_STAT_NT;
 8004176:	2300      	movs	r3, #0
 8004178:	71fb      	strb	r3, [r7, #7]
	}
	return status_ret;
 800417a:	79fb      	ldrb	r3, [r7, #7]
}
 800417c:	4618      	mov	r0, r3
 800417e:	3708      	adds	r7, #8
 8004180:	46bd      	mov	sp, r7
 8004182:	bd80      	pop	{r7, pc}
 8004184:	2000086c 	.word	0x2000086c
 8004188:	40005800 	.word	0x40005800
 800418c:	00061a80 	.word	0x00061a80

08004190 <Get_IdImag_typeJPG>:
{0,549,0},
};


extern const Def_imag* Get_IdImag_typeJPG(uint8_t Id_image)
{
 8004190:	b480      	push	{r7}
 8004192:	b083      	sub	sp, #12
 8004194:	af00      	add	r7, sp, #0
 8004196:	4603      	mov	r3, r0
 8004198:	71fb      	strb	r3, [r7, #7]
	return image_pixtest;
 800419a:	4b03      	ldr	r3, [pc, #12]	; (80041a8 <Get_IdImag_typeJPG+0x18>)
}
 800419c:	4618      	mov	r0, r3
 800419e:	370c      	adds	r7, #12
 80041a0:	46bd      	mov	sp, r7
 80041a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a6:	4770      	bx	lr
 80041a8:	08005ae4 	.word	0x08005ae4

080041ac <Init_SD_SPI>:
		0,
		0,
		0,
};
extern void Init_SD_SPI(void)
{
 80041ac:	b580      	push	{r7, lr}
 80041ae:	af00      	add	r7, sp, #0
	Configure_SPI();
 80041b0:	f000 f866 	bl	8004280 <Configure_SPI>
	HAL_GPIO_WritePin(CS_SD_GPIO_Port, CS_SD_Pin, GPIO_PIN_SET);
 80041b4:	2201      	movs	r2, #1
 80041b6:	2104      	movs	r1, #4
 80041b8:	4803      	ldr	r0, [pc, #12]	; (80041c8 <Init_SD_SPI+0x1c>)
 80041ba:	f7fd fcbd 	bl	8001b38 <HAL_GPIO_WritePin>
	Init_Resp();
 80041be:	f000 f805 	bl	80041cc <Init_Resp>

}
 80041c2:	bf00      	nop
 80041c4:	bd80      	pop	{r7, pc}
 80041c6:	bf00      	nop
 80041c8:	40020000 	.word	0x40020000

080041cc <Init_Resp>:

extern void Init_Resp(void)
{
 80041cc:	b480      	push	{r7}
 80041ce:	b085      	sub	sp, #20
 80041d0:	af00      	add	r7, sp, #0
	uint8_t index;
	uint8_t Index_Strc = 0;
 80041d2:	2300      	movs	r3, #0
 80041d4:	73bb      	strb	r3, [r7, #14]
	uint8_t *Data_fill;
	uint8_t Num_bytes;

	for (Index_Strc = 0; Index_Strc < 4; Index_Strc++)
 80041d6:	2300      	movs	r3, #0
 80041d8:	73bb      	strb	r3, [r7, #14]
 80041da:	e01c      	b.n	8004216 <Init_Resp+0x4a>
	{
		Data_fill = R_Attrib[Index_Strc].Path_R;
 80041dc:	7bbb      	ldrb	r3, [r7, #14]
 80041de:	4a13      	ldr	r2, [pc, #76]	; (800422c <Init_Resp+0x60>)
 80041e0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80041e4:	60bb      	str	r3, [r7, #8]
		Num_bytes = R_Attrib[Index_Strc].lenght_Bytes;
 80041e6:	7bbb      	ldrb	r3, [r7, #14]
 80041e8:	4a10      	ldr	r2, [pc, #64]	; (800422c <Init_Resp+0x60>)
 80041ea:	00db      	lsls	r3, r3, #3
 80041ec:	4413      	add	r3, r2
 80041ee:	791b      	ldrb	r3, [r3, #4]
 80041f0:	71fb      	strb	r3, [r7, #7]
		for (index = 0; index < Num_bytes; index++)
 80041f2:	2300      	movs	r3, #0
 80041f4:	73fb      	strb	r3, [r7, #15]
 80041f6:	e007      	b.n	8004208 <Init_Resp+0x3c>
		{
			*(Data_fill + index) = 0;
 80041f8:	7bfb      	ldrb	r3, [r7, #15]
 80041fa:	68ba      	ldr	r2, [r7, #8]
 80041fc:	4413      	add	r3, r2
 80041fe:	2200      	movs	r2, #0
 8004200:	701a      	strb	r2, [r3, #0]
		for (index = 0; index < Num_bytes; index++)
 8004202:	7bfb      	ldrb	r3, [r7, #15]
 8004204:	3301      	adds	r3, #1
 8004206:	73fb      	strb	r3, [r7, #15]
 8004208:	7bfa      	ldrb	r2, [r7, #15]
 800420a:	79fb      	ldrb	r3, [r7, #7]
 800420c:	429a      	cmp	r2, r3
 800420e:	d3f3      	bcc.n	80041f8 <Init_Resp+0x2c>
	for (Index_Strc = 0; Index_Strc < 4; Index_Strc++)
 8004210:	7bbb      	ldrb	r3, [r7, #14]
 8004212:	3301      	adds	r3, #1
 8004214:	73bb      	strb	r3, [r7, #14]
 8004216:	7bbb      	ldrb	r3, [r7, #14]
 8004218:	2b03      	cmp	r3, #3
 800421a:	d9df      	bls.n	80041dc <Init_Resp+0x10>
		}
	}

}
 800421c:	bf00      	nop
 800421e:	bf00      	nop
 8004220:	3714      	adds	r7, #20
 8004222:	46bd      	mov	sp, r7
 8004224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004228:	4770      	bx	lr
 800422a:	bf00      	nop
 800422c:	200000e4 	.word	0x200000e4

08004230 <SPI_initial_block>:

extern void SPI_initial_block(void)
{
 8004230:	b580      	push	{r7, lr}
 8004232:	b082      	sub	sp, #8
 8004234:	af00      	add	r7, sp, #0
	uint8_t times;
	uint8_t Data = 0xFF;
 8004236:	23ff      	movs	r3, #255	; 0xff
 8004238:	71bb      	strb	r3, [r7, #6]
	for (times = 0; times < 22; times++) {
 800423a:	2300      	movs	r3, #0
 800423c:	71fb      	strb	r3, [r7, #7]
 800423e:	e012      	b.n	8004266 <SPI_initial_block+0x36>

		HAL_GPIO_WritePin(CS_SD_GPIO_Port, CS_SD_Pin, GPIO_PIN_RESET);
 8004240:	2200      	movs	r2, #0
 8004242:	2104      	movs	r1, #4
 8004244:	480c      	ldr	r0, [pc, #48]	; (8004278 <SPI_initial_block+0x48>)
 8004246:	f7fd fc77 	bl	8001b38 <HAL_GPIO_WritePin>
		HAL_SPI_Transmit(&hspi_SD, &Data, 1, 1);
 800424a:	1db9      	adds	r1, r7, #6
 800424c:	2301      	movs	r3, #1
 800424e:	2201      	movs	r2, #1
 8004250:	480a      	ldr	r0, [pc, #40]	; (800427c <SPI_initial_block+0x4c>)
 8004252:	f7ff f92c 	bl	80034ae <HAL_SPI_Transmit>
		HAL_GPIO_WritePin(CS_SD_GPIO_Port, CS_SD_Pin, GPIO_PIN_SET);
 8004256:	2201      	movs	r2, #1
 8004258:	2104      	movs	r1, #4
 800425a:	4807      	ldr	r0, [pc, #28]	; (8004278 <SPI_initial_block+0x48>)
 800425c:	f7fd fc6c 	bl	8001b38 <HAL_GPIO_WritePin>
	for (times = 0; times < 22; times++) {
 8004260:	79fb      	ldrb	r3, [r7, #7]
 8004262:	3301      	adds	r3, #1
 8004264:	71fb      	strb	r3, [r7, #7]
 8004266:	79fb      	ldrb	r3, [r7, #7]
 8004268:	2b15      	cmp	r3, #21
 800426a:	d9e9      	bls.n	8004240 <SPI_initial_block+0x10>
	}
}
 800426c:	bf00      	nop
 800426e:	bf00      	nop
 8004270:	3708      	adds	r7, #8
 8004272:	46bd      	mov	sp, r7
 8004274:	bd80      	pop	{r7, pc}
 8004276:	bf00      	nop
 8004278:	40020000 	.word	0x40020000
 800427c:	200008d8 	.word	0x200008d8

08004280 <Configure_SPI>:
static void Configure_SPI(void)
{
 8004280:	b580      	push	{r7, lr}
 8004282:	af00      	add	r7, sp, #0
	  hspi_SD.Instance = SPI3;
 8004284:	4b17      	ldr	r3, [pc, #92]	; (80042e4 <Configure_SPI+0x64>)
 8004286:	4a18      	ldr	r2, [pc, #96]	; (80042e8 <Configure_SPI+0x68>)
 8004288:	601a      	str	r2, [r3, #0]
	  hspi_SD.Init.Mode = SPI_MODE_MASTER;
 800428a:	4b16      	ldr	r3, [pc, #88]	; (80042e4 <Configure_SPI+0x64>)
 800428c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8004290:	605a      	str	r2, [r3, #4]
	  hspi_SD.Init.Direction = SPI_DIRECTION_2LINES;
 8004292:	4b14      	ldr	r3, [pc, #80]	; (80042e4 <Configure_SPI+0x64>)
 8004294:	2200      	movs	r2, #0
 8004296:	609a      	str	r2, [r3, #8]
	  hspi_SD.Init.DataSize = SPI_DATASIZE_8BIT;
 8004298:	4b12      	ldr	r3, [pc, #72]	; (80042e4 <Configure_SPI+0x64>)
 800429a:	2200      	movs	r2, #0
 800429c:	60da      	str	r2, [r3, #12]
	  hspi_SD.Init.CLKPolarity = SPI_POLARITY_LOW;
 800429e:	4b11      	ldr	r3, [pc, #68]	; (80042e4 <Configure_SPI+0x64>)
 80042a0:	2200      	movs	r2, #0
 80042a2:	611a      	str	r2, [r3, #16]
	  hspi_SD.Init.CLKPhase = SPI_PHASE_1EDGE;
 80042a4:	4b0f      	ldr	r3, [pc, #60]	; (80042e4 <Configure_SPI+0x64>)
 80042a6:	2200      	movs	r2, #0
 80042a8:	615a      	str	r2, [r3, #20]
	  hspi_SD.Init.NSS = SPI_NSS_SOFT;
 80042aa:	4b0e      	ldr	r3, [pc, #56]	; (80042e4 <Configure_SPI+0x64>)
 80042ac:	f44f 7200 	mov.w	r2, #512	; 0x200
 80042b0:	619a      	str	r2, [r3, #24]
	  hspi_SD.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 80042b2:	4b0c      	ldr	r3, [pc, #48]	; (80042e4 <Configure_SPI+0x64>)
 80042b4:	2210      	movs	r2, #16
 80042b6:	61da      	str	r2, [r3, #28]
	  hspi_SD.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80042b8:	4b0a      	ldr	r3, [pc, #40]	; (80042e4 <Configure_SPI+0x64>)
 80042ba:	2200      	movs	r2, #0
 80042bc:	621a      	str	r2, [r3, #32]
	  hspi_SD.Init.TIMode = SPI_TIMODE_DISABLE;
 80042be:	4b09      	ldr	r3, [pc, #36]	; (80042e4 <Configure_SPI+0x64>)
 80042c0:	2200      	movs	r2, #0
 80042c2:	625a      	str	r2, [r3, #36]	; 0x24
	  hspi_SD.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80042c4:	4b07      	ldr	r3, [pc, #28]	; (80042e4 <Configure_SPI+0x64>)
 80042c6:	2200      	movs	r2, #0
 80042c8:	629a      	str	r2, [r3, #40]	; 0x28
	  hspi_SD.Init.CRCPolynomial = 10;
 80042ca:	4b06      	ldr	r3, [pc, #24]	; (80042e4 <Configure_SPI+0x64>)
 80042cc:	220a      	movs	r2, #10
 80042ce:	62da      	str	r2, [r3, #44]	; 0x2c
	  if (HAL_SPI_Init(&hspi_SD) != HAL_OK)
 80042d0:	4804      	ldr	r0, [pc, #16]	; (80042e4 <Configure_SPI+0x64>)
 80042d2:	f7ff f863 	bl	800339c <HAL_SPI_Init>
 80042d6:	4603      	mov	r3, r0
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d001      	beq.n	80042e0 <Configure_SPI+0x60>
	  {
	    Error_Handler();
 80042dc:	f7fc ff7c 	bl	80011d8 <Error_Handler>
	  }
}
 80042e0:	bf00      	nop
 80042e2:	bd80      	pop	{r7, pc}
 80042e4:	200008d8 	.word	0x200008d8
 80042e8:	40003c00 	.word	0x40003c00

080042ec <Dummy_funct_SD>:

extern void Dummy_funct_SD(void)
{
 80042ec:	b580      	push	{r7, lr}
 80042ee:	af00      	add	r7, sp, #0
/*	Get_initial_block();

	SD_Device.State_Error_Actual = Read_Block( (uint32_t)SD_Device.Adress_Partition,
											  SD_MAX_BLOCK_LENGHT,
											  (SD_Device.Block_Read_last) );*/
	Get_Block_Data();
 80042f0:	f000 fba6 	bl	8004a40 <Get_Block_Data>
	Select_File(0);
 80042f4:	2000      	movs	r0, #0
 80042f6:	f000 fc27 	bl	8004b48 <Select_File>

}
 80042fa:	bf00      	nop
 80042fc:	bd80      	pop	{r7, pc}
	...

08004300 <active_Spi_CS>:

static void active_Spi_CS(void)
{
 8004300:	b580      	push	{r7, lr}
 8004302:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(CS_SD_GPIO_Port, CS_SD_Pin, GPIO_PIN_RESET);
 8004304:	2200      	movs	r2, #0
 8004306:	2104      	movs	r1, #4
 8004308:	4802      	ldr	r0, [pc, #8]	; (8004314 <active_Spi_CS+0x14>)
 800430a:	f7fd fc15 	bl	8001b38 <HAL_GPIO_WritePin>
}
 800430e:	bf00      	nop
 8004310:	bd80      	pop	{r7, pc}
 8004312:	bf00      	nop
 8004314:	40020000 	.word	0x40020000

08004318 <deactive_Spi_CS>:

static void deactive_Spi_CS(void)
{
 8004318:	b580      	push	{r7, lr}
 800431a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(CS_SD_GPIO_Port, CS_SD_Pin, GPIO_PIN_SET);
 800431c:	2201      	movs	r2, #1
 800431e:	2104      	movs	r1, #4
 8004320:	4802      	ldr	r0, [pc, #8]	; (800432c <deactive_Spi_CS+0x14>)
 8004322:	f7fd fc09 	bl	8001b38 <HAL_GPIO_WritePin>
}
 8004326:	bf00      	nop
 8004328:	bd80      	pop	{r7, pc}
 800432a:	bf00      	nop
 800432c:	40020000 	.word	0x40020000

08004330 <Fix_Data_CMD>:

//return 4 bytes that correspond of 32 bytes of input
static uint8_t *Fix_Data_CMD(uint32_t Input_Data)
{
 8004330:	b480      	push	{r7}
 8004332:	b085      	sub	sp, #20
 8004334:	af00      	add	r7, sp, #0
 8004336:	6078      	str	r0, [r7, #4]
	int8_t index=0;
 8004338:	2300      	movs	r3, #0
 800433a:	73fb      	strb	r3, [r7, #15]

	for (index = 3; index >= 0 ; index--)
 800433c:	2303      	movs	r3, #3
 800433e:	73fb      	strb	r3, [r7, #15]
 8004340:	e011      	b.n	8004366 <Fix_Data_CMD+0x36>
	{
		SD_Base_Buffer[3 - index ] = (uint8_t)( (Input_Data >> (index *8 ) ) & 0xFF) ;
 8004342:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004346:	00db      	lsls	r3, r3, #3
 8004348:	687a      	ldr	r2, [r7, #4]
 800434a:	40da      	lsrs	r2, r3
 800434c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004350:	f1c3 0303 	rsb	r3, r3, #3
 8004354:	b2d1      	uxtb	r1, r2
 8004356:	4a09      	ldr	r2, [pc, #36]	; (800437c <Fix_Data_CMD+0x4c>)
 8004358:	54d1      	strb	r1, [r2, r3]
	for (index = 3; index >= 0 ; index--)
 800435a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800435e:	b2db      	uxtb	r3, r3
 8004360:	3b01      	subs	r3, #1
 8004362:	b2db      	uxtb	r3, r3
 8004364:	73fb      	strb	r3, [r7, #15]
 8004366:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800436a:	2b00      	cmp	r3, #0
 800436c:	dae9      	bge.n	8004342 <Fix_Data_CMD+0x12>
	}
	return SD_Base_Buffer;
 800436e:	4b03      	ldr	r3, [pc, #12]	; (800437c <Fix_Data_CMD+0x4c>)
}
 8004370:	4618      	mov	r0, r3
 8004372:	3714      	adds	r7, #20
 8004374:	46bd      	mov	sp, r7
 8004376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800437a:	4770      	bx	lr
 800437c:	20000b54 	.word	0x20000b54

08004380 <SPI_SD_Initialaze>:

//Initialize SD
extern uint8_t SPI_SD_Initialaze(void)
{
 8004380:	b580      	push	{r7, lr}
 8004382:	b084      	sub	sp, #16
 8004384:	af00      	add	r7, sp, #0
	strc_send_CMD8  CMD8_bld;
	uint8_t Error;
	uint8_t stuff_b[] = {0x00,0x00,0x00,0x00};
 8004386:	2300      	movs	r3, #0
 8004388:	607b      	str	r3, [r7, #4]
	uint32_t stuff_long;
	Error = process_Send_CMD(0,0,stuff_b); //reset SD
 800438a:	1d3b      	adds	r3, r7, #4
 800438c:	461a      	mov	r2, r3
 800438e:	2100      	movs	r1, #0
 8004390:	2000      	movs	r0, #0
 8004392:	f000 f86d 	bl	8004470 <process_Send_CMD>
 8004396:	4603      	mov	r3, r0
 8004398:	73fb      	strb	r3, [r7, #15]
	CMD8_bld.RSRV_ZEROS1 = 0x00;
 800439a:	2300      	movs	r3, #0
 800439c:	813b      	strh	r3, [r7, #8]
	CMD8_bld.RSRV_ZEROS2 = 0x00;
 800439e:	7abb      	ldrb	r3, [r7, #10]
 80043a0:	f36f 1307 	bfc	r3, #4, #4
 80043a4:	72bb      	strb	r3, [r7, #10]
	CMD8_bld.voltg_sup = 0x01;
 80043a6:	7abb      	ldrb	r3, [r7, #10]
 80043a8:	2201      	movs	r2, #1
 80043aa:	f362 0303 	bfi	r3, r2, #0, #4
 80043ae:	72bb      	strb	r3, [r7, #10]
	CMD8_bld.check_pat = 0x55;
 80043b0:	2355      	movs	r3, #85	; 0x55
 80043b2:	72fb      	strb	r3, [r7, #11]

	Error = process_Send_CMD(8,0,(uint8_t*)(&CMD8_bld) ); //set the actual voltage
 80043b4:	f107 0308 	add.w	r3, r7, #8
 80043b8:	461a      	mov	r2, r3
 80043ba:	2100      	movs	r1, #0
 80043bc:	2008      	movs	r0, #8
 80043be:	f000 f857 	bl	8004470 <process_Send_CMD>
 80043c2:	4603      	mov	r3, r0
 80043c4:	73fb      	strb	r3, [r7, #15]
	stuff_long = long_ones;
 80043c6:	f04f 33ff 	mov.w	r3, #4294967295
 80043ca:	603b      	str	r3, [r7, #0]
	Error = process_Send_CMD(58,0,(uint8_t*)(&stuff_long)); //Read the OCR
 80043cc:	463b      	mov	r3, r7
 80043ce:	461a      	mov	r2, r3
 80043d0:	2100      	movs	r1, #0
 80043d2:	203a      	movs	r0, #58	; 0x3a
 80043d4:	f000 f84c 	bl	8004470 <process_Send_CMD>
 80043d8:	4603      	mov	r3, r0
 80043da:	73fb      	strb	r3, [r7, #15]

	if(Error == False)
 80043dc:	7bfb      	ldrb	r3, [r7, #15]
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d11d      	bne.n	800441e <SPI_SD_Initialaze+0x9e>
	{

		do {
			stuff_long = long_ones;
 80043e2:	f04f 33ff 	mov.w	r3, #4294967295
 80043e6:	603b      	str	r3, [r7, #0]
			Error = process_Send_CMD(55,0,(uint8_t*)(&stuff_long));	//send to next ACMD
 80043e8:	463b      	mov	r3, r7
 80043ea:	461a      	mov	r2, r3
 80043ec:	2100      	movs	r1, #0
 80043ee:	2037      	movs	r0, #55	; 0x37
 80043f0:	f000 f83e 	bl	8004470 <process_Send_CMD>
 80043f4:	4603      	mov	r3, r0
 80043f6:	73fb      	strb	r3, [r7, #15]
			stuff_long = long_zeros;
 80043f8:	2300      	movs	r3, #0
 80043fa:	603b      	str	r3, [r7, #0]
			stuff_long = 1<<6;
 80043fc:	2340      	movs	r3, #64	; 0x40
 80043fe:	603b      	str	r3, [r7, #0]
			Error = process_Send_CMD(ACMD41,1,(uint8_t*)(&stuff_long));
 8004400:	463b      	mov	r3, r7
 8004402:	461a      	mov	r2, r3
 8004404:	2101      	movs	r1, #1
 8004406:	2003      	movs	r0, #3
 8004408:	f000 f832 	bl	8004470 <process_Send_CMD>
 800440c:	4603      	mov	r3, r0
 800440e:	73fb      	strb	r3, [r7, #15]

		} while (Res_R1.idle_stat==1);
 8004410:	4b14      	ldr	r3, [pc, #80]	; (8004464 <SPI_SD_Initialaze+0xe4>)
 8004412:	781b      	ldrb	r3, [r3, #0]
 8004414:	f003 0301 	and.w	r3, r3, #1
 8004418:	b2db      	uxtb	r3, r3
 800441a:	2b00      	cmp	r3, #0
 800441c:	d1e1      	bne.n	80043e2 <SPI_SD_Initialaze+0x62>
	}

	if(Error == False)
 800441e:	7bfb      	ldrb	r3, [r7, #15]
 8004420:	2b00      	cmp	r3, #0
 8004422:	d10a      	bne.n	800443a <SPI_SD_Initialaze+0xba>
	{
		stuff_long = long_ones;
 8004424:	f04f 33ff 	mov.w	r3, #4294967295
 8004428:	603b      	str	r3, [r7, #0]
		Error = process_Send_CMD(58,0,(uint8_t*)(&stuff_long)); //Read the OCR check version
 800442a:	463b      	mov	r3, r7
 800442c:	461a      	mov	r2, r3
 800442e:	2100      	movs	r1, #0
 8004430:	203a      	movs	r0, #58	; 0x3a
 8004432:	f000 f81d 	bl	8004470 <process_Send_CMD>
 8004436:	4603      	mov	r3, r0
 8004438:	73fb      	strb	r3, [r7, #15]
	}

	if( ( (Res_R3.OCR & (3 << 30)) >> 30) == 3 )
 800443a:	4b0b      	ldr	r3, [pc, #44]	; (8004468 <SPI_SD_Initialaze+0xe8>)
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	0f9b      	lsrs	r3, r3, #30
 8004440:	2b03      	cmp	r3, #3
 8004442:	d105      	bne.n	8004450 <SPI_SD_Initialaze+0xd0>
	{
		Error = True;
 8004444:	2301      	movs	r3, #1
 8004446:	73fb      	strb	r3, [r7, #15]
		SD_Device.State = SD_ERR0R_INIT;
 8004448:	4b08      	ldr	r3, [pc, #32]	; (800446c <SPI_SD_Initialaze+0xec>)
 800444a:	2204      	movs	r2, #4
 800444c:	701a      	strb	r2, [r3, #0]
 800444e:	e004      	b.n	800445a <SPI_SD_Initialaze+0xda>
	}
	else
	{
		SD_Device.State = SD_INIT;
 8004450:	4b06      	ldr	r3, [pc, #24]	; (800446c <SPI_SD_Initialaze+0xec>)
 8004452:	2201      	movs	r2, #1
 8004454:	701a      	strb	r2, [r3, #0]
		Error = False;
 8004456:	2300      	movs	r3, #0
 8004458:	73fb      	strb	r3, [r7, #15]
	}

	return Error;
 800445a:	7bfb      	ldrb	r3, [r7, #15]
}
 800445c:	4618      	mov	r0, r3
 800445e:	3710      	adds	r7, #16
 8004460:	46bd      	mov	sp, r7
 8004462:	bd80      	pop	{r7, pc}
 8004464:	20000930 	.word	0x20000930
 8004468:	20000938 	.word	0x20000938
 800446c:	20000948 	.word	0x20000948

08004470 <process_Send_CMD>:



extern uint8_t process_Send_CMD(uint8_t command, uint8_t ACMD_CMD, uint8_t *Data_send)
{
 8004470:	b580      	push	{r7, lr}
 8004472:	b086      	sub	sp, #24
 8004474:	af00      	add	r7, sp, #0
 8004476:	4603      	mov	r3, r0
 8004478:	603a      	str	r2, [r7, #0]
 800447a:	71fb      	strb	r3, [r7, #7]
 800447c:	460b      	mov	r3, r1
 800447e:	71bb      	strb	r3, [r7, #6]
	uint8_t Index;
	uint8_t Data[10];
	uint8_t number_package;
	uint8_t Error;

	if( (command < Max_command) && (ACMD_CMD==False)) // only for CMD
 8004480:	79fb      	ldrb	r3, [r7, #7]
 8004482:	2b3f      	cmp	r3, #63	; 0x3f
 8004484:	d860      	bhi.n	8004548 <process_Send_CMD+0xd8>
 8004486:	79bb      	ldrb	r3, [r7, #6]
 8004488:	2b00      	cmp	r3, #0
 800448a:	d15d      	bne.n	8004548 <process_Send_CMD+0xd8>
	{
		number_package = (uint8_t)((SPI_Command[command].Send_length)/8);
 800448c:	79fa      	ldrb	r2, [r7, #7]
 800448e:	4962      	ldr	r1, [pc, #392]	; (8004618 <process_Send_CMD+0x1a8>)
 8004490:	4613      	mov	r3, r2
 8004492:	005b      	lsls	r3, r3, #1
 8004494:	4413      	add	r3, r2
 8004496:	440b      	add	r3, r1
 8004498:	3301      	adds	r3, #1
 800449a:	781b      	ldrb	r3, [r3, #0]
 800449c:	08db      	lsrs	r3, r3, #3
 800449e:	757b      	strb	r3, [r7, #21]
		*(Data) = SPI_Command[command].Command;
 80044a0:	79fa      	ldrb	r2, [r7, #7]
 80044a2:	495d      	ldr	r1, [pc, #372]	; (8004618 <process_Send_CMD+0x1a8>)
 80044a4:	4613      	mov	r3, r2
 80044a6:	005b      	lsls	r3, r3, #1
 80044a8:	4413      	add	r3, r2
 80044aa:	440b      	add	r3, r1
 80044ac:	781b      	ldrb	r3, [r3, #0]
 80044ae:	723b      	strb	r3, [r7, #8]
		for (Index = 0; Index < number_package; Index++)
 80044b0:	2300      	movs	r3, #0
 80044b2:	75fb      	strb	r3, [r7, #23]
 80044b4:	e00c      	b.n	80044d0 <process_Send_CMD+0x60>
		{
			*(Data + 1 + Index) = *(Data_send + Index);
 80044b6:	7dfb      	ldrb	r3, [r7, #23]
 80044b8:	683a      	ldr	r2, [r7, #0]
 80044ba:	441a      	add	r2, r3
 80044bc:	7dfb      	ldrb	r3, [r7, #23]
 80044be:	3301      	adds	r3, #1
 80044c0:	f107 0108 	add.w	r1, r7, #8
 80044c4:	440b      	add	r3, r1
 80044c6:	7812      	ldrb	r2, [r2, #0]
 80044c8:	701a      	strb	r2, [r3, #0]
		for (Index = 0; Index < number_package; Index++)
 80044ca:	7dfb      	ldrb	r3, [r7, #23]
 80044cc:	3301      	adds	r3, #1
 80044ce:	75fb      	strb	r3, [r7, #23]
 80044d0:	7dfa      	ldrb	r2, [r7, #23]
 80044d2:	7d7b      	ldrb	r3, [r7, #21]
 80044d4:	429a      	cmp	r2, r3
 80044d6:	d3ee      	bcc.n	80044b6 <process_Send_CMD+0x46>
		}
		number_package++; //increment the command
 80044d8:	7d7b      	ldrb	r3, [r7, #21]
 80044da:	3301      	adds	r3, #1
 80044dc:	757b      	strb	r3, [r7, #21]
		 *(Data + Index + 1) = ( ((get_crc(Data,number_package) ) << 0x01 ) | 0x01);
 80044de:	7d7a      	ldrb	r2, [r7, #21]
 80044e0:	f107 0308 	add.w	r3, r7, #8
 80044e4:	4611      	mov	r1, r2
 80044e6:	4618      	mov	r0, r3
 80044e8:	f7ff fd40 	bl	8003f6c <get_crc>
 80044ec:	4603      	mov	r3, r0
 80044ee:	005b      	lsls	r3, r3, #1
 80044f0:	b25b      	sxtb	r3, r3
 80044f2:	f043 0301 	orr.w	r3, r3, #1
 80044f6:	b259      	sxtb	r1, r3
 80044f8:	7dfb      	ldrb	r3, [r7, #23]
 80044fa:	3301      	adds	r3, #1
 80044fc:	f107 0208 	add.w	r2, r7, #8
 8004500:	4413      	add	r3, r2
 8004502:	b2ca      	uxtb	r2, r1
 8004504:	701a      	strb	r2, [r3, #0]
		number_package++;
 8004506:	7d7b      	ldrb	r3, [r7, #21]
 8004508:	3301      	adds	r3, #1
 800450a:	757b      	strb	r3, [r7, #21]

		HAL_GPIO_WritePin(CS_SD_GPIO_Port, CS_SD_Pin, GPIO_PIN_RESET);
 800450c:	2200      	movs	r2, #0
 800450e:	2104      	movs	r1, #4
 8004510:	4842      	ldr	r0, [pc, #264]	; (800461c <process_Send_CMD+0x1ac>)
 8004512:	f7fd fb11 	bl	8001b38 <HAL_GPIO_WritePin>
		// Write the command for the SPI
		HAL_SPI_Transmit(&hspi_SD, Data, number_package, 5);
 8004516:	7d7b      	ldrb	r3, [r7, #21]
 8004518:	b29a      	uxth	r2, r3
 800451a:	f107 0108 	add.w	r1, r7, #8
 800451e:	2305      	movs	r3, #5
 8004520:	483f      	ldr	r0, [pc, #252]	; (8004620 <process_Send_CMD+0x1b0>)
 8004522:	f7fe ffc4 	bl	80034ae <HAL_SPI_Transmit>

		Error = process_Read_CMD (SPI_Command[command].Type_response, Data);
 8004526:	79fa      	ldrb	r2, [r7, #7]
 8004528:	493b      	ldr	r1, [pc, #236]	; (8004618 <process_Send_CMD+0x1a8>)
 800452a:	4613      	mov	r3, r2
 800452c:	005b      	lsls	r3, r3, #1
 800452e:	4413      	add	r3, r2
 8004530:	440b      	add	r3, r1
 8004532:	3302      	adds	r3, #2
 8004534:	781b      	ldrb	r3, [r3, #0]
 8004536:	f107 0208 	add.w	r2, r7, #8
 800453a:	4611      	mov	r1, r2
 800453c:	4618      	mov	r0, r3
 800453e:	f000 f873 	bl	8004628 <process_Read_CMD>
 8004542:	4603      	mov	r3, r0
 8004544:	75bb      	strb	r3, [r7, #22]
	{
 8004546:	e062      	b.n	800460e <process_Send_CMD+0x19e>
	}

	else if ( (command < Max_ACMD) && (ACMD_CMD == True) )
 8004548:	79fb      	ldrb	r3, [r7, #7]
 800454a:	2b05      	cmp	r3, #5
 800454c:	d85f      	bhi.n	800460e <process_Send_CMD+0x19e>
 800454e:	79bb      	ldrb	r3, [r7, #6]
 8004550:	2b01      	cmp	r3, #1
 8004552:	d15c      	bne.n	800460e <process_Send_CMD+0x19e>
	{
		number_package = (uint8_t)(SPI_ACMD[command].Send_length/8);
 8004554:	79fa      	ldrb	r2, [r7, #7]
 8004556:	4933      	ldr	r1, [pc, #204]	; (8004624 <process_Send_CMD+0x1b4>)
 8004558:	4613      	mov	r3, r2
 800455a:	005b      	lsls	r3, r3, #1
 800455c:	4413      	add	r3, r2
 800455e:	440b      	add	r3, r1
 8004560:	3301      	adds	r3, #1
 8004562:	781b      	ldrb	r3, [r3, #0]
 8004564:	08db      	lsrs	r3, r3, #3
 8004566:	757b      	strb	r3, [r7, #21]

		*(Data) = SPI_ACMD[command].Command;
 8004568:	79fa      	ldrb	r2, [r7, #7]
 800456a:	492e      	ldr	r1, [pc, #184]	; (8004624 <process_Send_CMD+0x1b4>)
 800456c:	4613      	mov	r3, r2
 800456e:	005b      	lsls	r3, r3, #1
 8004570:	4413      	add	r3, r2
 8004572:	440b      	add	r3, r1
 8004574:	781b      	ldrb	r3, [r3, #0]
 8004576:	723b      	strb	r3, [r7, #8]

		for (Index = 0; Index < number_package; Index++)
 8004578:	2300      	movs	r3, #0
 800457a:	75fb      	strb	r3, [r7, #23]
 800457c:	e00c      	b.n	8004598 <process_Send_CMD+0x128>
		{
			*(Data + 1 + Index) = *(Data_send +Index);
 800457e:	7dfb      	ldrb	r3, [r7, #23]
 8004580:	683a      	ldr	r2, [r7, #0]
 8004582:	441a      	add	r2, r3
 8004584:	7dfb      	ldrb	r3, [r7, #23]
 8004586:	3301      	adds	r3, #1
 8004588:	f107 0108 	add.w	r1, r7, #8
 800458c:	440b      	add	r3, r1
 800458e:	7812      	ldrb	r2, [r2, #0]
 8004590:	701a      	strb	r2, [r3, #0]
		for (Index = 0; Index < number_package; Index++)
 8004592:	7dfb      	ldrb	r3, [r7, #23]
 8004594:	3301      	adds	r3, #1
 8004596:	75fb      	strb	r3, [r7, #23]
 8004598:	7dfa      	ldrb	r2, [r7, #23]
 800459a:	7d7b      	ldrb	r3, [r7, #21]
 800459c:	429a      	cmp	r2, r3
 800459e:	d3ee      	bcc.n	800457e <process_Send_CMD+0x10e>
		}
		number_package++;
 80045a0:	7d7b      	ldrb	r3, [r7, #21]
 80045a2:	3301      	adds	r3, #1
 80045a4:	757b      	strb	r3, [r7, #21]
		*(Data + Index + 1) = ( ((get_crc(Data,number_package) ) << 0x01 ) | 0x01);
 80045a6:	7d7a      	ldrb	r2, [r7, #21]
 80045a8:	f107 0308 	add.w	r3, r7, #8
 80045ac:	4611      	mov	r1, r2
 80045ae:	4618      	mov	r0, r3
 80045b0:	f7ff fcdc 	bl	8003f6c <get_crc>
 80045b4:	4603      	mov	r3, r0
 80045b6:	005b      	lsls	r3, r3, #1
 80045b8:	b25b      	sxtb	r3, r3
 80045ba:	f043 0301 	orr.w	r3, r3, #1
 80045be:	b259      	sxtb	r1, r3
 80045c0:	7dfb      	ldrb	r3, [r7, #23]
 80045c2:	3301      	adds	r3, #1
 80045c4:	f107 0208 	add.w	r2, r7, #8
 80045c8:	4413      	add	r3, r2
 80045ca:	b2ca      	uxtb	r2, r1
 80045cc:	701a      	strb	r2, [r3, #0]
		number_package++;
 80045ce:	7d7b      	ldrb	r3, [r7, #21]
 80045d0:	3301      	adds	r3, #1
 80045d2:	757b      	strb	r3, [r7, #21]

		HAL_GPIO_WritePin(CS_SD_GPIO_Port, CS_SD_Pin, GPIO_PIN_RESET);
 80045d4:	2200      	movs	r2, #0
 80045d6:	2104      	movs	r1, #4
 80045d8:	4810      	ldr	r0, [pc, #64]	; (800461c <process_Send_CMD+0x1ac>)
 80045da:	f7fd faad 	bl	8001b38 <HAL_GPIO_WritePin>

		// Write the command for the SPI ACM
		HAL_SPI_Transmit(&hspi_SD, Data, number_package, 5);
 80045de:	7d7b      	ldrb	r3, [r7, #21]
 80045e0:	b29a      	uxth	r2, r3
 80045e2:	f107 0108 	add.w	r1, r7, #8
 80045e6:	2305      	movs	r3, #5
 80045e8:	480d      	ldr	r0, [pc, #52]	; (8004620 <process_Send_CMD+0x1b0>)
 80045ea:	f7fe ff60 	bl	80034ae <HAL_SPI_Transmit>
		Error = process_Read_CMD (SPI_ACMD[command].Type_response, Data);
 80045ee:	79fa      	ldrb	r2, [r7, #7]
 80045f0:	490c      	ldr	r1, [pc, #48]	; (8004624 <process_Send_CMD+0x1b4>)
 80045f2:	4613      	mov	r3, r2
 80045f4:	005b      	lsls	r3, r3, #1
 80045f6:	4413      	add	r3, r2
 80045f8:	440b      	add	r3, r1
 80045fa:	3302      	adds	r3, #2
 80045fc:	781b      	ldrb	r3, [r3, #0]
 80045fe:	f107 0208 	add.w	r2, r7, #8
 8004602:	4611      	mov	r1, r2
 8004604:	4618      	mov	r0, r3
 8004606:	f000 f80f 	bl	8004628 <process_Read_CMD>
 800460a:	4603      	mov	r3, r0
 800460c:	75bb      	strb	r3, [r7, #22]
	}
	return Error;
 800460e:	7dbb      	ldrb	r3, [r7, #22]
}
 8004610:	4618      	mov	r0, r3
 8004612:	3718      	adds	r7, #24
 8004614:	46bd      	mov	sp, r7
 8004616:	bd80      	pop	{r7, pc}
 8004618:	20000010 	.word	0x20000010
 800461c:	40020000 	.word	0x40020000
 8004620:	200008d8 	.word	0x200008d8
 8004624:	200000d0 	.word	0x200000d0

08004628 <process_Read_CMD>:

extern uint8_t process_Read_CMD(uint8_t Read_comand_Type,uint8_t *Data)
{
 8004628:	b580      	push	{r7, lr}
 800462a:	b088      	sub	sp, #32
 800462c:	af02      	add	r7, sp, #8
 800462e:	4603      	mov	r3, r0
 8004630:	6039      	str	r1, [r7, #0]
 8004632:	71fb      	strb	r3, [r7, #7]
	uint8_t Times_ret;
	uint8_t Max_bytes_Data = 4;
 8004634:	2304      	movs	r3, #4
 8004636:	75bb      	strb	r3, [r7, #22]
	uint8_t Get_data_enable = False;
 8004638:	2300      	movs	r3, #0
 800463a:	757b      	strb	r3, [r7, #21]
	uint8_t Error = True;
 800463c:	2301      	movs	r3, #1
 800463e:	753b      	strb	r3, [r7, #20]
	uint8_t *initial_ptr = Data;
 8004640:	683b      	ldr	r3, [r7, #0]
 8004642:	613b      	str	r3, [r7, #16]
	uint8_t stuuf_ones=0xFF;
 8004644:	23ff      	movs	r3, #255	; 0xff
 8004646:	73fb      	strb	r3, [r7, #15]

	for (Times_ret = 0; Times_ret < Max_bytes_Data; Times_ret++)
 8004648:	2300      	movs	r3, #0
 800464a:	75fb      	strb	r3, [r7, #23]
 800464c:	e032      	b.n	80046b4 <process_Read_CMD+0x8c>
	{
//		HAL_SPI_Receive(&hspi_SD, Data, 1, 5);
		HAL_SPI_TransmitReceive(&hspi_SD, &stuuf_ones, Data, 1, 5);
 800464e:	f107 010f 	add.w	r1, r7, #15
 8004652:	2305      	movs	r3, #5
 8004654:	9300      	str	r3, [sp, #0]
 8004656:	2301      	movs	r3, #1
 8004658:	683a      	ldr	r2, [r7, #0]
 800465a:	4823      	ldr	r0, [pc, #140]	; (80046e8 <process_Read_CMD+0xc0>)
 800465c:	f7ff f863 	bl	8003726 <HAL_SPI_TransmitReceive>
		if( ( (*(Data) & 0x80) ==  0x00) &  (Get_data_enable == False) )
 8004660:	683b      	ldr	r3, [r7, #0]
 8004662:	781b      	ldrb	r3, [r3, #0]
 8004664:	b25b      	sxtb	r3, r3
 8004666:	43db      	mvns	r3, r3
 8004668:	b2db      	uxtb	r3, r3
 800466a:	09db      	lsrs	r3, r3, #7
 800466c:	b2da      	uxtb	r2, r3
 800466e:	7d7b      	ldrb	r3, [r7, #21]
 8004670:	2b00      	cmp	r3, #0
 8004672:	bf0c      	ite	eq
 8004674:	2301      	moveq	r3, #1
 8004676:	2300      	movne	r3, #0
 8004678:	b2db      	uxtb	r3, r3
 800467a:	4013      	ands	r3, r2
 800467c:	b2db      	uxtb	r3, r3
 800467e:	2b00      	cmp	r3, #0
 8004680:	d00f      	beq.n	80046a2 <process_Read_CMD+0x7a>
		{
			Max_bytes_Data = R_Attrib[Read_comand_Type].lenght_Bytes;
 8004682:	79fb      	ldrb	r3, [r7, #7]
 8004684:	4a19      	ldr	r2, [pc, #100]	; (80046ec <process_Read_CMD+0xc4>)
 8004686:	00db      	lsls	r3, r3, #3
 8004688:	4413      	add	r3, r2
 800468a:	791b      	ldrb	r3, [r3, #4]
 800468c:	75bb      	strb	r3, [r7, #22]
			Get_data_enable = True;
 800468e:	2301      	movs	r3, #1
 8004690:	757b      	strb	r3, [r7, #21]
			Times_ret=0;
 8004692:	2300      	movs	r3, #0
 8004694:	75fb      	strb	r3, [r7, #23]
			Data = (Data+1);
 8004696:	683b      	ldr	r3, [r7, #0]
 8004698:	3301      	adds	r3, #1
 800469a:	603b      	str	r3, [r7, #0]
			Error = False;
 800469c:	2300      	movs	r3, #0
 800469e:	753b      	strb	r3, [r7, #20]
 80046a0:	e005      	b.n	80046ae <process_Read_CMD+0x86>

		}
		else if( Get_data_enable == True)
 80046a2:	7d7b      	ldrb	r3, [r7, #21]
 80046a4:	2b01      	cmp	r3, #1
 80046a6:	d102      	bne.n	80046ae <process_Read_CMD+0x86>
		{
			Data = (Data+1);
 80046a8:	683b      	ldr	r3, [r7, #0]
 80046aa:	3301      	adds	r3, #1
 80046ac:	603b      	str	r3, [r7, #0]
	for (Times_ret = 0; Times_ret < Max_bytes_Data; Times_ret++)
 80046ae:	7dfb      	ldrb	r3, [r7, #23]
 80046b0:	3301      	adds	r3, #1
 80046b2:	75fb      	strb	r3, [r7, #23]
 80046b4:	7dfa      	ldrb	r2, [r7, #23]
 80046b6:	7dbb      	ldrb	r3, [r7, #22]
 80046b8:	429a      	cmp	r2, r3
 80046ba:	d3c8      	bcc.n	800464e <process_Read_CMD+0x26>

		}
	}

	if(Error == False) // check the command if the response is correct
 80046bc:	7d3b      	ldrb	r3, [r7, #20]
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d107      	bne.n	80046d2 <process_Read_CMD+0xaa>
	{
		Error = Response_process[Read_comand_Type].Proces_Resp_R1(initial_ptr);
 80046c2:	79fb      	ldrb	r3, [r7, #7]
 80046c4:	4a0a      	ldr	r2, [pc, #40]	; (80046f0 <process_Read_CMD+0xc8>)
 80046c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80046ca:	6938      	ldr	r0, [r7, #16]
 80046cc:	4798      	blx	r3
 80046ce:	4603      	mov	r3, r0
 80046d0:	753b      	strb	r3, [r7, #20]
	}

	HAL_GPIO_WritePin(CS_SD_GPIO_Port, CS_SD_Pin, GPIO_PIN_SET);
 80046d2:	2201      	movs	r2, #1
 80046d4:	2104      	movs	r1, #4
 80046d6:	4807      	ldr	r0, [pc, #28]	; (80046f4 <process_Read_CMD+0xcc>)
 80046d8:	f7fd fa2e 	bl	8001b38 <HAL_GPIO_WritePin>

	return Error;
 80046dc:	7d3b      	ldrb	r3, [r7, #20]
}
 80046de:	4618      	mov	r0, r3
 80046e0:	3718      	adds	r7, #24
 80046e2:	46bd      	mov	sp, r7
 80046e4:	bd80      	pop	{r7, pc}
 80046e6:	bf00      	nop
 80046e8:	200008d8 	.word	0x200008d8
 80046ec:	200000e4 	.word	0x200000e4
 80046f0:	20000104 	.word	0x20000104
 80046f4:	40020000 	.word	0x40020000

080046f8 <Proces_Resp_R1>:


//process to read RESP
static uint8_t Proces_Resp_R1(uint8_t *Data_proc)
{
 80046f8:	b480      	push	{r7}
 80046fa:	b085      	sub	sp, #20
 80046fc:	af00      	add	r7, sp, #0
 80046fe:	6078      	str	r0, [r7, #4]
	uint8_t Error = False;
 8004700:	2300      	movs	r3, #0
 8004702:	73fb      	strb	r3, [r7, #15]
	strc_R1_Resp *point_R1 = (strc_R1_Resp*)Data_proc;
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	60bb      	str	r3, [r7, #8]
	if( point_R1->Ileg_cmd || point_R1->cm_crc_err ||
 8004708:	68bb      	ldr	r3, [r7, #8]
 800470a:	781b      	ldrb	r3, [r3, #0]
 800470c:	f003 0304 	and.w	r3, r3, #4
 8004710:	b2db      	uxtb	r3, r3
 8004712:	2b00      	cmp	r3, #0
 8004714:	d11b      	bne.n	800474e <Proces_Resp_R1+0x56>
 8004716:	68bb      	ldr	r3, [r7, #8]
 8004718:	781b      	ldrb	r3, [r3, #0]
 800471a:	f003 0308 	and.w	r3, r3, #8
 800471e:	b2db      	uxtb	r3, r3
 8004720:	2b00      	cmp	r3, #0
 8004722:	d114      	bne.n	800474e <Proces_Resp_R1+0x56>
 8004724:	68bb      	ldr	r3, [r7, #8]
 8004726:	781b      	ldrb	r3, [r3, #0]
 8004728:	f003 0310 	and.w	r3, r3, #16
 800472c:	b2db      	uxtb	r3, r3
 800472e:	2b00      	cmp	r3, #0
 8004730:	d10d      	bne.n	800474e <Proces_Resp_R1+0x56>
			point_R1->eras_seq_err || point_R1->addr_err || point_R1->parm_err)
 8004732:	68bb      	ldr	r3, [r7, #8]
 8004734:	781b      	ldrb	r3, [r3, #0]
 8004736:	f003 0320 	and.w	r3, r3, #32
 800473a:	b2db      	uxtb	r3, r3
 800473c:	2b00      	cmp	r3, #0
 800473e:	d106      	bne.n	800474e <Proces_Resp_R1+0x56>
 8004740:	68bb      	ldr	r3, [r7, #8]
 8004742:	781b      	ldrb	r3, [r3, #0]
 8004744:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004748:	b2db      	uxtb	r3, r3
 800474a:	2b00      	cmp	r3, #0
 800474c:	d001      	beq.n	8004752 <Proces_Resp_R1+0x5a>
	{
		Error = True;
 800474e:	2301      	movs	r3, #1
 8004750:	73fb      	strb	r3, [r7, #15]
	}
	Res_R1 = *point_R1;
 8004752:	4a05      	ldr	r2, [pc, #20]	; (8004768 <Proces_Resp_R1+0x70>)
 8004754:	68bb      	ldr	r3, [r7, #8]
 8004756:	781b      	ldrb	r3, [r3, #0]
 8004758:	7013      	strb	r3, [r2, #0]
	return Error;
 800475a:	7bfb      	ldrb	r3, [r7, #15]
}
 800475c:	4618      	mov	r0, r3
 800475e:	3714      	adds	r7, #20
 8004760:	46bd      	mov	sp, r7
 8004762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004766:	4770      	bx	lr
 8004768:	20000930 	.word	0x20000930

0800476c <Proces_Resp_R2>:

static uint8_t Proces_Resp_R2(uint8_t *Data_proc)
{
 800476c:	b580      	push	{r7, lr}
 800476e:	b086      	sub	sp, #24
 8004770:	af00      	add	r7, sp, #0
 8004772:	6078      	str	r0, [r7, #4]
	uint8_t Error = False;
 8004774:	2300      	movs	r3, #0
 8004776:	75fb      	strb	r3, [r7, #23]
	strc_R2_Resp  *R2_procc = (strc_R2_Resp*)(Data_proc);
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	613b      	str	r3, [r7, #16]
	strc_R1_Resp  *R1_procc =  &R2_procc->Resp_R1_BLOCK;
 800477c:	693b      	ldr	r3, [r7, #16]
 800477e:	3301      	adds	r3, #1
 8004780:	60fb      	str	r3, [r7, #12]

	Error = Proces_Resp_R1( (uint8_t*)(R1_procc) );
 8004782:	68f8      	ldr	r0, [r7, #12]
 8004784:	f7ff ffb8 	bl	80046f8 <Proces_Resp_R1>
 8004788:	4603      	mov	r3, r0
 800478a:	75fb      	strb	r3, [r7, #23]
	if( Error == False)
 800478c:	7dfb      	ldrb	r3, [r7, #23]
 800478e:	2b00      	cmp	r3, #0
 8004790:	d124      	bne.n	80047dc <Proces_Resp_R2+0x70>
	{
		if( R2_procc->error || R2_procc->CC_error || R2_procc->card_ecc_f ||
 8004792:	693b      	ldr	r3, [r7, #16]
 8004794:	781b      	ldrb	r3, [r3, #0]
 8004796:	f003 0304 	and.w	r3, r3, #4
 800479a:	b2db      	uxtb	r3, r3
 800479c:	2b00      	cmp	r3, #0
 800479e:	d11b      	bne.n	80047d8 <Proces_Resp_R2+0x6c>
 80047a0:	693b      	ldr	r3, [r7, #16]
 80047a2:	781b      	ldrb	r3, [r3, #0]
 80047a4:	f003 0308 	and.w	r3, r3, #8
 80047a8:	b2db      	uxtb	r3, r3
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d114      	bne.n	80047d8 <Proces_Resp_R2+0x6c>
 80047ae:	693b      	ldr	r3, [r7, #16]
 80047b0:	781b      	ldrb	r3, [r3, #0]
 80047b2:	f003 0310 	and.w	r3, r3, #16
 80047b6:	b2db      	uxtb	r3, r3
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d10d      	bne.n	80047d8 <Proces_Resp_R2+0x6c>
 80047bc:	693b      	ldr	r3, [r7, #16]
 80047be:	781b      	ldrb	r3, [r3, #0]
 80047c0:	f003 0320 	and.w	r3, r3, #32
 80047c4:	b2db      	uxtb	r3, r3
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d106      	bne.n	80047d8 <Proces_Resp_R2+0x6c>
				R2_procc->wp_violat || R2_procc->out_tange)
 80047ca:	693b      	ldr	r3, [r7, #16]
 80047cc:	781b      	ldrb	r3, [r3, #0]
 80047ce:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80047d2:	b2db      	uxtb	r3, r3
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d001      	beq.n	80047dc <Proces_Resp_R2+0x70>
		{
			Error = True;
 80047d8:	2301      	movs	r3, #1
 80047da:	75fb      	strb	r3, [r7, #23]
		}
	}

	Res_R2 = *R2_procc;
 80047dc:	4a04      	ldr	r2, [pc, #16]	; (80047f0 <Proces_Resp_R2+0x84>)
 80047de:	693b      	ldr	r3, [r7, #16]
 80047e0:	881b      	ldrh	r3, [r3, #0]
 80047e2:	8013      	strh	r3, [r2, #0]
	return Error;
 80047e4:	7dfb      	ldrb	r3, [r7, #23]
}
 80047e6:	4618      	mov	r0, r3
 80047e8:	3718      	adds	r7, #24
 80047ea:	46bd      	mov	sp, r7
 80047ec:	bd80      	pop	{r7, pc}
 80047ee:	bf00      	nop
 80047f0:	20000934 	.word	0x20000934

080047f4 <Proces_Resp_R3>:

static uint8_t Proces_Resp_R3(uint8_t *Data_proc)
{
 80047f4:	b580      	push	{r7, lr}
 80047f6:	b084      	sub	sp, #16
 80047f8:	af00      	add	r7, sp, #0
 80047fa:	6078      	str	r0, [r7, #4]
	uint8_t Error = False;
 80047fc:	2300      	movs	r3, #0
 80047fe:	73fb      	strb	r3, [r7, #15]
	strc_R1_Resp *R1_Stand =  (strc_R1_Resp*)(Data_proc);
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	60bb      	str	r3, [r7, #8]
	Error = Proces_Resp_R1( (uint8_t*)(R1_Stand) );
 8004804:	68b8      	ldr	r0, [r7, #8]
 8004806:	f7ff ff77 	bl	80046f8 <Proces_Resp_R1>
 800480a:	4603      	mov	r3, r0
 800480c:	73fb      	strb	r3, [r7, #15]
	Res_R3.R1_Resp = *R1_Stand;
 800480e:	4a10      	ldr	r2, [pc, #64]	; (8004850 <Proces_Resp_R3+0x5c>)
 8004810:	68bb      	ldr	r3, [r7, #8]
 8004812:	781b      	ldrb	r3, [r3, #0]
 8004814:	7113      	strb	r3, [r2, #4]
	if(Error == False)
 8004816:	7bfb      	ldrb	r3, [r7, #15]
 8004818:	2b00      	cmp	r3, #0
 800481a:	d114      	bne.n	8004846 <Proces_Resp_R3+0x52>
	{
		Res_R3.OCR = ( ( *(Data_proc + 1)<< 24) | (*(Data_proc+2)<< 16) | (*(Data_proc + 3)<< 8) | (*(Data_proc + 4)) );
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	3301      	adds	r3, #1
 8004820:	781b      	ldrb	r3, [r3, #0]
 8004822:	061a      	lsls	r2, r3, #24
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	3302      	adds	r3, #2
 8004828:	781b      	ldrb	r3, [r3, #0]
 800482a:	041b      	lsls	r3, r3, #16
 800482c:	431a      	orrs	r2, r3
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	3303      	adds	r3, #3
 8004832:	781b      	ldrb	r3, [r3, #0]
 8004834:	021b      	lsls	r3, r3, #8
 8004836:	4313      	orrs	r3, r2
 8004838:	687a      	ldr	r2, [r7, #4]
 800483a:	3204      	adds	r2, #4
 800483c:	7812      	ldrb	r2, [r2, #0]
 800483e:	4313      	orrs	r3, r2
 8004840:	461a      	mov	r2, r3
 8004842:	4b03      	ldr	r3, [pc, #12]	; (8004850 <Proces_Resp_R3+0x5c>)
 8004844:	601a      	str	r2, [r3, #0]
	}

	return Error;
 8004846:	7bfb      	ldrb	r3, [r7, #15]
}
 8004848:	4618      	mov	r0, r3
 800484a:	3710      	adds	r7, #16
 800484c:	46bd      	mov	sp, r7
 800484e:	bd80      	pop	{r7, pc}
 8004850:	20000938 	.word	0x20000938

08004854 <Proces_Resp_R7>:

static uint8_t Proces_Resp_R7(uint8_t *Data_proc)
{
 8004854:	b580      	push	{r7, lr}
 8004856:	b084      	sub	sp, #16
 8004858:	af00      	add	r7, sp, #0
 800485a:	6078      	str	r0, [r7, #4]
	uint8_t Error = False;
 800485c:	2300      	movs	r3, #0
 800485e:	73fb      	strb	r3, [r7, #15]
	strc_R1_Resp  *R1_procc =  (strc_R1_Resp*)(Data_proc);
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	60bb      	str	r3, [r7, #8]


	Error = Proces_Resp_R1( (uint8_t*)(R1_procc) );
 8004864:	68b8      	ldr	r0, [r7, #8]
 8004866:	f7ff ff47 	bl	80046f8 <Proces_Resp_R1>
 800486a:	4603      	mov	r3, r0
 800486c:	73fb      	strb	r3, [r7, #15]

	if(Error == False)
 800486e:	7bfb      	ldrb	r3, [r7, #15]
 8004870:	2b00      	cmp	r3, #0
 8004872:	d136      	bne.n	80048e2 <Proces_Resp_R7+0x8e>
	{
		Res_R7.R1_Resp_R7 =  *R1_procc;
 8004874:	4a1d      	ldr	r2, [pc, #116]	; (80048ec <Proces_Resp_R7+0x98>)
 8004876:	68bb      	ldr	r3, [r7, #8]
 8004878:	781b      	ldrb	r3, [r3, #0]
 800487a:	7013      	strb	r3, [r2, #0]
		Res_R7.cmd_vers = ( (*(Data_proc + 1) & 0xF0)>>4);
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	3301      	adds	r3, #1
 8004880:	781b      	ldrb	r3, [r3, #0]
 8004882:	091b      	lsrs	r3, r3, #4
 8004884:	b2db      	uxtb	r3, r3
 8004886:	f003 030f 	and.w	r3, r3, #15
 800488a:	b2d9      	uxtb	r1, r3
 800488c:	4a17      	ldr	r2, [pc, #92]	; (80048ec <Proces_Resp_R7+0x98>)
 800488e:	7853      	ldrb	r3, [r2, #1]
 8004890:	f361 0303 	bfi	r3, r1, #0, #4
 8004894:	7053      	strb	r3, [r2, #1]
		Res_R7.reserv_bits = (  ((*(Data_proc + 1) & 0x0F) <<12) | (*(Data_proc + 2)<< 4 ) | ( (*(Data_proc + 3) & 0xF0)>>4 ) );
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	3301      	adds	r3, #1
 800489a:	781b      	ldrb	r3, [r3, #0]
 800489c:	031b      	lsls	r3, r3, #12
 800489e:	b21a      	sxth	r2, r3
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	3302      	adds	r3, #2
 80048a4:	781b      	ldrb	r3, [r3, #0]
 80048a6:	011b      	lsls	r3, r3, #4
 80048a8:	b21b      	sxth	r3, r3
 80048aa:	4313      	orrs	r3, r2
 80048ac:	b21a      	sxth	r2, r3
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	3303      	adds	r3, #3
 80048b2:	781b      	ldrb	r3, [r3, #0]
 80048b4:	091b      	lsrs	r3, r3, #4
 80048b6:	b2db      	uxtb	r3, r3
 80048b8:	b21b      	sxth	r3, r3
 80048ba:	4313      	orrs	r3, r2
 80048bc:	b21b      	sxth	r3, r3
 80048be:	b29a      	uxth	r2, r3
 80048c0:	4b0a      	ldr	r3, [pc, #40]	; (80048ec <Proces_Resp_R7+0x98>)
 80048c2:	805a      	strh	r2, [r3, #2]
		Res_R7.vltg_accep = (*(Data_proc + 3) & 0x0F);
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	3303      	adds	r3, #3
 80048c8:	781b      	ldrb	r3, [r3, #0]
 80048ca:	f003 030f 	and.w	r3, r3, #15
 80048ce:	b2d9      	uxtb	r1, r3
 80048d0:	4a06      	ldr	r2, [pc, #24]	; (80048ec <Proces_Resp_R7+0x98>)
 80048d2:	7913      	ldrb	r3, [r2, #4]
 80048d4:	f361 0303 	bfi	r3, r1, #0, #4
 80048d8:	7113      	strb	r3, [r2, #4]
		Res_R7.check_patt = (*(Data_proc + 4));
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	791a      	ldrb	r2, [r3, #4]
 80048de:	4b03      	ldr	r3, [pc, #12]	; (80048ec <Proces_Resp_R7+0x98>)
 80048e0:	715a      	strb	r2, [r3, #5]
	}

	return Error;
 80048e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80048e4:	4618      	mov	r0, r3
 80048e6:	3710      	adds	r7, #16
 80048e8:	46bd      	mov	sp, r7
 80048ea:	bd80      	pop	{r7, pc}
 80048ec:	20000940 	.word	0x20000940

080048f0 <Read_Block>:

	return Error;
}

extern uint8_t Read_Block(uint32_t set_block, uint32_t lenght, uint8_t *buffer)
{
 80048f0:	b580      	push	{r7, lr}
 80048f2:	b08a      	sub	sp, #40	; 0x28
 80048f4:	af02      	add	r7, sp, #8
 80048f6:	60f8      	str	r0, [r7, #12]
 80048f8:	60b9      	str	r1, [r7, #8]
 80048fa:	607a      	str	r2, [r7, #4]
	uint8_t Error = True;
 80048fc:	2301      	movs	r3, #1
 80048fe:	77fb      	strb	r3, [r7, #31]
	uint32_t Index_Data = 0;
 8004900:	2300      	movs	r3, #0
 8004902:	61bb      	str	r3, [r7, #24]
	uint8_t stuuf_ones = 0xFF;
 8004904:	23ff      	movs	r3, #255	; 0xff
 8004906:	75bb      	strb	r3, [r7, #22]
	uint8_t ReadData_recived = False;
 8004908:	2300      	movs	r3, #0
 800490a:	75fb      	strb	r3, [r7, #23]

	//limit of size block
	if(lenght <= SD_MAX_BLOCK_LENGHT )
 800490c:	68bb      	ldr	r3, [r7, #8]
 800490e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004912:	d20b      	bcs.n	800492c <Read_Block+0x3c>
	{
		Error = process_Send_CMD(16,False,(Fix_Data_CMD(lenght) ) );
 8004914:	68b8      	ldr	r0, [r7, #8]
 8004916:	f7ff fd0b 	bl	8004330 <Fix_Data_CMD>
 800491a:	4603      	mov	r3, r0
 800491c:	461a      	mov	r2, r3
 800491e:	2100      	movs	r1, #0
 8004920:	2010      	movs	r0, #16
 8004922:	f7ff fda5 	bl	8004470 <process_Send_CMD>
 8004926:	4603      	mov	r3, r0
 8004928:	77fb      	strb	r3, [r7, #31]
 800492a:	e001      	b.n	8004930 <Read_Block+0x40>
	}
	else
	{
		Error = True;
 800492c:	2301      	movs	r3, #1
 800492e:	77fb      	strb	r3, [r7, #31]
	}

	if(!Error)
 8004930:	7ffb      	ldrb	r3, [r7, #31]
 8004932:	2b00      	cmp	r3, #0
 8004934:	d144      	bne.n	80049c0 <Read_Block+0xd0>
	{
		Error = process_Send_CMD(17,False, Fix_Data_CMD(set_block) );
 8004936:	68f8      	ldr	r0, [r7, #12]
 8004938:	f7ff fcfa 	bl	8004330 <Fix_Data_CMD>
 800493c:	4603      	mov	r3, r0
 800493e:	461a      	mov	r2, r3
 8004940:	2100      	movs	r1, #0
 8004942:	2011      	movs	r0, #17
 8004944:	f7ff fd94 	bl	8004470 <process_Send_CMD>
 8004948:	4603      	mov	r3, r0
 800494a:	77fb      	strb	r3, [r7, #31]

		if(!Error)
 800494c:	7ffb      	ldrb	r3, [r7, #31]
 800494e:	2b00      	cmp	r3, #0
 8004950:	d136      	bne.n	80049c0 <Read_Block+0xd0>
		{
			active_Spi_CS();
 8004952:	f7ff fcd5 	bl	8004300 <active_Spi_CS>
			//read the stuf bits
			while(ReadData_recived == False)
 8004956:	e016      	b.n	8004986 <Read_Block+0x96>
			{
				HAL_SPI_TransmitReceive(&hspi_SD, &stuuf_ones, (buffer), 1, 5);
 8004958:	f107 0116 	add.w	r1, r7, #22
 800495c:	2305      	movs	r3, #5
 800495e:	9300      	str	r3, [sp, #0]
 8004960:	2301      	movs	r3, #1
 8004962:	687a      	ldr	r2, [r7, #4]
 8004964:	4819      	ldr	r0, [pc, #100]	; (80049cc <Read_Block+0xdc>)
 8004966:	f7fe fede 	bl	8003726 <HAL_SPI_TransmitReceive>

				//is received the start byte or the maximum wait of data is reached
				if( ((*buffer & 0x01) == 0x00) ||  Index_Data > 150)
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	781b      	ldrb	r3, [r3, #0]
 800496e:	f003 0301 	and.w	r3, r3, #1
 8004972:	2b00      	cmp	r3, #0
 8004974:	d002      	beq.n	800497c <Read_Block+0x8c>
 8004976:	69bb      	ldr	r3, [r7, #24]
 8004978:	2b96      	cmp	r3, #150	; 0x96
 800497a:	d901      	bls.n	8004980 <Read_Block+0x90>
				{
					ReadData_recived = True;
 800497c:	2301      	movs	r3, #1
 800497e:	75fb      	strb	r3, [r7, #23]
				}

				Index_Data++;
 8004980:	69bb      	ldr	r3, [r7, #24]
 8004982:	3301      	adds	r3, #1
 8004984:	61bb      	str	r3, [r7, #24]
			while(ReadData_recived == False)
 8004986:	7dfb      	ldrb	r3, [r7, #23]
 8004988:	2b00      	cmp	r3, #0
 800498a:	d0e5      	beq.n	8004958 <Read_Block+0x68>
			}

			//increment the length because we need read the CRC
			lenght +=1;
 800498c:	68bb      	ldr	r3, [r7, #8]
 800498e:	3301      	adds	r3, #1
 8004990:	60bb      	str	r3, [r7, #8]

			for ( Index_Data = 0; Index_Data <= lenght; Index_Data++)
 8004992:	2300      	movs	r3, #0
 8004994:	61bb      	str	r3, [r7, #24]
 8004996:	e00d      	b.n	80049b4 <Read_Block+0xc4>
			{
				HAL_SPI_TransmitReceive(&hspi_SD, &stuuf_ones, (buffer + Index_Data), 1, 10);
 8004998:	687a      	ldr	r2, [r7, #4]
 800499a:	69bb      	ldr	r3, [r7, #24]
 800499c:	441a      	add	r2, r3
 800499e:	f107 0116 	add.w	r1, r7, #22
 80049a2:	230a      	movs	r3, #10
 80049a4:	9300      	str	r3, [sp, #0]
 80049a6:	2301      	movs	r3, #1
 80049a8:	4808      	ldr	r0, [pc, #32]	; (80049cc <Read_Block+0xdc>)
 80049aa:	f7fe febc 	bl	8003726 <HAL_SPI_TransmitReceive>
			for ( Index_Data = 0; Index_Data <= lenght; Index_Data++)
 80049ae:	69bb      	ldr	r3, [r7, #24]
 80049b0:	3301      	adds	r3, #1
 80049b2:	61bb      	str	r3, [r7, #24]
 80049b4:	69ba      	ldr	r2, [r7, #24]
 80049b6:	68bb      	ldr	r3, [r7, #8]
 80049b8:	429a      	cmp	r2, r3
 80049ba:	d9ed      	bls.n	8004998 <Read_Block+0xa8>
			}

			deactive_Spi_CS();
 80049bc:	f7ff fcac 	bl	8004318 <deactive_Spi_CS>
		}
	}
	return Error;
 80049c0:	7ffb      	ldrb	r3, [r7, #31]
}
 80049c2:	4618      	mov	r0, r3
 80049c4:	3720      	adds	r7, #32
 80049c6:	46bd      	mov	sp, r7
 80049c8:	bd80      	pop	{r7, pc}
 80049ca:	bf00      	nop
 80049cc:	200008d8 	.word	0x200008d8

080049d0 <Get_initial_block>:

//Read the MBR_AND_START_UP
extern uint8_t Get_initial_block(void)
{
 80049d0:	b580      	push	{r7, lr}
 80049d2:	b082      	sub	sp, #8
 80049d4:	af00      	add	r7, sp, #0
	uint8_t index;

	SD_Device.State_Error_Actual = Read_Block(SD_BLOCK_BOOT,SD_MAX_BLOCK_LENGHT,SD_Device.Block_Read_last);
 80049d6:	4a18      	ldr	r2, [pc, #96]	; (8004a38 <Get_initial_block+0x68>)
 80049d8:	f240 11ff 	movw	r1, #511	; 0x1ff
 80049dc:	2000      	movs	r0, #0
 80049de:	f7ff ff87 	bl	80048f0 <Read_Block>
 80049e2:	4603      	mov	r3, r0
 80049e4:	461a      	mov	r2, r3
 80049e6:	4b15      	ldr	r3, [pc, #84]	; (8004a3c <Get_initial_block+0x6c>)
 80049e8:	705a      	strb	r2, [r3, #1]

	if( SD_Device.State_Error_Actual !=  ACTIVE_ERROR)
 80049ea:	4b14      	ldr	r3, [pc, #80]	; (8004a3c <Get_initial_block+0x6c>)
 80049ec:	785b      	ldrb	r3, [r3, #1]
 80049ee:	2b01      	cmp	r3, #1
 80049f0:	d01c      	beq.n	8004a2c <Get_initial_block+0x5c>
	{
		for (index = 0; index < 2; index++)
 80049f2:	2300      	movs	r3, #0
 80049f4:	71fb      	strb	r3, [r7, #7]
 80049f6:	e016      	b.n	8004a26 <Get_initial_block+0x56>
		{
			SD_Device.Adress_Partition |= (SD_Device.Block_Read_last[ SD_INIT_ADDRE_BIOS + index ]) << (index * BYTE_SIZE );
 80049f8:	4b10      	ldr	r3, [pc, #64]	; (8004a3c <Get_initial_block+0x6c>)
 80049fa:	885b      	ldrh	r3, [r3, #2]
 80049fc:	b21a      	sxth	r2, r3
 80049fe:	79fb      	ldrb	r3, [r7, #7]
 8004a00:	f503 73e3 	add.w	r3, r3, #454	; 0x1c6
 8004a04:	490d      	ldr	r1, [pc, #52]	; (8004a3c <Get_initial_block+0x6c>)
 8004a06:	440b      	add	r3, r1
 8004a08:	7a1b      	ldrb	r3, [r3, #8]
 8004a0a:	4619      	mov	r1, r3
 8004a0c:	79fb      	ldrb	r3, [r7, #7]
 8004a0e:	00db      	lsls	r3, r3, #3
 8004a10:	fa01 f303 	lsl.w	r3, r1, r3
 8004a14:	b21b      	sxth	r3, r3
 8004a16:	4313      	orrs	r3, r2
 8004a18:	b21b      	sxth	r3, r3
 8004a1a:	b29a      	uxth	r2, r3
 8004a1c:	4b07      	ldr	r3, [pc, #28]	; (8004a3c <Get_initial_block+0x6c>)
 8004a1e:	805a      	strh	r2, [r3, #2]
		for (index = 0; index < 2; index++)
 8004a20:	79fb      	ldrb	r3, [r7, #7]
 8004a22:	3301      	adds	r3, #1
 8004a24:	71fb      	strb	r3, [r7, #7]
 8004a26:	79fb      	ldrb	r3, [r7, #7]
 8004a28:	2b01      	cmp	r3, #1
 8004a2a:	d9e5      	bls.n	80049f8 <Get_initial_block+0x28>
		}
	}

	return SD_Device.State_Error_Actual;
 8004a2c:	4b03      	ldr	r3, [pc, #12]	; (8004a3c <Get_initial_block+0x6c>)
 8004a2e:	785b      	ldrb	r3, [r3, #1]
}
 8004a30:	4618      	mov	r0, r3
 8004a32:	3708      	adds	r7, #8
 8004a34:	46bd      	mov	sp, r7
 8004a36:	bd80      	pop	{r7, pc}
 8004a38:	20000950 	.word	0x20000950
 8004a3c:	20000948 	.word	0x20000948

08004a40 <Get_Block_Data>:
  * @brief  Set the Data were is the table of documents in the SD (implementation is only for fat32).
  * @retval State of the process (error true) (no error false).
  * @info	check the data sheet to see how get the index.
  */
extern uint8_t Get_Block_Data(void)
{
 8004a40:	b580      	push	{r7, lr}
 8004a42:	b084      	sub	sp, #16
 8004a44:	af00      	add	r7, sp, #0
	uint8_t index ;
	uint8_t BPB_NumFATs;
	uint32_t BPB_FATSz32 = 0;
 8004a46:	2300      	movs	r3, #0
 8004a48:	60bb      	str	r3, [r7, #8]
	uint16_t BPB_ResvSecCnt = 0;
 8004a4a:	2300      	movs	r3, #0
 8004a4c:	80fb      	strh	r3, [r7, #6]

	Get_initial_block();
 8004a4e:	f7ff ffbf 	bl	80049d0 <Get_initial_block>

	if( (SD_Device.State_Error_Actual !=  ACTIVE_ERROR) && (SD_Device.Adress_Partition != 0))
 8004a52:	4b3a      	ldr	r3, [pc, #232]	; (8004b3c <Get_Block_Data+0xfc>)
 8004a54:	785b      	ldrb	r3, [r3, #1]
 8004a56:	2b01      	cmp	r3, #1
 8004a58:	d06a      	beq.n	8004b30 <Get_Block_Data+0xf0>
 8004a5a:	4b38      	ldr	r3, [pc, #224]	; (8004b3c <Get_Block_Data+0xfc>)
 8004a5c:	885b      	ldrh	r3, [r3, #2]
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d066      	beq.n	8004b30 <Get_Block_Data+0xf0>
	{
		/*Read the block of 1st address partition, only we can read the 1st partition*/
		SD_Device.State_Error_Actual = Read_Block( (uint32_t)SD_Device.Adress_Partition,
 8004a62:	4b36      	ldr	r3, [pc, #216]	; (8004b3c <Get_Block_Data+0xfc>)
 8004a64:	885b      	ldrh	r3, [r3, #2]
 8004a66:	4a36      	ldr	r2, [pc, #216]	; (8004b40 <Get_Block_Data+0x100>)
 8004a68:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004a6c:	4618      	mov	r0, r3
 8004a6e:	f7ff ff3f 	bl	80048f0 <Read_Block>
 8004a72:	4603      	mov	r3, r0
 8004a74:	461a      	mov	r2, r3
 8004a76:	4b31      	ldr	r3, [pc, #196]	; (8004b3c <Get_Block_Data+0xfc>)
 8004a78:	705a      	strb	r2, [r3, #1]
												   SD_MAX_BLOCK_LENGHT,
												  (SD_Device.Block_Read_last) );
		/*Get the BPB_FATSz32*/
		for (index = 0; index < 4; index++)
 8004a7a:	2300      	movs	r3, #0
 8004a7c:	73fb      	strb	r3, [r7, #15]
 8004a7e:	e013      	b.n	8004aa8 <Get_Block_Data+0x68>
		{
			BPB_FATSz32 |= ( (SD_Device.Block_Read_last[36 + index]) << (index * BYTE_SIZE) );
 8004a80:	7bfb      	ldrb	r3, [r7, #15]
 8004a82:	3324      	adds	r3, #36	; 0x24
 8004a84:	4a2d      	ldr	r2, [pc, #180]	; (8004b3c <Get_Block_Data+0xfc>)
 8004a86:	4413      	add	r3, r2
 8004a88:	7a1b      	ldrb	r3, [r3, #8]
 8004a8a:	461a      	mov	r2, r3
 8004a8c:	7bfb      	ldrb	r3, [r7, #15]
 8004a8e:	00db      	lsls	r3, r3, #3
 8004a90:	fa02 f303 	lsl.w	r3, r2, r3
 8004a94:	461a      	mov	r2, r3
 8004a96:	68bb      	ldr	r3, [r7, #8]
 8004a98:	4313      	orrs	r3, r2
 8004a9a:	60bb      	str	r3, [r7, #8]
			SD_Variables.BPB_FATSz32 = BPB_FATSz32;
 8004a9c:	4a29      	ldr	r2, [pc, #164]	; (8004b44 <Get_Block_Data+0x104>)
 8004a9e:	68bb      	ldr	r3, [r7, #8]
 8004aa0:	6093      	str	r3, [r2, #8]
		for (index = 0; index < 4; index++)
 8004aa2:	7bfb      	ldrb	r3, [r7, #15]
 8004aa4:	3301      	adds	r3, #1
 8004aa6:	73fb      	strb	r3, [r7, #15]
 8004aa8:	7bfb      	ldrb	r3, [r7, #15]
 8004aaa:	2b03      	cmp	r3, #3
 8004aac:	d9e8      	bls.n	8004a80 <Get_Block_Data+0x40>

		}

		/*Get the BPB_ResvSecCnt*/
		for (index = 0; index < 2; index++)
 8004aae:	2300      	movs	r3, #0
 8004ab0:	73fb      	strb	r3, [r7, #15]
 8004ab2:	e015      	b.n	8004ae0 <Get_Block_Data+0xa0>
		{
			BPB_ResvSecCnt |= ( (SD_Device.Block_Read_last[14 + index]) << (index * BYTE_SIZE) );
 8004ab4:	7bfb      	ldrb	r3, [r7, #15]
 8004ab6:	330e      	adds	r3, #14
 8004ab8:	4a20      	ldr	r2, [pc, #128]	; (8004b3c <Get_Block_Data+0xfc>)
 8004aba:	4413      	add	r3, r2
 8004abc:	7a1b      	ldrb	r3, [r3, #8]
 8004abe:	461a      	mov	r2, r3
 8004ac0:	7bfb      	ldrb	r3, [r7, #15]
 8004ac2:	00db      	lsls	r3, r3, #3
 8004ac4:	fa02 f303 	lsl.w	r3, r2, r3
 8004ac8:	b21a      	sxth	r2, r3
 8004aca:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004ace:	4313      	orrs	r3, r2
 8004ad0:	b21b      	sxth	r3, r3
 8004ad2:	80fb      	strh	r3, [r7, #6]
			SD_Variables.BPB_ResvdSecCnt = BPB_ResvSecCnt;
 8004ad4:	4a1b      	ldr	r2, [pc, #108]	; (8004b44 <Get_Block_Data+0x104>)
 8004ad6:	88fb      	ldrh	r3, [r7, #6]
 8004ad8:	8093      	strh	r3, [r2, #4]
		for (index = 0; index < 2; index++)
 8004ada:	7bfb      	ldrb	r3, [r7, #15]
 8004adc:	3301      	adds	r3, #1
 8004ade:	73fb      	strb	r3, [r7, #15]
 8004ae0:	7bfb      	ldrb	r3, [r7, #15]
 8004ae2:	2b01      	cmp	r3, #1
 8004ae4:	d9e6      	bls.n	8004ab4 <Get_Block_Data+0x74>
		}

		/*Get the BPB_NumFATs*/
		BPB_NumFATs = SD_Device.Block_Read_last[16];
 8004ae6:	4b15      	ldr	r3, [pc, #84]	; (8004b3c <Get_Block_Data+0xfc>)
 8004ae8:	7e1b      	ldrb	r3, [r3, #24]
 8004aea:	717b      	strb	r3, [r7, #5]
		SD_Variables.BPB_NumFATs = BPB_NumFATs;
 8004aec:	4a15      	ldr	r2, [pc, #84]	; (8004b44 <Get_Block_Data+0x104>)
 8004aee:	797b      	ldrb	r3, [r7, #5]
 8004af0:	7193      	strb	r3, [r2, #6]

		/*Get the BPB_SecPerClus*/
		SD_Variables.BPB_SecPerClus = SD_Device.Block_Read_last[13];
 8004af2:	4b12      	ldr	r3, [pc, #72]	; (8004b3c <Get_Block_Data+0xfc>)
 8004af4:	7d5a      	ldrb	r2, [r3, #21]
 8004af6:	4b13      	ldr	r3, [pc, #76]	; (8004b44 <Get_Block_Data+0x104>)
 8004af8:	731a      	strb	r2, [r3, #12]

		SD_Device.Sector_Files = BPB_ResvSecCnt + (BPB_NumFATs * BPB_FATSz32) + SD_Device.Adress_Partition;
 8004afa:	88fa      	ldrh	r2, [r7, #6]
 8004afc:	797b      	ldrb	r3, [r7, #5]
 8004afe:	68b9      	ldr	r1, [r7, #8]
 8004b00:	fb01 f303 	mul.w	r3, r1, r3
 8004b04:	4413      	add	r3, r2
 8004b06:	4a0d      	ldr	r2, [pc, #52]	; (8004b3c <Get_Block_Data+0xfc>)
 8004b08:	8852      	ldrh	r2, [r2, #2]
 8004b0a:	4413      	add	r3, r2
 8004b0c:	4a0b      	ldr	r2, [pc, #44]	; (8004b3c <Get_Block_Data+0xfc>)
 8004b0e:	6053      	str	r3, [r2, #4]
		SD_Variables.Sector = SD_Device.Sector_Files;
 8004b10:	4b0a      	ldr	r3, [pc, #40]	; (8004b3c <Get_Block_Data+0xfc>)
 8004b12:	685b      	ldr	r3, [r3, #4]
 8004b14:	4a0b      	ldr	r2, [pc, #44]	; (8004b44 <Get_Block_Data+0x104>)
 8004b16:	6013      	str	r3, [r2, #0]


		SD_Device.State_Error_Actual = Read_Block( (uint32_t)SD_Device.Sector_Files,
 8004b18:	4b08      	ldr	r3, [pc, #32]	; (8004b3c <Get_Block_Data+0xfc>)
 8004b1a:	685b      	ldr	r3, [r3, #4]
 8004b1c:	4a08      	ldr	r2, [pc, #32]	; (8004b40 <Get_Block_Data+0x100>)
 8004b1e:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004b22:	4618      	mov	r0, r3
 8004b24:	f7ff fee4 	bl	80048f0 <Read_Block>
 8004b28:	4603      	mov	r3, r0
 8004b2a:	461a      	mov	r2, r3
 8004b2c:	4b03      	ldr	r3, [pc, #12]	; (8004b3c <Get_Block_Data+0xfc>)
 8004b2e:	705a      	strb	r2, [r3, #1]
														   SD_MAX_BLOCK_LENGHT,
														  (SD_Device.Block_Read_last) );
	}

	return SD_Device.State_Error_Actual;
 8004b30:	4b02      	ldr	r3, [pc, #8]	; (8004b3c <Get_Block_Data+0xfc>)
 8004b32:	785b      	ldrb	r3, [r3, #1]
}
 8004b34:	4618      	mov	r0, r3
 8004b36:	3710      	adds	r7, #16
 8004b38:	46bd      	mov	sp, r7
 8004b3a:	bd80      	pop	{r7, pc}
 8004b3c:	20000948 	.word	0x20000948
 8004b40:	20000950 	.word	0x20000950
 8004b44:	20000b60 	.word	0x20000b60

08004b48 <Select_File>:
  * @param  select what file need read.
  * @retval State of the process (error true) (no error false).
  * @info	check the data sheet how get the file
  */
uint8_t Select_File(uint8_t File_selected)
{
 8004b48:	b580      	push	{r7, lr}
 8004b4a:	b086      	sub	sp, #24
 8004b4c:	af00      	add	r7, sp, #0
 8004b4e:	4603      	mov	r3, r0
 8004b50:	71fb      	strb	r3, [r7, #7]
	uint16_t 	index_file = 0;
 8004b52:	2300      	movs	r3, #0
 8004b54:	82fb      	strh	r3, [r7, #22]
	uint8_t		File_exist = False;
 8004b56:	2300      	movs	r3, #0
 8004b58:	757b      	strb	r3, [r7, #21]
	uint32_t 	Addres_File = 0;
 8004b5a:	2300      	movs	r3, #0
 8004b5c:	60fb      	str	r3, [r7, #12]
	uint32_t 	Address_sector_Modify = SD_Device.Sector_Files;
 8004b5e:	4b53      	ldr	r3, [pc, #332]	; (8004cac <Select_File+0x164>)
 8004b60:	685b      	ldr	r3, [r3, #4]
 8004b62:	613b      	str	r3, [r7, #16]
	uint8_t		*Addres ;

	if(File_selected < SD_FILES_SELECT )
 8004b64:	79fb      	ldrb	r3, [r7, #7]
 8004b66:	2b01      	cmp	r3, #1
 8004b68:	d863      	bhi.n	8004c32 <Select_File+0xea>
	{
		while(index_file < SD_MAX_BLOCK_LENGHT)
 8004b6a:	e05c      	b.n	8004c26 <Select_File+0xde>
		{
			if(SD_Device.Block_Read_last[index_file] != SD_FILE_TYPE_EXTENDED)
 8004b6c:	8afb      	ldrh	r3, [r7, #22]
 8004b6e:	4a4f      	ldr	r2, [pc, #316]	; (8004cac <Select_File+0x164>)
 8004b70:	4413      	add	r3, r2
 8004b72:	7a1b      	ldrb	r3, [r3, #8]
 8004b74:	2b42      	cmp	r3, #66	; 0x42
 8004b76:	d035      	beq.n	8004be4 <Select_File+0x9c>
			{
				if( (SD_Device.Block_Read_last[index_file + SD_FILE_ATTRIB_BYTE] == SD_FILE_ATTR_ARCHIVE) &&
 8004b78:	8afb      	ldrh	r3, [r7, #22]
 8004b7a:	330b      	adds	r3, #11
 8004b7c:	4a4b      	ldr	r2, [pc, #300]	; (8004cac <Select_File+0x164>)
 8004b7e:	4413      	add	r3, r2
 8004b80:	7a1b      	ldrb	r3, [r3, #8]
 8004b82:	2b20      	cmp	r3, #32
 8004b84:	d11b      	bne.n	8004bbe <Select_File+0x76>
						(SD_Device.Block_Read_last[index_file ] != SD_FILE_ATTR_NO_FOUND) )
 8004b86:	8afb      	ldrh	r3, [r7, #22]
 8004b88:	4a48      	ldr	r2, [pc, #288]	; (8004cac <Select_File+0x164>)
 8004b8a:	4413      	add	r3, r2
 8004b8c:	7a1b      	ldrb	r3, [r3, #8]
				if( (SD_Device.Block_Read_last[index_file + SD_FILE_ATTRIB_BYTE] == SD_FILE_ATTR_ARCHIVE) &&
 8004b8e:	2be5      	cmp	r3, #229	; 0xe5
 8004b90:	d015      	beq.n	8004bbe <Select_File+0x76>
				{
					/*Exit file and is the name no is extended */
					File_exist = Verify_File( (uint8_t*)(&SD_Device.Block_Read_last[index_file]), File_selected );
 8004b92:	8afb      	ldrh	r3, [r7, #22]
 8004b94:	3308      	adds	r3, #8
 8004b96:	4a45      	ldr	r2, [pc, #276]	; (8004cac <Select_File+0x164>)
 8004b98:	4413      	add	r3, r2
 8004b9a:	79fa      	ldrb	r2, [r7, #7]
 8004b9c:	4611      	mov	r1, r2
 8004b9e:	4618      	mov	r0, r3
 8004ba0:	f7ff fa82 	bl	80040a8 <Verify_File>
 8004ba4:	4603      	mov	r3, r0
 8004ba6:	757b      	strb	r3, [r7, #21]

					if(File_exist == False) /*No is the file for the search*/
 8004ba8:	7d7b      	ldrb	r3, [r7, #21]
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d10f      	bne.n	8004bce <Select_File+0x86>
					{
						(index_file < SD_MAX_BLOCK_LENGHT) ? index_file += SD_SIZE_NORMAL_FILE : index_file;	/*Is extended file jump to next file */
 8004bae:	8afb      	ldrh	r3, [r7, #22]
 8004bb0:	f5b3 7fff 	cmp.w	r3, #510	; 0x1fe
 8004bb4:	d80b      	bhi.n	8004bce <Select_File+0x86>
 8004bb6:	8afb      	ldrh	r3, [r7, #22]
 8004bb8:	3320      	adds	r3, #32
 8004bba:	82fb      	strh	r3, [r7, #22]
					if(File_exist == False) /*No is the file for the search*/
 8004bbc:	e007      	b.n	8004bce <Select_File+0x86>
					}

				}
				else
				{
					(index_file < SD_MAX_BLOCK_LENGHT) ? index_file += SD_SIZE_NORMAL_FILE : index_file;	/*No exit the file jump the next*/
 8004bbe:	8afb      	ldrh	r3, [r7, #22]
 8004bc0:	f5b3 7fff 	cmp.w	r3, #510	; 0x1fe
 8004bc4:	d804      	bhi.n	8004bd0 <Select_File+0x88>
 8004bc6:	8afb      	ldrh	r3, [r7, #22]
 8004bc8:	3320      	adds	r3, #32
 8004bca:	82fb      	strh	r3, [r7, #22]
 8004bcc:	e000      	b.n	8004bd0 <Select_File+0x88>
					if(File_exist == False) /*No is the file for the search*/
 8004bce:	bf00      	nop
				}

				if(File_exist == True)
 8004bd0:	7d7b      	ldrb	r3, [r7, #21]
 8004bd2:	2b01      	cmp	r3, #1
 8004bd4:	d02c      	beq.n	8004c30 <Select_File+0xe8>
				{
					break; /*The files was found*/
				}
				else if( 0x00 == SD_Device.Block_Read_last[index_file])
 8004bd6:	8afb      	ldrh	r3, [r7, #22]
 8004bd8:	4a34      	ldr	r2, [pc, #208]	; (8004cac <Select_File+0x164>)
 8004bda:	4413      	add	r3, r2
 8004bdc:	7a1b      	ldrb	r3, [r3, #8]
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d107      	bne.n	8004bf2 <Select_File+0xaa>
				{
					break; /*we don't have more files to analyze*/
 8004be2:	e026      	b.n	8004c32 <Select_File+0xea>
				}

			}
			else
			{
				(index_file < SD_MAX_BLOCK_LENGHT) ? index_file += SD_SIZE_EXTENDED_FILE : index_file;	/*Is extended file jump to next file */
 8004be4:	8afb      	ldrh	r3, [r7, #22]
 8004be6:	f5b3 7fff 	cmp.w	r3, #510	; 0x1fe
 8004bea:	d802      	bhi.n	8004bf2 <Select_File+0xaa>
 8004bec:	8afb      	ldrh	r3, [r7, #22]
 8004bee:	3360      	adds	r3, #96	; 0x60
 8004bf0:	82fb      	strh	r3, [r7, #22]
			}

			/*Read the entire files next sector*/
			if(index_file >= SD_MAX_BLOCK_LENGHT)
 8004bf2:	8afb      	ldrh	r3, [r7, #22]
 8004bf4:	f5b3 7fff 	cmp.w	r3, #510	; 0x1fe
 8004bf8:	d915      	bls.n	8004c26 <Select_File+0xde>
			{
				Address_sector_Modify++;
 8004bfa:	693b      	ldr	r3, [r7, #16]
 8004bfc:	3301      	adds	r3, #1
 8004bfe:	613b      	str	r3, [r7, #16]

				SD_Device.State_Error_Actual = Read_Block( Address_sector_Modify,
 8004c00:	4a2b      	ldr	r2, [pc, #172]	; (8004cb0 <Select_File+0x168>)
 8004c02:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004c06:	6938      	ldr	r0, [r7, #16]
 8004c08:	f7ff fe72 	bl	80048f0 <Read_Block>
 8004c0c:	4603      	mov	r3, r0
 8004c0e:	461a      	mov	r2, r3
 8004c10:	4b26      	ldr	r3, [pc, #152]	; (8004cac <Select_File+0x164>)
 8004c12:	705a      	strb	r2, [r3, #1]
														   SD_MAX_BLOCK_LENGHT,
														  (SD_Device.Block_Read_last) );
				if(SD_Device.State_Error_Actual == False )
 8004c14:	4b25      	ldr	r3, [pc, #148]	; (8004cac <Select_File+0x164>)
 8004c16:	785b      	ldrb	r3, [r3, #1]
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d102      	bne.n	8004c22 <Select_File+0xda>
				{
					index_file = 0;
 8004c1c:	2300      	movs	r3, #0
 8004c1e:	82fb      	strh	r3, [r7, #22]
 8004c20:	e001      	b.n	8004c26 <Select_File+0xde>
				}
				else
				{
					File_exist = False;
 8004c22:	2300      	movs	r3, #0
 8004c24:	757b      	strb	r3, [r7, #21]
		while(index_file < SD_MAX_BLOCK_LENGHT)
 8004c26:	8afb      	ldrh	r3, [r7, #22]
 8004c28:	f5b3 7fff 	cmp.w	r3, #510	; 0x1fe
 8004c2c:	d99e      	bls.n	8004b6c <Select_File+0x24>
 8004c2e:	e000      	b.n	8004c32 <Select_File+0xea>
					break; /*The files was found*/
 8004c30:	bf00      	nop
			}
		}

	}
	/*Calculate address for file*/
	if( True == File_exist)
 8004c32:	7d7b      	ldrb	r3, [r7, #21]
 8004c34:	2b01      	cmp	r3, #1
 8004c36:	d134      	bne.n	8004ca2 <Select_File+0x15a>
	{
		Addres_File = ( (SD_Device.Block_Read_last[index_file + SD_DIRR_FILE_HI1] <<24) | (SD_Device.Block_Read_last[index_file + SD_DIRR_FILE_HI0] << 16) ) | ((SD_Device.Block_Read_last[index_file + SD_DIRR_FILE_LOW1] << 8) | SD_Device.Block_Read_last[index_file + SD_DIRR_FILE_LOW0] );
 8004c38:	8afb      	ldrh	r3, [r7, #22]
 8004c3a:	3315      	adds	r3, #21
 8004c3c:	4a1b      	ldr	r2, [pc, #108]	; (8004cac <Select_File+0x164>)
 8004c3e:	4413      	add	r3, r2
 8004c40:	7a1b      	ldrb	r3, [r3, #8]
 8004c42:	061a      	lsls	r2, r3, #24
 8004c44:	8afb      	ldrh	r3, [r7, #22]
 8004c46:	3314      	adds	r3, #20
 8004c48:	4918      	ldr	r1, [pc, #96]	; (8004cac <Select_File+0x164>)
 8004c4a:	440b      	add	r3, r1
 8004c4c:	7a1b      	ldrb	r3, [r3, #8]
 8004c4e:	041b      	lsls	r3, r3, #16
 8004c50:	431a      	orrs	r2, r3
 8004c52:	8afb      	ldrh	r3, [r7, #22]
 8004c54:	331b      	adds	r3, #27
 8004c56:	4915      	ldr	r1, [pc, #84]	; (8004cac <Select_File+0x164>)
 8004c58:	440b      	add	r3, r1
 8004c5a:	7a1b      	ldrb	r3, [r3, #8]
 8004c5c:	021b      	lsls	r3, r3, #8
 8004c5e:	8af9      	ldrh	r1, [r7, #22]
 8004c60:	311a      	adds	r1, #26
 8004c62:	4812      	ldr	r0, [pc, #72]	; (8004cac <Select_File+0x164>)
 8004c64:	4401      	add	r1, r0
 8004c66:	7a09      	ldrb	r1, [r1, #8]
 8004c68:	430b      	orrs	r3, r1
 8004c6a:	4313      	orrs	r3, r2
 8004c6c:	60fb      	str	r3, [r7, #12]
		Addres_File = ((Addres_File - 2) * SD_Variables.BPB_SecPerClus) + SD_Variables.Sector; //BLOCK
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	3b02      	subs	r3, #2
 8004c72:	4a10      	ldr	r2, [pc, #64]	; (8004cb4 <Select_File+0x16c>)
 8004c74:	7b12      	ldrb	r2, [r2, #12]
 8004c76:	fb03 f202 	mul.w	r2, r3, r2
 8004c7a:	4b0e      	ldr	r3, [pc, #56]	; (8004cb4 <Select_File+0x16c>)
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	4413      	add	r3, r2
 8004c80:	60fb      	str	r3, [r7, #12]

		SD_CurrentFile.Address = Addres_File;
 8004c82:	4a0d      	ldr	r2, [pc, #52]	; (8004cb8 <Select_File+0x170>)
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	6013      	str	r3, [r2, #0]
		Addres = (uint8_t*)(&SD_Device.Block_Read_last) ;
 8004c88:	4b09      	ldr	r3, [pc, #36]	; (8004cb0 <Select_File+0x168>)
 8004c8a:	60bb      	str	r3, [r7, #8]
		Addres += index_file + SD_SIZE_FILE_BYTES ;
 8004c8c:	8afb      	ldrh	r3, [r7, #22]
 8004c8e:	331c      	adds	r3, #28
 8004c90:	68ba      	ldr	r2, [r7, #8]
 8004c92:	4413      	add	r3, r2
 8004c94:	60bb      	str	r3, [r7, #8]
		SD_CurrentFile.Size = Util_Arr_32BIND(Addres ); // check this function
 8004c96:	68b8      	ldr	r0, [r7, #8]
 8004c98:	f000 feb0 	bl	80059fc <Util_Arr_32BIND>
 8004c9c:	4603      	mov	r3, r0
 8004c9e:	4a06      	ldr	r2, [pc, #24]	; (8004cb8 <Select_File+0x170>)
 8004ca0:	6093      	str	r3, [r2, #8]

	}

	return File_exist;
 8004ca2:	7d7b      	ldrb	r3, [r7, #21]
}
 8004ca4:	4618      	mov	r0, r3
 8004ca6:	3718      	adds	r7, #24
 8004ca8:	46bd      	mov	sp, r7
 8004caa:	bd80      	pop	{r7, pc}
 8004cac:	20000948 	.word	0x20000948
 8004cb0:	20000950 	.word	0x20000950
 8004cb4:	20000b60 	.word	0x20000b60
 8004cb8:	20000b70 	.word	0x20000b70

08004cbc <Init_SPI_BASE>:

SPI_HandleTypeDef hspi_Base;


void Init_SPI_BASE(void)
{
 8004cbc:	b580      	push	{r7, lr}
 8004cbe:	af00      	add	r7, sp, #0

	hspi_Base.Instance = SPI2;
 8004cc0:	4b17      	ldr	r3, [pc, #92]	; (8004d20 <Init_SPI_BASE+0x64>)
 8004cc2:	4a18      	ldr	r2, [pc, #96]	; (8004d24 <Init_SPI_BASE+0x68>)
 8004cc4:	601a      	str	r2, [r3, #0]
	hspi_Base.Init.Mode = SPI_MODE_MASTER;
 8004cc6:	4b16      	ldr	r3, [pc, #88]	; (8004d20 <Init_SPI_BASE+0x64>)
 8004cc8:	f44f 7282 	mov.w	r2, #260	; 0x104
 8004ccc:	605a      	str	r2, [r3, #4]
	hspi_Base.Init.Direction = SPI_DIRECTION_2LINES;
 8004cce:	4b14      	ldr	r3, [pc, #80]	; (8004d20 <Init_SPI_BASE+0x64>)
 8004cd0:	2200      	movs	r2, #0
 8004cd2:	609a      	str	r2, [r3, #8]
	hspi_Base.Init.DataSize = SPI_DATASIZE_8BIT;
 8004cd4:	4b12      	ldr	r3, [pc, #72]	; (8004d20 <Init_SPI_BASE+0x64>)
 8004cd6:	2200      	movs	r2, #0
 8004cd8:	60da      	str	r2, [r3, #12]
	hspi_Base.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8004cda:	4b11      	ldr	r3, [pc, #68]	; (8004d20 <Init_SPI_BASE+0x64>)
 8004cdc:	2202      	movs	r2, #2
 8004cde:	611a      	str	r2, [r3, #16]
	hspi_Base.Init.CLKPhase = SPI_PHASE_1EDGE;
 8004ce0:	4b0f      	ldr	r3, [pc, #60]	; (8004d20 <Init_SPI_BASE+0x64>)
 8004ce2:	2200      	movs	r2, #0
 8004ce4:	615a      	str	r2, [r3, #20]
	hspi_Base.Init.NSS = SPI_NSS_SOFT;
 8004ce6:	4b0e      	ldr	r3, [pc, #56]	; (8004d20 <Init_SPI_BASE+0x64>)
 8004ce8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004cec:	619a      	str	r2, [r3, #24]
	hspi_Base.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004cee:	4b0c      	ldr	r3, [pc, #48]	; (8004d20 <Init_SPI_BASE+0x64>)
 8004cf0:	2200      	movs	r2, #0
 8004cf2:	61da      	str	r2, [r3, #28]
	hspi_Base.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8004cf4:	4b0a      	ldr	r3, [pc, #40]	; (8004d20 <Init_SPI_BASE+0x64>)
 8004cf6:	2200      	movs	r2, #0
 8004cf8:	621a      	str	r2, [r3, #32]
	hspi_Base.Init.TIMode = SPI_TIMODE_DISABLE;
 8004cfa:	4b09      	ldr	r3, [pc, #36]	; (8004d20 <Init_SPI_BASE+0x64>)
 8004cfc:	2200      	movs	r2, #0
 8004cfe:	625a      	str	r2, [r3, #36]	; 0x24
	hspi_Base.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004d00:	4b07      	ldr	r3, [pc, #28]	; (8004d20 <Init_SPI_BASE+0x64>)
 8004d02:	2200      	movs	r2, #0
 8004d04:	629a      	str	r2, [r3, #40]	; 0x28
	hspi_Base.Init.CRCPolynomial = 10;
 8004d06:	4b06      	ldr	r3, [pc, #24]	; (8004d20 <Init_SPI_BASE+0x64>)
 8004d08:	220a      	movs	r2, #10
 8004d0a:	62da      	str	r2, [r3, #44]	; 0x2c
	if (HAL_SPI_Init(&hspi_Base) != HAL_OK)
 8004d0c:	4804      	ldr	r0, [pc, #16]	; (8004d20 <Init_SPI_BASE+0x64>)
 8004d0e:	f7fe fb45 	bl	800339c <HAL_SPI_Init>
 8004d12:	4603      	mov	r3, r0
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d001      	beq.n	8004d1c <Init_SPI_BASE+0x60>
	{
		Error_Handler();
 8004d18:	f7fc fa5e 	bl	80011d8 <Error_Handler>
	}
}
 8004d1c:	bf00      	nop
 8004d1e:	bd80      	pop	{r7, pc}
 8004d20:	20000b7c 	.word	0x20000b7c
 8004d24:	40003800 	.word	0x40003800

08004d28 <write_Comand>:


extern void write_Comand(uint8_t ptc_data)
{
 8004d28:	b580      	push	{r7, lr}
 8004d2a:	b082      	sub	sp, #8
 8004d2c:	af00      	add	r7, sp, #0
 8004d2e:	4603      	mov	r3, r0
 8004d30:	71fb      	strb	r3, [r7, #7]

	HAL_GPIO_TogglePin(CS_ST7_GPIO_Port, CS_ST7_Pin);
 8004d32:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004d36:	480e      	ldr	r0, [pc, #56]	; (8004d70 <write_Comand+0x48>)
 8004d38:	f7fc ff17 	bl	8001b6a <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(DC_GPIO_Port, DC_Pin);
 8004d3c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8004d40:	480b      	ldr	r0, [pc, #44]	; (8004d70 <write_Comand+0x48>)
 8004d42:	f7fc ff12 	bl	8001b6a <HAL_GPIO_TogglePin>

	HAL_SPI_Transmit(&hspi_Base, &ptc_data, 1, 0);
 8004d46:	1df9      	adds	r1, r7, #7
 8004d48:	2300      	movs	r3, #0
 8004d4a:	2201      	movs	r2, #1
 8004d4c:	4809      	ldr	r0, [pc, #36]	; (8004d74 <write_Comand+0x4c>)
 8004d4e:	f7fe fbae 	bl	80034ae <HAL_SPI_Transmit>

	HAL_GPIO_TogglePin(DC_GPIO_Port, DC_Pin);
 8004d52:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8004d56:	4806      	ldr	r0, [pc, #24]	; (8004d70 <write_Comand+0x48>)
 8004d58:	f7fc ff07 	bl	8001b6a <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(CS_ST7_GPIO_Port, CS_ST7_Pin);
 8004d5c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004d60:	4803      	ldr	r0, [pc, #12]	; (8004d70 <write_Comand+0x48>)
 8004d62:	f7fc ff02 	bl	8001b6a <HAL_GPIO_TogglePin>
}
 8004d66:	bf00      	nop
 8004d68:	3708      	adds	r7, #8
 8004d6a:	46bd      	mov	sp, r7
 8004d6c:	bd80      	pop	{r7, pc}
 8004d6e:	bf00      	nop
 8004d70:	40020000 	.word	0x40020000
 8004d74:	20000b7c 	.word	0x20000b7c

08004d78 <write_value_C_D>:
	HAL_GPIO_TogglePin(DC_GPIO_Port, DC_Pin);
	HAL_GPIO_TogglePin(CS_ST7_GPIO_Port, CS_ST7_Pin);
}

extern void write_value_C_D(uint8_t *ptc_data, uint16_t size)
{
 8004d78:	b580      	push	{r7, lr}
 8004d7a:	b082      	sub	sp, #8
 8004d7c:	af00      	add	r7, sp, #0
 8004d7e:	6078      	str	r0, [r7, #4]
 8004d80:	460b      	mov	r3, r1
 8004d82:	807b      	strh	r3, [r7, #2]
	HAL_GPIO_TogglePin(CS_ST7_GPIO_Port, CS_ST7_Pin);
 8004d84:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004d88:	4811      	ldr	r0, [pc, #68]	; (8004dd0 <write_value_C_D+0x58>)
 8004d8a:	f7fc feee 	bl	8001b6a <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(DC_GPIO_Port, DC_Pin);
 8004d8e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8004d92:	480f      	ldr	r0, [pc, #60]	; (8004dd0 <write_value_C_D+0x58>)
 8004d94:	f7fc fee9 	bl	8001b6a <HAL_GPIO_TogglePin>

	HAL_SPI_Transmit(&hspi_Base, ptc_data, 1, 0);
 8004d98:	2300      	movs	r3, #0
 8004d9a:	2201      	movs	r2, #1
 8004d9c:	6879      	ldr	r1, [r7, #4]
 8004d9e:	480d      	ldr	r0, [pc, #52]	; (8004dd4 <write_value_C_D+0x5c>)
 8004da0:	f7fe fb85 	bl	80034ae <HAL_SPI_Transmit>

	HAL_GPIO_TogglePin(DC_GPIO_Port, DC_Pin);
 8004da4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8004da8:	4809      	ldr	r0, [pc, #36]	; (8004dd0 <write_value_C_D+0x58>)
 8004daa:	f7fc fede 	bl	8001b6a <HAL_GPIO_TogglePin>


	HAL_SPI_Transmit(&hspi_Base, ptc_data + 1, size, 1);
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	1c59      	adds	r1, r3, #1
 8004db2:	887a      	ldrh	r2, [r7, #2]
 8004db4:	2301      	movs	r3, #1
 8004db6:	4807      	ldr	r0, [pc, #28]	; (8004dd4 <write_value_C_D+0x5c>)
 8004db8:	f7fe fb79 	bl	80034ae <HAL_SPI_Transmit>

	HAL_GPIO_TogglePin(CS_ST7_GPIO_Port, CS_ST7_Pin);
 8004dbc:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004dc0:	4803      	ldr	r0, [pc, #12]	; (8004dd0 <write_value_C_D+0x58>)
 8004dc2:	f7fc fed2 	bl	8001b6a <HAL_GPIO_TogglePin>
}
 8004dc6:	bf00      	nop
 8004dc8:	3708      	adds	r7, #8
 8004dca:	46bd      	mov	sp, r7
 8004dcc:	bd80      	pop	{r7, pc}
 8004dce:	bf00      	nop
 8004dd0:	40020000 	.word	0x40020000
 8004dd4:	20000b7c 	.word	0x20000b7c

08004dd8 <Com_Value_rep>:

void Com_Value_rep(uint8_t comand,uint8_t* value_rep , uint32_t num_rep)
{
 8004dd8:	b580      	push	{r7, lr}
 8004dda:	b086      	sub	sp, #24
 8004ddc:	af00      	add	r7, sp, #0
 8004dde:	4603      	mov	r3, r0
 8004de0:	60b9      	str	r1, [r7, #8]
 8004de2:	607a      	str	r2, [r7, #4]
 8004de4:	73fb      	strb	r3, [r7, #15]
	uint32_t var;
	HAL_GPIO_TogglePin(CS_ST7_GPIO_Port, CS_ST7_Pin);
 8004de6:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004dea:	4816      	ldr	r0, [pc, #88]	; (8004e44 <Com_Value_rep+0x6c>)
 8004dec:	f7fc febd 	bl	8001b6a <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(DC_GPIO_Port, DC_Pin);
 8004df0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8004df4:	4813      	ldr	r0, [pc, #76]	; (8004e44 <Com_Value_rep+0x6c>)
 8004df6:	f7fc feb8 	bl	8001b6a <HAL_GPIO_TogglePin>

	HAL_SPI_Transmit(&hspi_Base, &comand, 1, 0);
 8004dfa:	f107 010f 	add.w	r1, r7, #15
 8004dfe:	2300      	movs	r3, #0
 8004e00:	2201      	movs	r2, #1
 8004e02:	4811      	ldr	r0, [pc, #68]	; (8004e48 <Com_Value_rep+0x70>)
 8004e04:	f7fe fb53 	bl	80034ae <HAL_SPI_Transmit>

	HAL_GPIO_TogglePin(DC_GPIO_Port, DC_Pin);
 8004e08:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8004e0c:	480d      	ldr	r0, [pc, #52]	; (8004e44 <Com_Value_rep+0x6c>)
 8004e0e:	f7fc feac 	bl	8001b6a <HAL_GPIO_TogglePin>

	for (var = 0; var < num_rep; ++var)
 8004e12:	2300      	movs	r3, #0
 8004e14:	617b      	str	r3, [r7, #20]
 8004e16:	e008      	b.n	8004e2a <Com_Value_rep+0x52>
	{
		HAL_SPI_Transmit(&hspi_Base, value_rep ,2, 1);
 8004e18:	2301      	movs	r3, #1
 8004e1a:	2202      	movs	r2, #2
 8004e1c:	68b9      	ldr	r1, [r7, #8]
 8004e1e:	480a      	ldr	r0, [pc, #40]	; (8004e48 <Com_Value_rep+0x70>)
 8004e20:	f7fe fb45 	bl	80034ae <HAL_SPI_Transmit>
	for (var = 0; var < num_rep; ++var)
 8004e24:	697b      	ldr	r3, [r7, #20]
 8004e26:	3301      	adds	r3, #1
 8004e28:	617b      	str	r3, [r7, #20]
 8004e2a:	697a      	ldr	r2, [r7, #20]
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	429a      	cmp	r2, r3
 8004e30:	d3f2      	bcc.n	8004e18 <Com_Value_rep+0x40>
//		HAL_SPI_Transmit_DMA(&hspi_Base, &value_rep, 1);
//		HAL_SPI_Transmit_IT(&hspi_Base, &value_rep, 1);
	}

	HAL_GPIO_TogglePin(CS_ST7_GPIO_Port, CS_ST7_Pin);
 8004e32:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004e36:	4803      	ldr	r0, [pc, #12]	; (8004e44 <Com_Value_rep+0x6c>)
 8004e38:	f7fc fe97 	bl	8001b6a <HAL_GPIO_TogglePin>
}
 8004e3c:	bf00      	nop
 8004e3e:	3718      	adds	r7, #24
 8004e40:	46bd      	mov	sp, r7
 8004e42:	bd80      	pop	{r7, pc}
 8004e44:	40020000 	.word	0x40020000
 8004e48:	20000b7c 	.word	0x20000b7c

08004e4c <Eneble_cont_wr_mode>:


extern void Eneble_cont_wr_mode(uint8_t comand)
{
 8004e4c:	b580      	push	{r7, lr}
 8004e4e:	b082      	sub	sp, #8
 8004e50:	af00      	add	r7, sp, #0
 8004e52:	4603      	mov	r3, r0
 8004e54:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(CS_ST7_GPIO_Port, CS_ST7_Pin, GPIO_PIN_RESET);
 8004e56:	2200      	movs	r2, #0
 8004e58:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004e5c:	480c      	ldr	r0, [pc, #48]	; (8004e90 <Eneble_cont_wr_mode+0x44>)
 8004e5e:	f7fc fe6b 	bl	8001b38 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DC_GPIO_Port,DC_Pin,GPIO_PIN_RESET);
 8004e62:	2200      	movs	r2, #0
 8004e64:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8004e68:	4809      	ldr	r0, [pc, #36]	; (8004e90 <Eneble_cont_wr_mode+0x44>)
 8004e6a:	f7fc fe65 	bl	8001b38 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi_Base, &comand, 1, 0);
 8004e6e:	1df9      	adds	r1, r7, #7
 8004e70:	2300      	movs	r3, #0
 8004e72:	2201      	movs	r2, #1
 8004e74:	4807      	ldr	r0, [pc, #28]	; (8004e94 <Eneble_cont_wr_mode+0x48>)
 8004e76:	f7fe fb1a 	bl	80034ae <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(DC_GPIO_Port,DC_Pin,GPIO_PIN_SET);
 8004e7a:	2201      	movs	r2, #1
 8004e7c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8004e80:	4803      	ldr	r0, [pc, #12]	; (8004e90 <Eneble_cont_wr_mode+0x44>)
 8004e82:	f7fc fe59 	bl	8001b38 <HAL_GPIO_WritePin>
}
 8004e86:	bf00      	nop
 8004e88:	3708      	adds	r7, #8
 8004e8a:	46bd      	mov	sp, r7
 8004e8c:	bd80      	pop	{r7, pc}
 8004e8e:	bf00      	nop
 8004e90:	40020000 	.word	0x40020000
 8004e94:	20000b7c 	.word	0x20000b7c

08004e98 <Contin_wr_pix>:
  * @param  value_rep buffer
  * @param  num_rep quantity of values
  * @retval None
  */
void Contin_wr_pix(uint8_t* value_rep , uint32_t num_rep)
{
 8004e98:	b580      	push	{r7, lr}
 8004e9a:	b084      	sub	sp, #16
 8004e9c:	af00      	add	r7, sp, #0
 8004e9e:	6078      	str	r0, [r7, #4]
 8004ea0:	6039      	str	r1, [r7, #0]
	uint32_t var;

	for (var = 0; var < num_rep; ++var)
 8004ea2:	2300      	movs	r3, #0
 8004ea4:	60fb      	str	r3, [r7, #12]
 8004ea6:	e008      	b.n	8004eba <Contin_wr_pix+0x22>
	{
		HAL_SPI_Transmit(&hspi_Base, value_rep ,2, 1);
 8004ea8:	2301      	movs	r3, #1
 8004eaa:	2202      	movs	r2, #2
 8004eac:	6879      	ldr	r1, [r7, #4]
 8004eae:	4807      	ldr	r0, [pc, #28]	; (8004ecc <Contin_wr_pix+0x34>)
 8004eb0:	f7fe fafd 	bl	80034ae <HAL_SPI_Transmit>
	for (var = 0; var < num_rep; ++var)
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	3301      	adds	r3, #1
 8004eb8:	60fb      	str	r3, [r7, #12]
 8004eba:	68fa      	ldr	r2, [r7, #12]
 8004ebc:	683b      	ldr	r3, [r7, #0]
 8004ebe:	429a      	cmp	r2, r3
 8004ec0:	d3f2      	bcc.n	8004ea8 <Contin_wr_pix+0x10>
	}
}
 8004ec2:	bf00      	nop
 8004ec4:	bf00      	nop
 8004ec6:	3710      	adds	r7, #16
 8004ec8:	46bd      	mov	sp, r7
 8004eca:	bd80      	pop	{r7, pc}
 8004ecc:	20000b7c 	.word	0x20000b7c

08004ed0 <Disable_cont_wr_mode>:

extern void Disable_cont_wr_mode()
{
 8004ed0:	b580      	push	{r7, lr}
 8004ed2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(CS_ST7_GPIO_Port, CS_ST7_Pin, GPIO_PIN_SET);
 8004ed4:	2201      	movs	r2, #1
 8004ed6:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004eda:	4802      	ldr	r0, [pc, #8]	; (8004ee4 <Disable_cont_wr_mode+0x14>)
 8004edc:	f7fc fe2c 	bl	8001b38 <HAL_GPIO_WritePin>
}
 8004ee0:	bf00      	nop
 8004ee2:	bd80      	pop	{r7, pc}
 8004ee4:	40020000 	.word	0x40020000

08004ee8 <verify_LCD>:




extern Status_LCD verify_LCD()
{
 8004ee8:	b580      	push	{r7, lr}
 8004eea:	b084      	sub	sp, #16
 8004eec:	af02      	add	r7, sp, #8
	Status_LCD inital_stat=Err_int_LCD;
 8004eee:	2300      	movs	r3, #0
 8004ef0:	71fb      	strb	r3, [r7, #7]
	inital_stat=HAL_I2C_Master_Transmit(&I2C_P2, Address_LCD, &data, 1, 1);
 8004ef2:	2301      	movs	r3, #1
 8004ef4:	9300      	str	r3, [sp, #0]
 8004ef6:	2301      	movs	r3, #1
 8004ef8:	4a0a      	ldr	r2, [pc, #40]	; (8004f24 <verify_LCD+0x3c>)
 8004efa:	2178      	movs	r1, #120	; 0x78
 8004efc:	480a      	ldr	r0, [pc, #40]	; (8004f28 <verify_LCD+0x40>)
 8004efe:	f7fc ffb7 	bl	8001e70 <HAL_I2C_Master_Transmit>
 8004f02:	4603      	mov	r3, r0
 8004f04:	71fb      	strb	r3, [r7, #7]
	inital_stat=(~(inital_stat))&0x01;
 8004f06:	79fb      	ldrb	r3, [r7, #7]
 8004f08:	f003 0301 	and.w	r3, r3, #1
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	bf0c      	ite	eq
 8004f10:	2301      	moveq	r3, #1
 8004f12:	2300      	movne	r3, #0
 8004f14:	b2db      	uxtb	r3, r3
 8004f16:	71fb      	strb	r3, [r7, #7]
	return inital_stat;
 8004f18:	79fb      	ldrb	r3, [r7, #7]
}
 8004f1a:	4618      	mov	r0, r3
 8004f1c:	3708      	adds	r7, #8
 8004f1e:	46bd      	mov	sp, r7
 8004f20:	bd80      	pop	{r7, pc}
 8004f22:	bf00      	nop
 8004f24:	20000114 	.word	0x20000114
 8004f28:	2000086c 	.word	0x2000086c

08004f2c <Configure_LCD>:



extern Status_LCD Configure_LCD(uint8_t contraste)
{
 8004f2c:	b580      	push	{r7, lr}
 8004f2e:	b086      	sub	sp, #24
 8004f30:	af02      	add	r7, sp, #8
 8004f32:	4603      	mov	r3, r0
 8004f34:	71fb      	strb	r3, [r7, #7]
	Status_LCD value_int=Err_int_LCD;
 8004f36:	2300      	movs	r3, #0
 8004f38:	73fb      	strb	r3, [r7, #15]
	initial_conf[12]=contraste;
 8004f3a:	4a0c      	ldr	r2, [pc, #48]	; (8004f6c <Configure_LCD+0x40>)
 8004f3c:	79fb      	ldrb	r3, [r7, #7]
 8004f3e:	7313      	strb	r3, [r2, #12]
	HAL_I2C_Master_Transmit(&I2C_P2, Address_LCD, initial_conf, 28, 1);
 8004f40:	2301      	movs	r3, #1
 8004f42:	9300      	str	r3, [sp, #0]
 8004f44:	231c      	movs	r3, #28
 8004f46:	4a09      	ldr	r2, [pc, #36]	; (8004f6c <Configure_LCD+0x40>)
 8004f48:	2178      	movs	r1, #120	; 0x78
 8004f4a:	4809      	ldr	r0, [pc, #36]	; (8004f70 <Configure_LCD+0x44>)
 8004f4c:	f7fc ff90 	bl	8001e70 <HAL_I2C_Master_Transmit>
	value_int=(~(value_int))&0x01;
 8004f50:	7bfb      	ldrb	r3, [r7, #15]
 8004f52:	f003 0301 	and.w	r3, r3, #1
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	bf0c      	ite	eq
 8004f5a:	2301      	moveq	r3, #1
 8004f5c:	2300      	movne	r3, #0
 8004f5e:	b2db      	uxtb	r3, r3
 8004f60:	73fb      	strb	r3, [r7, #15]
	return value_int;
 8004f62:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f64:	4618      	mov	r0, r3
 8004f66:	3710      	adds	r7, #16
 8004f68:	46bd      	mov	sp, r7
 8004f6a:	bd80      	pop	{r7, pc}
 8004f6c:	20000118 	.word	0x20000118
 8004f70:	2000086c 	.word	0x2000086c

08004f74 <clear_lcd>:



/*clear complete the LCD*/
extern void clear_lcd()
{
 8004f74:	b580      	push	{r7, lr}
 8004f76:	b084      	sub	sp, #16
 8004f78:	af02      	add	r7, sp, #8

	uint16_t value=0;
 8004f7a:	2300      	movs	r3, #0
 8004f7c:	80fb      	strh	r3, [r7, #6]
	uint8_t clear_v[]={0X40,0x00};
 8004f7e:	2340      	movs	r3, #64	; 0x40
 8004f80:	80bb      	strh	r3, [r7, #4]
	Configure_LCD(0);
 8004f82:	2000      	movs	r0, #0
 8004f84:	f7ff ffd2 	bl	8004f2c <Configure_LCD>
	for (value = 0; value < 1024; ++value) {
 8004f88:	2300      	movs	r3, #0
 8004f8a:	80fb      	strh	r3, [r7, #6]
 8004f8c:	e00a      	b.n	8004fa4 <clear_lcd+0x30>
		HAL_I2C_Master_Transmit(&I2C_P2, Address_LCD, clear_v, 2, 1);
 8004f8e:	1d3a      	adds	r2, r7, #4
 8004f90:	2301      	movs	r3, #1
 8004f92:	9300      	str	r3, [sp, #0]
 8004f94:	2302      	movs	r3, #2
 8004f96:	2178      	movs	r1, #120	; 0x78
 8004f98:	4807      	ldr	r0, [pc, #28]	; (8004fb8 <clear_lcd+0x44>)
 8004f9a:	f7fc ff69 	bl	8001e70 <HAL_I2C_Master_Transmit>
	for (value = 0; value < 1024; ++value) {
 8004f9e:	88fb      	ldrh	r3, [r7, #6]
 8004fa0:	3301      	adds	r3, #1
 8004fa2:	80fb      	strh	r3, [r7, #6]
 8004fa4:	88fb      	ldrh	r3, [r7, #6]
 8004fa6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004faa:	d3f0      	bcc.n	8004f8e <clear_lcd+0x1a>
	}

	reset_value_cont();
 8004fac:	f000 f806 	bl	8004fbc <reset_value_cont>
}
 8004fb0:	bf00      	nop
 8004fb2:	3708      	adds	r7, #8
 8004fb4:	46bd      	mov	sp, r7
 8004fb6:	bd80      	pop	{r7, pc}
 8004fb8:	2000086c 	.word	0x2000086c

08004fbc <reset_value_cont>:
			HAL_I2C_Master_Transmit(&I2C_P2, Address_LCD, send_img, 2, 1);
	}
}

void reset_value_cont(void)
{
 8004fbc:	b480      	push	{r7}
 8004fbe:	af00      	add	r7, sp, #0
	sec_ant_1	=	10;
 8004fc0:	4b08      	ldr	r3, [pc, #32]	; (8004fe4 <reset_value_cont+0x28>)
 8004fc2:	220a      	movs	r2, #10
 8004fc4:	701a      	strb	r2, [r3, #0]
	sec_ant_2	=	10;
 8004fc6:	4b08      	ldr	r3, [pc, #32]	; (8004fe8 <reset_value_cont+0x2c>)
 8004fc8:	220a      	movs	r2, #10
 8004fca:	701a      	strb	r2, [r3, #0]
	sec_ant_3	=	10;
 8004fcc:	4b07      	ldr	r3, [pc, #28]	; (8004fec <reset_value_cont+0x30>)
 8004fce:	220a      	movs	r2, #10
 8004fd0:	701a      	strb	r2, [r3, #0]
	sec_ant_4	=	10;
 8004fd2:	4b07      	ldr	r3, [pc, #28]	; (8004ff0 <reset_value_cont+0x34>)
 8004fd4:	220a      	movs	r2, #10
 8004fd6:	701a      	strb	r2, [r3, #0]
}
 8004fd8:	bf00      	nop
 8004fda:	46bd      	mov	sp, r7
 8004fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fe0:	4770      	bx	lr
 8004fe2:	bf00      	nop
 8004fe4:	20000134 	.word	0x20000134
 8004fe8:	20000135 	.word	0x20000135
 8004fec:	20000136 	.word	0x20000136
 8004ff0:	20000137 	.word	0x20000137

08004ff4 <set_colum_cords>:


/*set columns and cords see the pdf*/
extern void set_colum_cords(uint8_t x_start,uint8_t x_end, uint8_t y_start,uint8_t y_end)
{
 8004ff4:	b590      	push	{r4, r7, lr}
 8004ff6:	b087      	sub	sp, #28
 8004ff8:	af02      	add	r7, sp, #8
 8004ffa:	4604      	mov	r4, r0
 8004ffc:	4608      	mov	r0, r1
 8004ffe:	4611      	mov	r1, r2
 8005000:	461a      	mov	r2, r3
 8005002:	4623      	mov	r3, r4
 8005004:	71fb      	strb	r3, [r7, #7]
 8005006:	4603      	mov	r3, r0
 8005008:	71bb      	strb	r3, [r7, #6]
 800500a:	460b      	mov	r3, r1
 800500c:	717b      	strb	r3, [r7, #5]
 800500e:	4613      	mov	r3, r2
 8005010:	713b      	strb	r3, [r7, #4]
									  // star_x end_x    y_star  y_end
	uint8_t set_colum[]={0X20,0X00,0x21,x_start,x_end,0X22,y_start,y_end};
 8005012:	2320      	movs	r3, #32
 8005014:	723b      	strb	r3, [r7, #8]
 8005016:	2300      	movs	r3, #0
 8005018:	727b      	strb	r3, [r7, #9]
 800501a:	2321      	movs	r3, #33	; 0x21
 800501c:	72bb      	strb	r3, [r7, #10]
 800501e:	79fb      	ldrb	r3, [r7, #7]
 8005020:	72fb      	strb	r3, [r7, #11]
 8005022:	79bb      	ldrb	r3, [r7, #6]
 8005024:	733b      	strb	r3, [r7, #12]
 8005026:	2322      	movs	r3, #34	; 0x22
 8005028:	737b      	strb	r3, [r7, #13]
 800502a:	797b      	ldrb	r3, [r7, #5]
 800502c:	73bb      	strb	r3, [r7, #14]
 800502e:	793b      	ldrb	r3, [r7, #4]
 8005030:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Master_Transmit(&I2C_P2, Address_LCD, set_colum, 8, 1);
 8005032:	f107 0208 	add.w	r2, r7, #8
 8005036:	2301      	movs	r3, #1
 8005038:	9300      	str	r3, [sp, #0]
 800503a:	2308      	movs	r3, #8
 800503c:	2178      	movs	r1, #120	; 0x78
 800503e:	4803      	ldr	r0, [pc, #12]	; (800504c <set_colum_cords+0x58>)
 8005040:	f7fc ff16 	bl	8001e70 <HAL_I2C_Master_Transmit>
}
 8005044:	bf00      	nop
 8005046:	3714      	adds	r7, #20
 8005048:	46bd      	mov	sp, r7
 800504a:	bd90      	pop	{r4, r7, pc}
 800504c:	2000086c 	.word	0x2000086c

08005050 <set_number>:

/*send number by the colum selected*/
extern void set_number(uint8_t number)
{
 8005050:	b580      	push	{r7, lr}
 8005052:	b088      	sub	sp, #32
 8005054:	af02      	add	r7, sp, #8
 8005056:	4603      	mov	r3, r0
 8005058:	71fb      	strb	r3, [r7, #7]
	uint8_t *get_font;
	uint8_t send_img[2];
	uint16_t value=0;
 800505a:	2300      	movs	r3, #0
 800505c:	82fb      	strh	r3, [r7, #22]
	get_font =test_swicht(number);
 800505e:	79fb      	ldrb	r3, [r7, #7]
 8005060:	4618      	mov	r0, r3
 8005062:	f000 fb77 	bl	8005754 <test_swicht>
 8005066:	6138      	str	r0, [r7, #16]
	send_img[0]=0x40;
 8005068:	2340      	movs	r3, #64	; 0x40
 800506a:	733b      	strb	r3, [r7, #12]
	for (value = 0; value < 81; ++value) {
 800506c:	2300      	movs	r3, #0
 800506e:	82fb      	strh	r3, [r7, #22]
 8005070:	e010      	b.n	8005094 <set_number+0x44>
			send_img[1]=*(get_font+ value);
 8005072:	8afb      	ldrh	r3, [r7, #22]
 8005074:	693a      	ldr	r2, [r7, #16]
 8005076:	4413      	add	r3, r2
 8005078:	781b      	ldrb	r3, [r3, #0]
 800507a:	737b      	strb	r3, [r7, #13]
			HAL_I2C_Master_Transmit(&I2C_P2, Address_LCD, send_img, 2, 1);
 800507c:	f107 020c 	add.w	r2, r7, #12
 8005080:	2301      	movs	r3, #1
 8005082:	9300      	str	r3, [sp, #0]
 8005084:	2302      	movs	r3, #2
 8005086:	2178      	movs	r1, #120	; 0x78
 8005088:	4806      	ldr	r0, [pc, #24]	; (80050a4 <set_number+0x54>)
 800508a:	f7fc fef1 	bl	8001e70 <HAL_I2C_Master_Transmit>
	for (value = 0; value < 81; ++value) {
 800508e:	8afb      	ldrh	r3, [r7, #22]
 8005090:	3301      	adds	r3, #1
 8005092:	82fb      	strh	r3, [r7, #22]
 8005094:	8afb      	ldrh	r3, [r7, #22]
 8005096:	2b50      	cmp	r3, #80	; 0x50
 8005098:	d9eb      	bls.n	8005072 <set_number+0x22>
		}
}
 800509a:	bf00      	nop
 800509c:	bf00      	nop
 800509e:	3718      	adds	r7, #24
 80050a0:	46bd      	mov	sp, r7
 80050a2:	bd80      	pop	{r7, pc}
 80050a4:	2000086c 	.word	0x2000086c

080050a8 <wr_sectors>:

//write sectors and value
extern void wr_sectors(uint8_t avalib,uint8_t sec1,uint8_t sec2,uint8_t sec3, uint8_t sec4)
{
 80050a8:	b590      	push	{r4, r7, lr}
 80050aa:	b083      	sub	sp, #12
 80050ac:	af00      	add	r7, sp, #0
 80050ae:	4604      	mov	r4, r0
 80050b0:	4608      	mov	r0, r1
 80050b2:	4611      	mov	r1, r2
 80050b4:	461a      	mov	r2, r3
 80050b6:	4623      	mov	r3, r4
 80050b8:	71fb      	strb	r3, [r7, #7]
 80050ba:	4603      	mov	r3, r0
 80050bc:	71bb      	strb	r3, [r7, #6]
 80050be:	460b      	mov	r3, r1
 80050c0:	717b      	strb	r3, [r7, #5]
 80050c2:	4613      	mov	r3, r2
 80050c4:	713b      	strb	r3, [r7, #4]

	if( (avalib & 1<<3) && sec_ant_1 != sec1 )
 80050c6:	79fb      	ldrb	r3, [r7, #7]
 80050c8:	f003 0308 	and.w	r3, r3, #8
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d011      	beq.n	80050f4 <wr_sectors+0x4c>
 80050d0:	4b2d      	ldr	r3, [pc, #180]	; (8005188 <wr_sectors+0xe0>)
 80050d2:	781b      	ldrb	r3, [r3, #0]
 80050d4:	79ba      	ldrb	r2, [r7, #6]
 80050d6:	429a      	cmp	r2, r3
 80050d8:	d00c      	beq.n	80050f4 <wr_sectors+0x4c>
	{
		set_colum_cords(0, 26, 2, 7);
 80050da:	2307      	movs	r3, #7
 80050dc:	2202      	movs	r2, #2
 80050de:	211a      	movs	r1, #26
 80050e0:	2000      	movs	r0, #0
 80050e2:	f7ff ff87 	bl	8004ff4 <set_colum_cords>
		set_number(sec1);
 80050e6:	79bb      	ldrb	r3, [r7, #6]
 80050e8:	4618      	mov	r0, r3
 80050ea:	f7ff ffb1 	bl	8005050 <set_number>
		sec_ant_1=sec1;
 80050ee:	4a26      	ldr	r2, [pc, #152]	; (8005188 <wr_sectors+0xe0>)
 80050f0:	79bb      	ldrb	r3, [r7, #6]
 80050f2:	7013      	strb	r3, [r2, #0]
	}
	if( (avalib & 1<<2) && sec_ant_2 != sec2  )
 80050f4:	79fb      	ldrb	r3, [r7, #7]
 80050f6:	f003 0304 	and.w	r3, r3, #4
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d011      	beq.n	8005122 <wr_sectors+0x7a>
 80050fe:	4b23      	ldr	r3, [pc, #140]	; (800518c <wr_sectors+0xe4>)
 8005100:	781b      	ldrb	r3, [r3, #0]
 8005102:	797a      	ldrb	r2, [r7, #5]
 8005104:	429a      	cmp	r2, r3
 8005106:	d00c      	beq.n	8005122 <wr_sectors+0x7a>
	{
		set_colum_cords(28, 54, 2, 7);
 8005108:	2307      	movs	r3, #7
 800510a:	2202      	movs	r2, #2
 800510c:	2136      	movs	r1, #54	; 0x36
 800510e:	201c      	movs	r0, #28
 8005110:	f7ff ff70 	bl	8004ff4 <set_colum_cords>
		set_number(sec2);
 8005114:	797b      	ldrb	r3, [r7, #5]
 8005116:	4618      	mov	r0, r3
 8005118:	f7ff ff9a 	bl	8005050 <set_number>
		sec_ant_2=sec2;
 800511c:	4a1b      	ldr	r2, [pc, #108]	; (800518c <wr_sectors+0xe4>)
 800511e:	797b      	ldrb	r3, [r7, #5]
 8005120:	7013      	strb	r3, [r2, #0]
	}
	if( (avalib & 1<<1) && sec_ant_3 != sec3  )
 8005122:	79fb      	ldrb	r3, [r7, #7]
 8005124:	f003 0302 	and.w	r3, r3, #2
 8005128:	2b00      	cmp	r3, #0
 800512a:	d011      	beq.n	8005150 <wr_sectors+0xa8>
 800512c:	4b18      	ldr	r3, [pc, #96]	; (8005190 <wr_sectors+0xe8>)
 800512e:	781b      	ldrb	r3, [r3, #0]
 8005130:	793a      	ldrb	r2, [r7, #4]
 8005132:	429a      	cmp	r2, r3
 8005134:	d00c      	beq.n	8005150 <wr_sectors+0xa8>
	{
		set_colum_cords(75, 101, 2, 7);
 8005136:	2307      	movs	r3, #7
 8005138:	2202      	movs	r2, #2
 800513a:	2165      	movs	r1, #101	; 0x65
 800513c:	204b      	movs	r0, #75	; 0x4b
 800513e:	f7ff ff59 	bl	8004ff4 <set_colum_cords>
		set_number(sec3);
 8005142:	793b      	ldrb	r3, [r7, #4]
 8005144:	4618      	mov	r0, r3
 8005146:	f7ff ff83 	bl	8005050 <set_number>
		sec_ant_3=sec3;
 800514a:	4a11      	ldr	r2, [pc, #68]	; (8005190 <wr_sectors+0xe8>)
 800514c:	793b      	ldrb	r3, [r7, #4]
 800514e:	7013      	strb	r3, [r2, #0]
	}
	if( (avalib & 1) &&  sec_ant_4 != sec4 )
 8005150:	79fb      	ldrb	r3, [r7, #7]
 8005152:	f003 0301 	and.w	r3, r3, #1
 8005156:	2b00      	cmp	r3, #0
 8005158:	d011      	beq.n	800517e <wr_sectors+0xd6>
 800515a:	4b0e      	ldr	r3, [pc, #56]	; (8005194 <wr_sectors+0xec>)
 800515c:	781b      	ldrb	r3, [r3, #0]
 800515e:	7e3a      	ldrb	r2, [r7, #24]
 8005160:	429a      	cmp	r2, r3
 8005162:	d00c      	beq.n	800517e <wr_sectors+0xd6>
	{
		set_colum_cords(101, 127, 2, 7);
 8005164:	2307      	movs	r3, #7
 8005166:	2202      	movs	r2, #2
 8005168:	217f      	movs	r1, #127	; 0x7f
 800516a:	2065      	movs	r0, #101	; 0x65
 800516c:	f7ff ff42 	bl	8004ff4 <set_colum_cords>
		set_number(sec4);
 8005170:	7e3b      	ldrb	r3, [r7, #24]
 8005172:	4618      	mov	r0, r3
 8005174:	f7ff ff6c 	bl	8005050 <set_number>
		sec_ant_4 = sec4;
 8005178:	4a06      	ldr	r2, [pc, #24]	; (8005194 <wr_sectors+0xec>)
 800517a:	7e3b      	ldrb	r3, [r7, #24]
 800517c:	7013      	strb	r3, [r2, #0]
	}
}
 800517e:	bf00      	nop
 8005180:	370c      	adds	r7, #12
 8005182:	46bd      	mov	sp, r7
 8005184:	bd90      	pop	{r4, r7, pc}
 8005186:	bf00      	nop
 8005188:	20000134 	.word	0x20000134
 800518c:	20000135 	.word	0x20000135
 8005190:	20000136 	.word	0x20000136
 8005194:	20000137 	.word	0x20000137

08005198 <wr_number>:



extern void wr_number(uint16_t number)
{
 8005198:	b590      	push	{r4, r7, lr}
 800519a:	b089      	sub	sp, #36	; 0x24
 800519c:	af02      	add	r7, sp, #8
 800519e:	4603      	mov	r3, r0
 80051a0:	80fb      	strh	r3, [r7, #6]
	uint16_t val_send[4];
	uint16_t diguits=0;
 80051a2:	2300      	movs	r3, #0
 80051a4:	82fb      	strh	r3, [r7, #22]
	uint8_t index;
	if(number<10000)
 80051a6:	88fb      	ldrh	r3, [r7, #6]
 80051a8:	f242 720f 	movw	r2, #9999	; 0x270f
 80051ac:	4293      	cmp	r3, r2
 80051ae:	d83c      	bhi.n	800522a <wr_number+0x92>
	{
		for (index = 0; index < 4; ++index)
 80051b0:	2300      	movs	r3, #0
 80051b2:	757b      	strb	r3, [r7, #21]
 80051b4:	e028      	b.n	8005208 <wr_number+0x70>
		{
			val_send[index]=number%10;
 80051b6:	7d78      	ldrb	r0, [r7, #21]
 80051b8:	88fa      	ldrh	r2, [r7, #6]
 80051ba:	4b1e      	ldr	r3, [pc, #120]	; (8005234 <wr_number+0x9c>)
 80051bc:	fba3 1302 	umull	r1, r3, r3, r2
 80051c0:	08d9      	lsrs	r1, r3, #3
 80051c2:	460b      	mov	r3, r1
 80051c4:	009b      	lsls	r3, r3, #2
 80051c6:	440b      	add	r3, r1
 80051c8:	005b      	lsls	r3, r3, #1
 80051ca:	1ad3      	subs	r3, r2, r3
 80051cc:	b29a      	uxth	r2, r3
 80051ce:	0043      	lsls	r3, r0, #1
 80051d0:	3318      	adds	r3, #24
 80051d2:	443b      	add	r3, r7
 80051d4:	f823 2c0c 	strh.w	r2, [r3, #-12]
			number/=10;
 80051d8:	88fb      	ldrh	r3, [r7, #6]
 80051da:	4a16      	ldr	r2, [pc, #88]	; (8005234 <wr_number+0x9c>)
 80051dc:	fba2 2303 	umull	r2, r3, r2, r3
 80051e0:	08db      	lsrs	r3, r3, #3
 80051e2:	80fb      	strh	r3, [r7, #6]
			diguits|=1<<index;
 80051e4:	7d7b      	ldrb	r3, [r7, #21]
 80051e6:	2201      	movs	r2, #1
 80051e8:	fa02 f303 	lsl.w	r3, r2, r3
 80051ec:	b21a      	sxth	r2, r3
 80051ee:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80051f2:	4313      	orrs	r3, r2
 80051f4:	b21b      	sxth	r3, r3
 80051f6:	82fb      	strh	r3, [r7, #22]
			if(number==0)
 80051f8:	88fb      	ldrh	r3, [r7, #6]
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d101      	bne.n	8005202 <wr_number+0x6a>
			{
				index=5;
 80051fe:	2305      	movs	r3, #5
 8005200:	757b      	strb	r3, [r7, #21]
		for (index = 0; index < 4; ++index)
 8005202:	7d7b      	ldrb	r3, [r7, #21]
 8005204:	3301      	adds	r3, #1
 8005206:	757b      	strb	r3, [r7, #21]
 8005208:	7d7b      	ldrb	r3, [r7, #21]
 800520a:	2b03      	cmp	r3, #3
 800520c:	d9d3      	bls.n	80051b6 <wr_number+0x1e>
			}
		}

	wr_sectors(diguits, val_send[3], val_send[2], val_send[1], val_send[0]);
 800520e:	8afb      	ldrh	r3, [r7, #22]
 8005210:	b2d8      	uxtb	r0, r3
 8005212:	8a7b      	ldrh	r3, [r7, #18]
 8005214:	b2d9      	uxtb	r1, r3
 8005216:	8a3b      	ldrh	r3, [r7, #16]
 8005218:	b2da      	uxtb	r2, r3
 800521a:	89fb      	ldrh	r3, [r7, #14]
 800521c:	b2dc      	uxtb	r4, r3
 800521e:	89bb      	ldrh	r3, [r7, #12]
 8005220:	b2db      	uxtb	r3, r3
 8005222:	9300      	str	r3, [sp, #0]
 8005224:	4623      	mov	r3, r4
 8005226:	f7ff ff3f 	bl	80050a8 <wr_sectors>
	}
}
 800522a:	bf00      	nop
 800522c:	371c      	adds	r7, #28
 800522e:	46bd      	mov	sp, r7
 8005230:	bd90      	pop	{r4, r7, pc}
 8005232:	bf00      	nop
 8005234:	cccccccd 	.word	0xcccccccd

08005238 <wr_com_poin>:

extern void wr_com_poin(uint8_t set_c_p)
{
 8005238:	b580      	push	{r7, lr}
 800523a:	b088      	sub	sp, #32
 800523c:	af02      	add	r7, sp, #8
 800523e:	4603      	mov	r3, r0
 8005240:	71fb      	strb	r3, [r7, #7]
	uint8_t *str;
	static int val_ant=10;
	if(val_ant!=set_c_p)
 8005242:	79fa      	ldrb	r2, [r7, #7]
 8005244:	4b18      	ldr	r3, [pc, #96]	; (80052a8 <wr_com_poin+0x70>)
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	429a      	cmp	r2, r3
 800524a:	d028      	beq.n	800529e <wr_com_poin+0x66>
	{
		set_colum_cords(55, 69, 2, 7);
 800524c:	2307      	movs	r3, #7
 800524e:	2202      	movs	r2, #2
 8005250:	2145      	movs	r1, #69	; 0x45
 8005252:	2037      	movs	r0, #55	; 0x37
 8005254:	f7ff fece 	bl	8004ff4 <set_colum_cords>
		str= p_c_get(set_c_p);
 8005258:	79fb      	ldrb	r3, [r7, #7]
 800525a:	4618      	mov	r0, r3
 800525c:	f000 fae0 	bl	8005820 <p_c_get>
 8005260:	6138      	str	r0, [r7, #16]
		uint8_t send_img[2];
		uint16_t value=0;
 8005262:	2300      	movs	r3, #0
 8005264:	82fb      	strh	r3, [r7, #22]
		send_img[0]=0x40;
 8005266:	2340      	movs	r3, #64	; 0x40
 8005268:	733b      	strb	r3, [r7, #12]
		for (value = 0; value < 30; ++value)
 800526a:	2300      	movs	r3, #0
 800526c:	82fb      	strh	r3, [r7, #22]
 800526e:	e010      	b.n	8005292 <wr_com_poin+0x5a>
		{
				send_img[1]=*(str+value);
 8005270:	8afb      	ldrh	r3, [r7, #22]
 8005272:	693a      	ldr	r2, [r7, #16]
 8005274:	4413      	add	r3, r2
 8005276:	781b      	ldrb	r3, [r3, #0]
 8005278:	737b      	strb	r3, [r7, #13]
				HAL_I2C_Master_Transmit(&I2C_P2, Address_LCD, send_img, 2, 1);
 800527a:	f107 020c 	add.w	r2, r7, #12
 800527e:	2301      	movs	r3, #1
 8005280:	9300      	str	r3, [sp, #0]
 8005282:	2302      	movs	r3, #2
 8005284:	2178      	movs	r1, #120	; 0x78
 8005286:	4809      	ldr	r0, [pc, #36]	; (80052ac <wr_com_poin+0x74>)
 8005288:	f7fc fdf2 	bl	8001e70 <HAL_I2C_Master_Transmit>
		for (value = 0; value < 30; ++value)
 800528c:	8afb      	ldrh	r3, [r7, #22]
 800528e:	3301      	adds	r3, #1
 8005290:	82fb      	strh	r3, [r7, #22]
 8005292:	8afb      	ldrh	r3, [r7, #22]
 8005294:	2b1d      	cmp	r3, #29
 8005296:	d9eb      	bls.n	8005270 <wr_com_poin+0x38>
		}
		val_ant=set_c_p;
 8005298:	79fb      	ldrb	r3, [r7, #7]
 800529a:	4a03      	ldr	r2, [pc, #12]	; (80052a8 <wr_com_poin+0x70>)
 800529c:	6013      	str	r3, [r2, #0]
	}

}
 800529e:	bf00      	nop
 80052a0:	3718      	adds	r7, #24
 80052a2:	46bd      	mov	sp, r7
 80052a4:	bd80      	pop	{r7, pc}
 80052a6:	bf00      	nop
 80052a8:	20000138 	.word	0x20000138
 80052ac:	2000086c 	.word	0x2000086c

080052b0 <show_h_t>:

extern void show_h_t(uint8_t t_h)
{
 80052b0:	b580      	push	{r7, lr}
 80052b2:	b086      	sub	sp, #24
 80052b4:	af00      	add	r7, sp, #0
 80052b6:	4603      	mov	r3, r0
 80052b8:	71fb      	strb	r3, [r7, #7]
	float t,h;
	Get_t_h(&t, &h);
 80052ba:	f107 020c 	add.w	r2, r7, #12
 80052be:	f107 0310 	add.w	r3, r7, #16
 80052c2:	4611      	mov	r1, r2
 80052c4:	4618      	mov	r0, r3
 80052c6:	f7fe fd01 	bl	8003ccc <Get_t_h>
	uint16_t temp=0,hum=0;
 80052ca:	2300      	movs	r3, #0
 80052cc:	82fb      	strh	r3, [r7, #22]
 80052ce:	2300      	movs	r3, #0
 80052d0:	82bb      	strh	r3, [r7, #20]
	wr_com_poin(0);
 80052d2:	2000      	movs	r0, #0
 80052d4:	f7ff ffb0 	bl	8005238 <wr_com_poin>
	if(t_h==0)
 80052d8:	79fb      	ldrb	r3, [r7, #7]
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d110      	bne.n	8005300 <show_h_t+0x50>
	{

		temp=(ath_tem) *100;
 80052de:	4b12      	ldr	r3, [pc, #72]	; (8005328 <show_h_t+0x78>)
 80052e0:	edd3 7a00 	vldr	s15, [r3]
 80052e4:	ed9f 7a11 	vldr	s14, [pc, #68]	; 800532c <show_h_t+0x7c>
 80052e8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80052ec:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80052f0:	ee17 3a90 	vmov	r3, s15
 80052f4:	82fb      	strh	r3, [r7, #22]
		wr_number(temp);
 80052f6:	8afb      	ldrh	r3, [r7, #22]
 80052f8:	4618      	mov	r0, r3
 80052fa:	f7ff ff4d 	bl	8005198 <wr_number>
	else
	{
		hum=(ath_hum) *100;
		wr_number(hum);
	}
}
 80052fe:	e00f      	b.n	8005320 <show_h_t+0x70>
		hum=(ath_hum) *100;
 8005300:	4b0b      	ldr	r3, [pc, #44]	; (8005330 <show_h_t+0x80>)
 8005302:	edd3 7a00 	vldr	s15, [r3]
 8005306:	ed9f 7a09 	vldr	s14, [pc, #36]	; 800532c <show_h_t+0x7c>
 800530a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800530e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005312:	ee17 3a90 	vmov	r3, s15
 8005316:	82bb      	strh	r3, [r7, #20]
		wr_number(hum);
 8005318:	8abb      	ldrh	r3, [r7, #20]
 800531a:	4618      	mov	r0, r3
 800531c:	f7ff ff3c 	bl	8005198 <wr_number>
}
 8005320:	bf00      	nop
 8005322:	3718      	adds	r7, #24
 8005324:	46bd      	mov	sp, r7
 8005326:	bd80      	pop	{r7, pc}
 8005328:	200008c8 	.word	0x200008c8
 800532c:	42c80000 	.word	0x42c80000
 8005330:	200008cc 	.word	0x200008cc

08005334 <write_image>:
	}
	wr_com_poin(erase_sec);
}

extern void write_image(uint8_t Imagen_select)
{
 8005334:	b580      	push	{r7, lr}
 8005336:	b086      	sub	sp, #24
 8005338:	af02      	add	r7, sp, #8
 800533a:	4603      	mov	r3, r0
 800533c:	71fb      	strb	r3, [r7, #7]
	uint8_t *ptc_image, var,image[2];
	uint8_t var2=0;
 800533e:	2300      	movs	r3, #0
 8005340:	72bb      	strb	r3, [r7, #10]
	set_colum_cords(0, Max_layer_x, 0, 7);
 8005342:	2307      	movs	r3, #7
 8005344:	2200      	movs	r2, #0
 8005346:	213f      	movs	r1, #63	; 0x3f
 8005348:	2000      	movs	r0, #0
 800534a:	f7ff fe53 	bl	8004ff4 <set_colum_cords>

	image[0]=0x40;
 800534e:	2340      	movs	r3, #64	; 0x40
 8005350:	723b      	strb	r3, [r7, #8]
	for (var = 0; var < Max_layer_y; var++)
 8005352:	2300      	movs	r3, #0
 8005354:	72fb      	strb	r3, [r7, #11]
 8005356:	e027      	b.n	80053a8 <write_image+0x74>
	{
		if(Imagen_select == 0) ptc_image = Get_image(var);
 8005358:	79fb      	ldrb	r3, [r7, #7]
 800535a:	2b00      	cmp	r3, #0
 800535c:	d105      	bne.n	800536a <write_image+0x36>
 800535e:	7afb      	ldrb	r3, [r7, #11]
 8005360:	4618      	mov	r0, r3
 8005362:	f000 fa85 	bl	8005870 <Get_image>
 8005366:	60f8      	str	r0, [r7, #12]
 8005368:	e004      	b.n	8005374 <write_image+0x40>

		else
		{
			ptc_image = Get_image_humed(var);
 800536a:	7afb      	ldrb	r3, [r7, #11]
 800536c:	4618      	mov	r0, r3
 800536e:	f000 facd 	bl	800590c <Get_image_humed>
 8005372:	60f8      	str	r0, [r7, #12]
		}

		for (var2 = 0; var2 < Max_layer_x; var2++)
 8005374:	2300      	movs	r3, #0
 8005376:	72bb      	strb	r3, [r7, #10]
 8005378:	e010      	b.n	800539c <write_image+0x68>
		{
			image[1]=*(ptc_image+var2);
 800537a:	7abb      	ldrb	r3, [r7, #10]
 800537c:	68fa      	ldr	r2, [r7, #12]
 800537e:	4413      	add	r3, r2
 8005380:	781b      	ldrb	r3, [r3, #0]
 8005382:	727b      	strb	r3, [r7, #9]
			HAL_I2C_Master_Transmit(&I2C_P2, Address_LCD, image, 2, 1);
 8005384:	f107 0208 	add.w	r2, r7, #8
 8005388:	2301      	movs	r3, #1
 800538a:	9300      	str	r3, [sp, #0]
 800538c:	2302      	movs	r3, #2
 800538e:	2178      	movs	r1, #120	; 0x78
 8005390:	4809      	ldr	r0, [pc, #36]	; (80053b8 <write_image+0x84>)
 8005392:	f7fc fd6d 	bl	8001e70 <HAL_I2C_Master_Transmit>
		for (var2 = 0; var2 < Max_layer_x; var2++)
 8005396:	7abb      	ldrb	r3, [r7, #10]
 8005398:	3301      	adds	r3, #1
 800539a:	72bb      	strb	r3, [r7, #10]
 800539c:	7abb      	ldrb	r3, [r7, #10]
 800539e:	2b3e      	cmp	r3, #62	; 0x3e
 80053a0:	d9eb      	bls.n	800537a <write_image+0x46>
	for (var = 0; var < Max_layer_y; var++)
 80053a2:	7afb      	ldrb	r3, [r7, #11]
 80053a4:	3301      	adds	r3, #1
 80053a6:	72fb      	strb	r3, [r7, #11]
 80053a8:	7afb      	ldrb	r3, [r7, #11]
 80053aa:	2b06      	cmp	r3, #6
 80053ac:	d9d4      	bls.n	8005358 <write_image+0x24>
		}

	}
}
 80053ae:	bf00      	nop
 80053b0:	bf00      	nop
 80053b2:	3710      	adds	r7, #16
 80053b4:	46bd      	mov	sp, r7
 80053b6:	bd80      	pop	{r7, pc}
 80053b8:	2000086c 	.word	0x2000086c

080053bc <SIG_RESET_LCD>:
/**
  * @brief  Reset via Signal
  * @retval None
  */
void SIG_RESET_LCD(void)
{
 80053bc:	b580      	push	{r7, lr}
 80053be:	af00      	add	r7, sp, #0

	HAL_GPIO_WritePin(RES_GPIO_Port, RES_Pin, GPIO_PIN_RESET);
 80053c0:	2200      	movs	r2, #0
 80053c2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80053c6:	4807      	ldr	r0, [pc, #28]	; (80053e4 <SIG_RESET_LCD+0x28>)
 80053c8:	f7fc fbb6 	bl	8001b38 <HAL_GPIO_WritePin>
	HAL_Delay(4);
 80053cc:	2004      	movs	r0, #4
 80053ce:	f7fc f8f9 	bl	80015c4 <HAL_Delay>
	HAL_GPIO_WritePin(RES_GPIO_Port, RES_Pin, GPIO_PIN_SET);
 80053d2:	2201      	movs	r2, #1
 80053d4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80053d8:	4802      	ldr	r0, [pc, #8]	; (80053e4 <SIG_RESET_LCD+0x28>)
 80053da:	f7fc fbad 	bl	8001b38 <HAL_GPIO_WritePin>
}
 80053de:	bf00      	nop
 80053e0:	bd80      	pop	{r7, pc}
 80053e2:	bf00      	nop
 80053e4:	40020000 	.word	0x40020000

080053e8 <init_Pins>:
/**
  * @brief  Define pins for use on control LCD
  * @retval None
  */
extern void init_Pins(void)
{
 80053e8:	b580      	push	{r7, lr}
 80053ea:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(CS_ST7_GPIO_Port, CS_ST7_Pin, GPIO_PIN_SET);
 80053ec:	2201      	movs	r2, #1
 80053ee:	f44f 7100 	mov.w	r1, #512	; 0x200
 80053f2:	480a      	ldr	r0, [pc, #40]	; (800541c <init_Pins+0x34>)
 80053f4:	f7fc fba0 	bl	8001b38 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RES_GPIO_Port, RES_Pin, GPIO_PIN_SET);
 80053f8:	2201      	movs	r2, #1
 80053fa:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80053fe:	4807      	ldr	r0, [pc, #28]	; (800541c <init_Pins+0x34>)
 8005400:	f7fc fb9a 	bl	8001b38 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DC_GPIO_Port, DC_Pin, GPIO_PIN_SET);
 8005404:	2201      	movs	r2, #1
 8005406:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800540a:	4804      	ldr	r0, [pc, #16]	; (800541c <init_Pins+0x34>)
 800540c:	f7fc fb94 	bl	8001b38 <HAL_GPIO_WritePin>
	HAL_Delay(6);
 8005410:	2006      	movs	r0, #6
 8005412:	f7fc f8d7 	bl	80015c4 <HAL_Delay>

}
 8005416:	bf00      	nop
 8005418:	bd80      	pop	{r7, pc}
 800541a:	bf00      	nop
 800541c:	40020000 	.word	0x40020000

08005420 <init_LCD_S7>:
  * @param  Start of pixel on axis x
  * @param  Start of pixel on axis y
  * @retval None
  */
void init_LCD_S7(void)
{
 8005420:	b580      	push	{r7, lr}
 8005422:	af00      	add	r7, sp, #0

	SIG_RESET_LCD();
 8005424:	f7ff ffca 	bl	80053bc <SIG_RESET_LCD>
	HAL_Delay(2);
 8005428:	2002      	movs	r0, #2
 800542a:	f7fc f8cb 	bl	80015c4 <HAL_Delay>
	write_Comand(1);
 800542e:	2001      	movs	r0, #1
 8005430:	f7ff fc7a 	bl	8004d28 <write_Comand>
	HAL_Delay(3);
 8005434:	2003      	movs	r0, #3
 8005436:	f7fc f8c5 	bl	80015c4 <HAL_Delay>
	write_Comand(0x11);
 800543a:	2011      	movs	r0, #17
 800543c:	f7ff fc74 	bl	8004d28 <write_Comand>
	HAL_Delay(3);
 8005440:	2003      	movs	r0, #3
 8005442:	f7fc f8bf 	bl	80015c4 <HAL_Delay>
}
 8005446:	bf00      	nop
 8005448:	bd80      	pop	{r7, pc}

0800544a <Partial_Reset>:
/**
  * @brief  Reset via comands
  * @retval None
  */
void Partial_Reset(void)
{
 800544a:	b580      	push	{r7, lr}
 800544c:	af00      	add	r7, sp, #0
	write_Comand(Partial_off);
 800544e:	2013      	movs	r0, #19
 8005450:	f7ff fc6a 	bl	8004d28 <write_Comand>
	HAL_Delay(3);
 8005454:	2003      	movs	r0, #3
 8005456:	f7fc f8b5 	bl	80015c4 <HAL_Delay>
	write_Comand(Partial_on);
 800545a:	2029      	movs	r0, #41	; 0x29
 800545c:	f7ff fc64 	bl	8004d28 <write_Comand>
	HAL_Delay(3);
 8005460:	2003      	movs	r0, #3
 8005462:	f7fc f8af 	bl	80015c4 <HAL_Delay>
}
 8005466:	bf00      	nop
 8005468:	bd80      	pop	{r7, pc}

0800546a <Set_X_Y>:
  * @param  Start of pixel on axis x
  * @param  Start of pixel on axis y
  * @retval None
  */
void Set_X_Y(uint8_t axis_X, uint16_t axis_Y)
{
 800546a:	b580      	push	{r7, lr}
 800546c:	b086      	sub	sp, #24
 800546e:	af00      	add	r7, sp, #0
 8005470:	4603      	mov	r3, r0
 8005472:	460a      	mov	r2, r1
 8005474:	71fb      	strb	r3, [r7, #7]
 8005476:	4613      	mov	r3, r2
 8005478:	80bb      	strh	r3, [r7, #4]
	axis_Y= axis_Y+ (uint8_t)20;
 800547a:	88bb      	ldrh	r3, [r7, #4]
 800547c:	3314      	adds	r3, #20
 800547e:	80bb      	strh	r3, [r7, #4]

	if(axis_X < 0xF0 && axis_Y < 0x012C)
 8005480:	79fb      	ldrb	r3, [r7, #7]
 8005482:	2bef      	cmp	r3, #239	; 0xef
 8005484:	d824      	bhi.n	80054d0 <Set_X_Y+0x66>
 8005486:	88bb      	ldrh	r3, [r7, #4]
 8005488:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 800548c:	d220      	bcs.n	80054d0 <Set_X_Y+0x66>
	{

		uint8_t Colum_addres1[]   =	{0x2A, 0x00, axis_X, 0x00, 0xF0};	//set the width column start on 0 and end on 240
 800548e:	232a      	movs	r3, #42	; 0x2a
 8005490:	743b      	strb	r3, [r7, #16]
 8005492:	2300      	movs	r3, #0
 8005494:	747b      	strb	r3, [r7, #17]
 8005496:	79fb      	ldrb	r3, [r7, #7]
 8005498:	74bb      	strb	r3, [r7, #18]
 800549a:	2300      	movs	r3, #0
 800549c:	74fb      	strb	r3, [r7, #19]
 800549e:	23f0      	movs	r3, #240	; 0xf0
 80054a0:	753b      	strb	r3, [r7, #20]
		uint8_t Colum_addres2[]   =	{0x2B, (uint8_t)(axis_Y & 0xFF00), (uint8_t) (axis_Y), 0x01, 0x2C};	//set the width row start on 20 and end on 300
 80054a2:	232b      	movs	r3, #43	; 0x2b
 80054a4:	723b      	strb	r3, [r7, #8]
 80054a6:	2300      	movs	r3, #0
 80054a8:	727b      	strb	r3, [r7, #9]
 80054aa:	88bb      	ldrh	r3, [r7, #4]
 80054ac:	b2db      	uxtb	r3, r3
 80054ae:	72bb      	strb	r3, [r7, #10]
 80054b0:	2301      	movs	r3, #1
 80054b2:	72fb      	strb	r3, [r7, #11]
 80054b4:	232c      	movs	r3, #44	; 0x2c
 80054b6:	733b      	strb	r3, [r7, #12]

		write_value_C_D(Colum_addres1, sizeof(Colum_addres1) - 1 );
 80054b8:	f107 0310 	add.w	r3, r7, #16
 80054bc:	2104      	movs	r1, #4
 80054be:	4618      	mov	r0, r3
 80054c0:	f7ff fc5a 	bl	8004d78 <write_value_C_D>
		write_value_C_D(Colum_addres2, sizeof(Colum_addres2) - 1 );
 80054c4:	f107 0308 	add.w	r3, r7, #8
 80054c8:	2104      	movs	r1, #4
 80054ca:	4618      	mov	r0, r3
 80054cc:	f7ff fc54 	bl	8004d78 <write_value_C_D>
	}
}
 80054d0:	bf00      	nop
 80054d2:	3718      	adds	r7, #24
 80054d4:	46bd      	mov	sp, r7
 80054d6:	bd80      	pop	{r7, pc}

080054d8 <Set_Etart_X_Y_End>:
  * @param  Start of pixel on axis y
  * @param  End of pixel on axis y
  * @retval None
  */
void Set_Etart_X_Y_End(uint8_t axis_X_Start, uint8_t axis_X_End,   uint16_t axis_Y_Start, uint16_t axis_Y_End )
{
 80054d8:	b590      	push	{r4, r7, lr}
 80054da:	b087      	sub	sp, #28
 80054dc:	af00      	add	r7, sp, #0
 80054de:	4604      	mov	r4, r0
 80054e0:	4608      	mov	r0, r1
 80054e2:	4611      	mov	r1, r2
 80054e4:	461a      	mov	r2, r3
 80054e6:	4623      	mov	r3, r4
 80054e8:	71fb      	strb	r3, [r7, #7]
 80054ea:	4603      	mov	r3, r0
 80054ec:	71bb      	strb	r3, [r7, #6]
 80054ee:	460b      	mov	r3, r1
 80054f0:	80bb      	strh	r3, [r7, #4]
 80054f2:	4613      	mov	r3, r2
 80054f4:	807b      	strh	r3, [r7, #2]
	axis_Y_Start= axis_Y_Start+ (uint8_t)20;
 80054f6:	88bb      	ldrh	r3, [r7, #4]
 80054f8:	3314      	adds	r3, #20
 80054fa:	80bb      	strh	r3, [r7, #4]
	if(axis_X_End > 240 ) axis_X_End = 240;
 80054fc:	79bb      	ldrb	r3, [r7, #6]
 80054fe:	2bf0      	cmp	r3, #240	; 0xf0
 8005500:	d901      	bls.n	8005506 <Set_Etart_X_Y_End+0x2e>
 8005502:	23f0      	movs	r3, #240	; 0xf0
 8005504:	71bb      	strb	r3, [r7, #6]
	if(axis_Y_End > 300 ) axis_Y_End = 300;
 8005506:	887b      	ldrh	r3, [r7, #2]
 8005508:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 800550c:	d902      	bls.n	8005514 <Set_Etart_X_Y_End+0x3c>
 800550e:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8005512:	807b      	strh	r3, [r7, #2]

	if(axis_X_Start < 0xF0 && axis_Y_Start < 0x012C)
 8005514:	79fb      	ldrb	r3, [r7, #7]
 8005516:	2bef      	cmp	r3, #239	; 0xef
 8005518:	d82b      	bhi.n	8005572 <Set_Etart_X_Y_End+0x9a>
 800551a:	88bb      	ldrh	r3, [r7, #4]
 800551c:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8005520:	d227      	bcs.n	8005572 <Set_Etart_X_Y_End+0x9a>
	{

		uint8_t Colum_addres1[]   =	{0x2A, 0x00, axis_X_Start, 0x00, axis_X_End};	//set the width column start on 0 and end on 240
 8005522:	232a      	movs	r3, #42	; 0x2a
 8005524:	743b      	strb	r3, [r7, #16]
 8005526:	2300      	movs	r3, #0
 8005528:	747b      	strb	r3, [r7, #17]
 800552a:	79fb      	ldrb	r3, [r7, #7]
 800552c:	74bb      	strb	r3, [r7, #18]
 800552e:	2300      	movs	r3, #0
 8005530:	74fb      	strb	r3, [r7, #19]
 8005532:	79bb      	ldrb	r3, [r7, #6]
 8005534:	753b      	strb	r3, [r7, #20]
		uint8_t Colum_addres2[]   =	{0x2B, (uint8_t)((axis_Y_Start & 0xFF00)>>8 ), (uint8_t) (axis_Y_Start), (uint8_t)((axis_Y_End & 0xFF00)>>8 ), (uint8_t) (axis_Y_End)};	//set the width row start on 20 and end on 300
 8005536:	232b      	movs	r3, #43	; 0x2b
 8005538:	723b      	strb	r3, [r7, #8]
 800553a:	88bb      	ldrh	r3, [r7, #4]
 800553c:	0a1b      	lsrs	r3, r3, #8
 800553e:	b29b      	uxth	r3, r3
 8005540:	b2db      	uxtb	r3, r3
 8005542:	727b      	strb	r3, [r7, #9]
 8005544:	88bb      	ldrh	r3, [r7, #4]
 8005546:	b2db      	uxtb	r3, r3
 8005548:	72bb      	strb	r3, [r7, #10]
 800554a:	887b      	ldrh	r3, [r7, #2]
 800554c:	0a1b      	lsrs	r3, r3, #8
 800554e:	b29b      	uxth	r3, r3
 8005550:	b2db      	uxtb	r3, r3
 8005552:	72fb      	strb	r3, [r7, #11]
 8005554:	887b      	ldrh	r3, [r7, #2]
 8005556:	b2db      	uxtb	r3, r3
 8005558:	733b      	strb	r3, [r7, #12]

		write_value_C_D(Colum_addres1, sizeof(Colum_addres1) - 1 );
 800555a:	f107 0310 	add.w	r3, r7, #16
 800555e:	2104      	movs	r1, #4
 8005560:	4618      	mov	r0, r3
 8005562:	f7ff fc09 	bl	8004d78 <write_value_C_D>
		write_value_C_D(Colum_addres2, sizeof(Colum_addres2) - 1 );
 8005566:	f107 0308 	add.w	r3, r7, #8
 800556a:	2104      	movs	r1, #4
 800556c:	4618      	mov	r0, r3
 800556e:	f7ff fc03 	bl	8004d78 <write_value_C_D>
	}
}
 8005572:	bf00      	nop
 8005574:	371c      	adds	r7, #28
 8005576:	46bd      	mov	sp, r7
 8005578:	bd90      	pop	{r4, r7, pc}
	...

0800557c <Set_All_LCD_RGB>:
  * @param  G set the value on Green
  * @param  B set the value of Blue
  * @retval None
  */
void Set_All_LCD_RGB(uint8_t R, uint8_t G , uint8_t B)
{
 800557c:	b580      	push	{r7, lr}
 800557e:	b084      	sub	sp, #16
 8005580:	af00      	add	r7, sp, #0
 8005582:	4603      	mov	r3, r0
 8005584:	71fb      	strb	r3, [r7, #7]
 8005586:	460b      	mov	r3, r1
 8005588:	71bb      	strb	r3, [r7, #6]
 800558a:	4613      	mov	r3, r2
 800558c:	717b      	strb	r3, [r7, #5]
	uint16_t RGB_color = RGB_8b_to_5b_(R,G,B);
 800558e:	797a      	ldrb	r2, [r7, #5]
 8005590:	79b9      	ldrb	r1, [r7, #6]
 8005592:	79fb      	ldrb	r3, [r7, #7]
 8005594:	4618      	mov	r0, r3
 8005596:	f000 f875 	bl	8005684 <RGB_8b_to_5b_>
 800559a:	4603      	mov	r3, r0
 800559c:	81fb      	strh	r3, [r7, #14]
	uint8_t RGB_Color[]={ (uint8_t) ((RGB_color & 0xFF00 ) >> 8), (uint8_t) (RGB_color & 0xFF)};
 800559e:	89fb      	ldrh	r3, [r7, #14]
 80055a0:	0a1b      	lsrs	r3, r3, #8
 80055a2:	b29b      	uxth	r3, r3
 80055a4:	b2db      	uxtb	r3, r3
 80055a6:	733b      	strb	r3, [r7, #12]
 80055a8:	89fb      	ldrh	r3, [r7, #14]
 80055aa:	b2db      	uxtb	r3, r3
 80055ac:	737b      	strb	r3, [r7, #13]

	Color_background = RGB_8b_to_5b_(R, G, B);
 80055ae:	797a      	ldrb	r2, [r7, #5]
 80055b0:	79b9      	ldrb	r1, [r7, #6]
 80055b2:	79fb      	ldrb	r3, [r7, #7]
 80055b4:	4618      	mov	r0, r3
 80055b6:	f000 f865 	bl	8005684 <RGB_8b_to_5b_>
 80055ba:	4603      	mov	r3, r0
 80055bc:	461a      	mov	r2, r3
 80055be:	4b08      	ldr	r3, [pc, #32]	; (80055e0 <Set_All_LCD_RGB+0x64>)
 80055c0:	801a      	strh	r2, [r3, #0]
	Set_X_Y(0, 0);
 80055c2:	2100      	movs	r1, #0
 80055c4:	2000      	movs	r0, #0
 80055c6:	f7ff ff50 	bl	800546a <Set_X_Y>
	Com_Value_rep(0x2C,RGB_Color, 0x10680);
 80055ca:	f107 030c 	add.w	r3, r7, #12
 80055ce:	4a05      	ldr	r2, [pc, #20]	; (80055e4 <Set_All_LCD_RGB+0x68>)
 80055d0:	4619      	mov	r1, r3
 80055d2:	202c      	movs	r0, #44	; 0x2c
 80055d4:	f7ff fc00 	bl	8004dd8 <Com_Value_rep>
}
 80055d8:	bf00      	nop
 80055da:	3710      	adds	r7, #16
 80055dc:	46bd      	mov	sp, r7
 80055de:	bd80      	pop	{r7, pc}
 80055e0:	20000bd4 	.word	0x20000bd4
 80055e4:	00010680 	.word	0x00010680

080055e8 <Mem_acces_crt>:
  * @brief  Memori access control
  * @param  Acces control configurations bits
  * @retval None
  */
extern void Mem_acces_crt(uint8_t Acc_Crt)
{
 80055e8:	b580      	push	{r7, lr}
 80055ea:	b084      	sub	sp, #16
 80055ec:	af00      	add	r7, sp, #0
 80055ee:	4603      	mov	r3, r0
 80055f0:	71fb      	strb	r3, [r7, #7]
	uint8_t Mem_acces[] = {0x36,Acc_Crt};
 80055f2:	2336      	movs	r3, #54	; 0x36
 80055f4:	733b      	strb	r3, [r7, #12]
 80055f6:	79fb      	ldrb	r3, [r7, #7]
 80055f8:	737b      	strb	r3, [r7, #13]
	write_value_C_D(Mem_acces, sizeof(Mem_acces) - 1 );
 80055fa:	f107 030c 	add.w	r3, r7, #12
 80055fe:	2101      	movs	r1, #1
 8005600:	4618      	mov	r0, r3
 8005602:	f7ff fbb9 	bl	8004d78 <write_value_C_D>

}
 8005606:	bf00      	nop
 8005608:	3710      	adds	r7, #16
 800560a:	46bd      	mov	sp, r7
 800560c:	bd80      	pop	{r7, pc}

0800560e <Pixel_format>:
  * @brief  pixel format refried to datashet
  * @param  pixel format configurations bits
  * @retval None
  */
extern void Pixel_format(Pixel_Format Format_Pix)
{
 800560e:	b580      	push	{r7, lr}
 8005610:	b084      	sub	sp, #16
 8005612:	af00      	add	r7, sp, #0
 8005614:	7138      	strb	r0, [r7, #4]
	uint8_t value_pix_frmt = (Format_Pix.RGB_IF_Col_frm << (uint8_t)4) | Format_Pix.Color_IF_Frm;
 8005616:	793b      	ldrb	r3, [r7, #4]
 8005618:	f3c3 03c2 	ubfx	r3, r3, #3, #3
 800561c:	b2db      	uxtb	r3, r3
 800561e:	011b      	lsls	r3, r3, #4
 8005620:	b25a      	sxtb	r2, r3
 8005622:	793b      	ldrb	r3, [r7, #4]
 8005624:	f3c3 0302 	ubfx	r3, r3, #0, #3
 8005628:	b2db      	uxtb	r3, r3
 800562a:	b25b      	sxtb	r3, r3
 800562c:	4313      	orrs	r3, r2
 800562e:	b25b      	sxtb	r3, r3
 8005630:	73fb      	strb	r3, [r7, #15]
	uint8_t pix_formt[] = {0x3A,value_pix_frmt};
 8005632:	233a      	movs	r3, #58	; 0x3a
 8005634:	733b      	strb	r3, [r7, #12]
 8005636:	7bfb      	ldrb	r3, [r7, #15]
 8005638:	737b      	strb	r3, [r7, #13]
	write_value_C_D(pix_formt, sizeof(pix_formt) - 1 );
 800563a:	f107 030c 	add.w	r3, r7, #12
 800563e:	2101      	movs	r1, #1
 8005640:	4618      	mov	r0, r3
 8005642:	f7ff fb99 	bl	8004d78 <write_value_C_D>
	HAL_Delay(5);
 8005646:	2005      	movs	r0, #5
 8005648:	f7fb ffbc 	bl	80015c4 <HAL_Delay>
}
 800564c:	bf00      	nop
 800564e:	3710      	adds	r7, #16
 8005650:	46bd      	mov	sp, r7
 8005652:	bd80      	pop	{r7, pc}

08005654 <RGB_1DAT_Pix_Num>:
}



extern void RGB_1DAT_Pix_Num(uint16_t RGB_color, uint32_t number)
{
 8005654:	b580      	push	{r7, lr}
 8005656:	b084      	sub	sp, #16
 8005658:	af00      	add	r7, sp, #0
 800565a:	4603      	mov	r3, r0
 800565c:	6039      	str	r1, [r7, #0]
 800565e:	80fb      	strh	r3, [r7, #6]

	uint8_t RGB_Color[]={ (uint8_t) ((RGB_color & 0xFF00 ) >> 8), (uint8_t) (RGB_color & 0xFF)};
 8005660:	88fb      	ldrh	r3, [r7, #6]
 8005662:	0a1b      	lsrs	r3, r3, #8
 8005664:	b29b      	uxth	r3, r3
 8005666:	b2db      	uxtb	r3, r3
 8005668:	733b      	strb	r3, [r7, #12]
 800566a:	88fb      	ldrh	r3, [r7, #6]
 800566c:	b2db      	uxtb	r3, r3
 800566e:	737b      	strb	r3, [r7, #13]

	Contin_wr_pix(RGB_Color, number);
 8005670:	f107 030c 	add.w	r3, r7, #12
 8005674:	6839      	ldr	r1, [r7, #0]
 8005676:	4618      	mov	r0, r3
 8005678:	f7ff fc0e 	bl	8004e98 <Contin_wr_pix>

}
 800567c:	bf00      	nop
 800567e:	3710      	adds	r7, #16
 8005680:	46bd      	mov	sp, r7
 8005682:	bd80      	pop	{r7, pc}

08005684 <RGB_8b_to_5b_>:
  * @param  B color Blue value
  * @param  number of repetition
  * @retval None
  */
static uint16_t RGB_8b_to_5b_(uint8_t R, uint8_t G , uint8_t B)
{
 8005684:	b480      	push	{r7}
 8005686:	b085      	sub	sp, #20
 8005688:	af00      	add	r7, sp, #0
 800568a:	4603      	mov	r3, r0
 800568c:	71fb      	strb	r3, [r7, #7]
 800568e:	460b      	mov	r3, r1
 8005690:	71bb      	strb	r3, [r7, #6]
 8005692:	4613      	mov	r3, r2
 8005694:	717b      	strb	r3, [r7, #5]
	uint16_t val_ret;

	R=255-R;
 8005696:	79fb      	ldrb	r3, [r7, #7]
 8005698:	43db      	mvns	r3, r3
 800569a:	71fb      	strb	r3, [r7, #7]
	G=255-G;
 800569c:	79bb      	ldrb	r3, [r7, #6]
 800569e:	43db      	mvns	r3, r3
 80056a0:	71bb      	strb	r3, [r7, #6]
	B=255-B;
 80056a2:	797b      	ldrb	r3, [r7, #5]
 80056a4:	43db      	mvns	r3, r3
 80056a6:	717b      	strb	r3, [r7, #5]
	R = R/(255/31);
 80056a8:	79fb      	ldrb	r3, [r7, #7]
 80056aa:	08db      	lsrs	r3, r3, #3
 80056ac:	71fb      	strb	r3, [r7, #7]
	G = G/(255/63);
 80056ae:	79bb      	ldrb	r3, [r7, #6]
 80056b0:	089b      	lsrs	r3, r3, #2
 80056b2:	71bb      	strb	r3, [r7, #6]
	B = B/(255/31);
 80056b4:	797b      	ldrb	r3, [r7, #5]
 80056b6:	08db      	lsrs	r3, r3, #3
 80056b8:	717b      	strb	r3, [r7, #5]
	val_ret=(uint16_t) ( (R << 11) | (G <<5 ) | (B & 0x1F) );
 80056ba:	79fb      	ldrb	r3, [r7, #7]
 80056bc:	02db      	lsls	r3, r3, #11
 80056be:	b21a      	sxth	r2, r3
 80056c0:	79bb      	ldrb	r3, [r7, #6]
 80056c2:	015b      	lsls	r3, r3, #5
 80056c4:	b21b      	sxth	r3, r3
 80056c6:	4313      	orrs	r3, r2
 80056c8:	b21a      	sxth	r2, r3
 80056ca:	797b      	ldrb	r3, [r7, #5]
 80056cc:	b21b      	sxth	r3, r3
 80056ce:	f003 031f 	and.w	r3, r3, #31
 80056d2:	b21b      	sxth	r3, r3
 80056d4:	4313      	orrs	r3, r2
 80056d6:	b21b      	sxth	r3, r3
 80056d8:	81fb      	strh	r3, [r7, #14]

	return val_ret;
 80056da:	89fb      	ldrh	r3, [r7, #14]

}
 80056dc:	4618      	mov	r0, r3
 80056de:	3714      	adds	r7, #20
 80056e0:	46bd      	mov	sp, r7
 80056e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056e6:	4770      	bx	lr

080056e8 <WR_IMAGE_type_JPG>:

extern void WR_IMAGE_type_JPG(uint8_t ID_Image_JPG)
{
 80056e8:	b590      	push	{r4, r7, lr}
 80056ea:	b085      	sub	sp, #20
 80056ec:	af00      	add	r7, sp, #0
 80056ee:	4603      	mov	r3, r0
 80056f0:	71fb      	strb	r3, [r7, #7]
	uint32_t var;
	Set_Etart_X_Y_End(10,137, 10, 300);
 80056f2:	f44f 7396 	mov.w	r3, #300	; 0x12c
 80056f6:	220a      	movs	r2, #10
 80056f8:	2189      	movs	r1, #137	; 0x89
 80056fa:	200a      	movs	r0, #10
 80056fc:	f7ff feec 	bl	80054d8 <Set_Etart_X_Y_End>

	Eneble_cont_wr_mode(0x2C);
 8005700:	202c      	movs	r0, #44	; 0x2c
 8005702:	f7ff fba3 	bl	8004e4c <Eneble_cont_wr_mode>
	for (var = 0; var < 4405; var++)
 8005706:	2300      	movs	r3, #0
 8005708:	60fb      	str	r3, [r7, #12]
 800570a:	e018      	b.n	800573e <WR_IMAGE_type_JPG+0x56>
	{
		RGB_1DAT_Pix_Num( Get_IdImag_typeJPG(ID_Image_JPG)[var].RGB_color, Get_IdImag_typeJPG(ID_Image_JPG)[var].num_pix);
 800570c:	79fb      	ldrb	r3, [r7, #7]
 800570e:	4618      	mov	r0, r3
 8005710:	f7fe fd3e 	bl	8004190 <Get_IdImag_typeJPG>
 8005714:	4602      	mov	r2, r0
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	009b      	lsls	r3, r3, #2
 800571a:	4413      	add	r3, r2
 800571c:	881c      	ldrh	r4, [r3, #0]
 800571e:	79fb      	ldrb	r3, [r7, #7]
 8005720:	4618      	mov	r0, r3
 8005722:	f7fe fd35 	bl	8004190 <Get_IdImag_typeJPG>
 8005726:	4602      	mov	r2, r0
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	009b      	lsls	r3, r3, #2
 800572c:	4413      	add	r3, r2
 800572e:	885b      	ldrh	r3, [r3, #2]
 8005730:	4619      	mov	r1, r3
 8005732:	4620      	mov	r0, r4
 8005734:	f7ff ff8e 	bl	8005654 <RGB_1DAT_Pix_Num>
	for (var = 0; var < 4405; var++)
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	3301      	adds	r3, #1
 800573c:	60fb      	str	r3, [r7, #12]
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	f241 1234 	movw	r2, #4404	; 0x1134
 8005744:	4293      	cmp	r3, r2
 8005746:	d9e1      	bls.n	800570c <WR_IMAGE_type_JPG+0x24>
	}
	Disable_cont_wr_mode();
 8005748:	f7ff fbc2 	bl	8004ed0 <Disable_cont_wr_mode>
}
 800574c:	bf00      	nop
 800574e:	3714      	adds	r7, #20
 8005750:	46bd      	mov	sp, r7
 8005752:	bd90      	pop	{r4, r7, pc}

08005754 <test_swicht>:
uint8_t value_c_er[]={0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0,
					  0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0};


extern uint8_t* test_swicht(uint8_t value)
{
 8005754:	b480      	push	{r7}
 8005756:	b085      	sub	sp, #20
 8005758:	af00      	add	r7, sp, #0
 800575a:	4603      	mov	r3, r0
 800575c:	71fb      	strb	r3, [r7, #7]
	uint8_t *ret_dig;
	  switch (value) {
 800575e:	79fb      	ldrb	r3, [r7, #7]
 8005760:	2b09      	cmp	r3, #9
 8005762:	dc1b      	bgt.n	800579c <test_swicht+0x48>
 8005764:	2b00      	cmp	r3, #0
 8005766:	db3d      	blt.n	80057e4 <test_swicht+0x90>
 8005768:	2b09      	cmp	r3, #9
 800576a:	d83b      	bhi.n	80057e4 <test_swicht+0x90>
 800576c:	a201      	add	r2, pc, #4	; (adr r2, 8005774 <test_swicht+0x20>)
 800576e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005772:	bf00      	nop
 8005774:	080057a3 	.word	0x080057a3
 8005778:	080057a9 	.word	0x080057a9
 800577c:	080057af 	.word	0x080057af
 8005780:	080057b5 	.word	0x080057b5
 8005784:	080057bb 	.word	0x080057bb
 8005788:	080057c1 	.word	0x080057c1
 800578c:	080057c7 	.word	0x080057c7
 8005790:	080057cd 	.word	0x080057cd
 8005794:	080057d3 	.word	0x080057d3
 8005798:	080057d9 	.word	0x080057d9
 800579c:	2bff      	cmp	r3, #255	; 0xff
 800579e:	d01e      	beq.n	80057de <test_swicht+0x8a>
	case 0xFF:
	   ret_dig = value_send_FF;
		  break;

	 default:
	 break;
 80057a0:	e020      	b.n	80057e4 <test_swicht+0x90>
	   ret_dig = value_send_0;
 80057a2:	4b14      	ldr	r3, [pc, #80]	; (80057f4 <test_swicht+0xa0>)
 80057a4:	60fb      	str	r3, [r7, #12]
	  break;
 80057a6:	e01e      	b.n	80057e6 <test_swicht+0x92>
	   ret_dig = value_send_1;
 80057a8:	4b13      	ldr	r3, [pc, #76]	; (80057f8 <test_swicht+0xa4>)
 80057aa:	60fb      	str	r3, [r7, #12]
	  break;
 80057ac:	e01b      	b.n	80057e6 <test_swicht+0x92>
	   ret_dig = value_send_2;
 80057ae:	4b13      	ldr	r3, [pc, #76]	; (80057fc <test_swicht+0xa8>)
 80057b0:	60fb      	str	r3, [r7, #12]
	  break;
 80057b2:	e018      	b.n	80057e6 <test_swicht+0x92>
	   ret_dig = value_send_3;
 80057b4:	4b12      	ldr	r3, [pc, #72]	; (8005800 <test_swicht+0xac>)
 80057b6:	60fb      	str	r3, [r7, #12]
	  break;
 80057b8:	e015      	b.n	80057e6 <test_swicht+0x92>
	   ret_dig = value_send_4;
 80057ba:	4b12      	ldr	r3, [pc, #72]	; (8005804 <test_swicht+0xb0>)
 80057bc:	60fb      	str	r3, [r7, #12]
	  break;
 80057be:	e012      	b.n	80057e6 <test_swicht+0x92>
	   ret_dig = value_send_5;
 80057c0:	4b11      	ldr	r3, [pc, #68]	; (8005808 <test_swicht+0xb4>)
 80057c2:	60fb      	str	r3, [r7, #12]
	  break;
 80057c4:	e00f      	b.n	80057e6 <test_swicht+0x92>
	   ret_dig = value_send_6;
 80057c6:	4b11      	ldr	r3, [pc, #68]	; (800580c <test_swicht+0xb8>)
 80057c8:	60fb      	str	r3, [r7, #12]
	  break;
 80057ca:	e00c      	b.n	80057e6 <test_swicht+0x92>
	   ret_dig = value_send_7;
 80057cc:	4b10      	ldr	r3, [pc, #64]	; (8005810 <test_swicht+0xbc>)
 80057ce:	60fb      	str	r3, [r7, #12]
	  break;
 80057d0:	e009      	b.n	80057e6 <test_swicht+0x92>
	   ret_dig = value_send_8;
 80057d2:	4b10      	ldr	r3, [pc, #64]	; (8005814 <test_swicht+0xc0>)
 80057d4:	60fb      	str	r3, [r7, #12]
	  break;
 80057d6:	e006      	b.n	80057e6 <test_swicht+0x92>
	   ret_dig = value_send_9;
 80057d8:	4b0f      	ldr	r3, [pc, #60]	; (8005818 <test_swicht+0xc4>)
 80057da:	60fb      	str	r3, [r7, #12]
	  break;
 80057dc:	e003      	b.n	80057e6 <test_swicht+0x92>
	   ret_dig = value_send_FF;
 80057de:	4b0f      	ldr	r3, [pc, #60]	; (800581c <test_swicht+0xc8>)
 80057e0:	60fb      	str	r3, [r7, #12]
		  break;
 80057e2:	e000      	b.n	80057e6 <test_swicht+0x92>
	 break;
 80057e4:	bf00      	nop
	 }
	 return  ret_dig;
 80057e6:	68fb      	ldr	r3, [r7, #12]
}
 80057e8:	4618      	mov	r0, r3
 80057ea:	3714      	adds	r7, #20
 80057ec:	46bd      	mov	sp, r7
 80057ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057f2:	4770      	bx	lr
 80057f4:	2000013c 	.word	0x2000013c
 80057f8:	20000190 	.word	0x20000190
 80057fc:	200001e4 	.word	0x200001e4
 8005800:	20000238 	.word	0x20000238
 8005804:	2000028c 	.word	0x2000028c
 8005808:	200002e0 	.word	0x200002e0
 800580c:	20000334 	.word	0x20000334
 8005810:	20000388 	.word	0x20000388
 8005814:	200003dc 	.word	0x200003dc
 8005818:	20000430 	.word	0x20000430
 800581c:	20000bd8 	.word	0x20000bd8

08005820 <p_c_get>:

extern uint8_t* p_c_get(uint8_t value)
{
 8005820:	b480      	push	{r7}
 8005822:	b085      	sub	sp, #20
 8005824:	af00      	add	r7, sp, #0
 8005826:	4603      	mov	r3, r0
 8005828:	71fb      	strb	r3, [r7, #7]
	uint8_t *get_font=value_poin;
 800582a:	4b0e      	ldr	r3, [pc, #56]	; (8005864 <p_c_get+0x44>)
 800582c:	60fb      	str	r3, [r7, #12]
	  switch (value) {
 800582e:	79fb      	ldrb	r3, [r7, #7]
 8005830:	2bff      	cmp	r3, #255	; 0xff
 8005832:	d00c      	beq.n	800584e <p_c_get+0x2e>
 8005834:	2bff      	cmp	r3, #255	; 0xff
 8005836:	dc0d      	bgt.n	8005854 <p_c_get+0x34>
 8005838:	2b00      	cmp	r3, #0
 800583a:	d002      	beq.n	8005842 <p_c_get+0x22>
 800583c:	2b01      	cmp	r3, #1
 800583e:	d003      	beq.n	8005848 <p_c_get+0x28>
	  break;
	  case 0xFF:
		  get_font=value_c_er;
		  break;
	  default:
		  break;
 8005840:	e008      	b.n	8005854 <p_c_get+0x34>
		  get_font=value_poin;
 8005842:	4b08      	ldr	r3, [pc, #32]	; (8005864 <p_c_get+0x44>)
 8005844:	60fb      	str	r3, [r7, #12]
	  break;
 8005846:	e006      	b.n	8005856 <p_c_get+0x36>
		  get_font=value_comma;
 8005848:	4b07      	ldr	r3, [pc, #28]	; (8005868 <p_c_get+0x48>)
 800584a:	60fb      	str	r3, [r7, #12]
	  break;
 800584c:	e003      	b.n	8005856 <p_c_get+0x36>
		  get_font=value_c_er;
 800584e:	4b07      	ldr	r3, [pc, #28]	; (800586c <p_c_get+0x4c>)
 8005850:	60fb      	str	r3, [r7, #12]
		  break;
 8005852:	e000      	b.n	8005856 <p_c_get+0x36>
		  break;
 8005854:	bf00      	nop
	  }
	  return get_font;
 8005856:	68fb      	ldr	r3, [r7, #12]
}
 8005858:	4618      	mov	r0, r3
 800585a:	3714      	adds	r7, #20
 800585c:	46bd      	mov	sp, r7
 800585e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005862:	4770      	bx	lr
 8005864:	20000484 	.word	0x20000484
 8005868:	200004a4 	.word	0x200004a4
 800586c:	20000c2c 	.word	0x20000c2c

08005870 <Get_image>:

uint8_t layer_hum0[] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};


extern uint8_t* Get_image(Layer_image Get_layer)
{
 8005870:	b480      	push	{r7}
 8005872:	b085      	sub	sp, #20
 8005874:	af00      	add	r7, sp, #0
 8005876:	4603      	mov	r3, r0
 8005878:	71fb      	strb	r3, [r7, #7]
	uint8_t *Ptc_image= NULL;
 800587a:	2300      	movs	r3, #0
 800587c:	60fb      	str	r3, [r7, #12]
	switch(Get_layer)
 800587e:	79fb      	ldrb	r3, [r7, #7]
 8005880:	2b07      	cmp	r3, #7
 8005882:	d82b      	bhi.n	80058dc <Get_image+0x6c>
 8005884:	a201      	add	r2, pc, #4	; (adr r2, 800588c <Get_image+0x1c>)
 8005886:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800588a:	bf00      	nop
 800588c:	080058ad 	.word	0x080058ad
 8005890:	080058b3 	.word	0x080058b3
 8005894:	080058b9 	.word	0x080058b9
 8005898:	080058bf 	.word	0x080058bf
 800589c:	080058c5 	.word	0x080058c5
 80058a0:	080058cb 	.word	0x080058cb
 80058a4:	080058d1 	.word	0x080058d1
 80058a8:	080058d7 	.word	0x080058d7
	{
	case 0:
		Ptc_image = layer0;
 80058ac:	4b0f      	ldr	r3, [pc, #60]	; (80058ec <Get_image+0x7c>)
 80058ae:	60fb      	str	r3, [r7, #12]
		break;
 80058b0:	e014      	b.n	80058dc <Get_image+0x6c>
	case 1:
		Ptc_image = layer1;
 80058b2:	4b0f      	ldr	r3, [pc, #60]	; (80058f0 <Get_image+0x80>)
 80058b4:	60fb      	str	r3, [r7, #12]
		break;
 80058b6:	e011      	b.n	80058dc <Get_image+0x6c>
	case 2:
		Ptc_image = layer2;
 80058b8:	4b0e      	ldr	r3, [pc, #56]	; (80058f4 <Get_image+0x84>)
 80058ba:	60fb      	str	r3, [r7, #12]
		break;
 80058bc:	e00e      	b.n	80058dc <Get_image+0x6c>
	case 3:
		Ptc_image = layer3;
 80058be:	4b0e      	ldr	r3, [pc, #56]	; (80058f8 <Get_image+0x88>)
 80058c0:	60fb      	str	r3, [r7, #12]
		break;
 80058c2:	e00b      	b.n	80058dc <Get_image+0x6c>
	case 4:
		Ptc_image = layer4;
 80058c4:	4b0d      	ldr	r3, [pc, #52]	; (80058fc <Get_image+0x8c>)
 80058c6:	60fb      	str	r3, [r7, #12]
		break;
 80058c8:	e008      	b.n	80058dc <Get_image+0x6c>
	case 5:
		Ptc_image = layer5;
 80058ca:	4b0d      	ldr	r3, [pc, #52]	; (8005900 <Get_image+0x90>)
 80058cc:	60fb      	str	r3, [r7, #12]
		break;
 80058ce:	e005      	b.n	80058dc <Get_image+0x6c>
	case 6:
		Ptc_image = layer6;
 80058d0:	4b0c      	ldr	r3, [pc, #48]	; (8005904 <Get_image+0x94>)
 80058d2:	60fb      	str	r3, [r7, #12]
		break;
 80058d4:	e002      	b.n	80058dc <Get_image+0x6c>
	case 7:
		Ptc_image = layer7;
 80058d6:	4b0c      	ldr	r3, [pc, #48]	; (8005908 <Get_image+0x98>)
 80058d8:	60fb      	str	r3, [r7, #12]
		break;
 80058da:	bf00      	nop
	}

	return Ptc_image;
 80058dc:	68fb      	ldr	r3, [r7, #12]
}
 80058de:	4618      	mov	r0, r3
 80058e0:	3714      	adds	r7, #20
 80058e2:	46bd      	mov	sp, r7
 80058e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058e8:	4770      	bx	lr
 80058ea:	bf00      	nop
 80058ec:	20000c8c 	.word	0x20000c8c
 80058f0:	20000604 	.word	0x20000604
 80058f4:	200005c4 	.word	0x200005c4
 80058f8:	20000584 	.word	0x20000584
 80058fc:	20000544 	.word	0x20000544
 8005900:	20000504 	.word	0x20000504
 8005904:	200004c4 	.word	0x200004c4
 8005908:	20000c4c 	.word	0x20000c4c

0800590c <Get_image_humed>:

uint8_t* Get_image_humed(Layer_image Get_layer)
{
 800590c:	b480      	push	{r7}
 800590e:	b085      	sub	sp, #20
 8005910:	af00      	add	r7, sp, #0
 8005912:	4603      	mov	r3, r0
 8005914:	71fb      	strb	r3, [r7, #7]
	uint8_t *Ptc_image = NULL;
 8005916:	2300      	movs	r3, #0
 8005918:	60fb      	str	r3, [r7, #12]
	switch(Get_layer)
 800591a:	79fb      	ldrb	r3, [r7, #7]
 800591c:	2b07      	cmp	r3, #7
 800591e:	d82b      	bhi.n	8005978 <Get_image_humed+0x6c>
 8005920:	a201      	add	r2, pc, #4	; (adr r2, 8005928 <Get_image_humed+0x1c>)
 8005922:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005926:	bf00      	nop
 8005928:	08005949 	.word	0x08005949
 800592c:	0800594f 	.word	0x0800594f
 8005930:	08005955 	.word	0x08005955
 8005934:	0800595b 	.word	0x0800595b
 8005938:	08005961 	.word	0x08005961
 800593c:	08005967 	.word	0x08005967
 8005940:	0800596d 	.word	0x0800596d
 8005944:	08005973 	.word	0x08005973
	{
  case 0:
		Ptc_image = layer_hum0;
 8005948:	4b0f      	ldr	r3, [pc, #60]	; (8005988 <Get_image_humed+0x7c>)
 800594a:	60fb      	str	r3, [r7, #12]
		break;
 800594c:	e014      	b.n	8005978 <Get_image_humed+0x6c>
	case 1:
		Ptc_image = layer_hum1;
 800594e:	4b0f      	ldr	r3, [pc, #60]	; (800598c <Get_image_humed+0x80>)
 8005950:	60fb      	str	r3, [r7, #12]
		break;
 8005952:	e011      	b.n	8005978 <Get_image_humed+0x6c>
	case 2:
		Ptc_image = layer_hum2;
 8005954:	4b0e      	ldr	r3, [pc, #56]	; (8005990 <Get_image_humed+0x84>)
 8005956:	60fb      	str	r3, [r7, #12]
		break;
 8005958:	e00e      	b.n	8005978 <Get_image_humed+0x6c>
	case 3:
		Ptc_image = layer_hum3;
 800595a:	4b0e      	ldr	r3, [pc, #56]	; (8005994 <Get_image_humed+0x88>)
 800595c:	60fb      	str	r3, [r7, #12]
		break;
 800595e:	e00b      	b.n	8005978 <Get_image_humed+0x6c>
	case 4:
		Ptc_image = layer_hum4;
 8005960:	4b0d      	ldr	r3, [pc, #52]	; (8005998 <Get_image_humed+0x8c>)
 8005962:	60fb      	str	r3, [r7, #12]
		break;
 8005964:	e008      	b.n	8005978 <Get_image_humed+0x6c>
	case 5:
		Ptc_image = layer_hum5;
 8005966:	4b0d      	ldr	r3, [pc, #52]	; (800599c <Get_image_humed+0x90>)
 8005968:	60fb      	str	r3, [r7, #12]
		break;
 800596a:	e005      	b.n	8005978 <Get_image_humed+0x6c>
	case 6:
		Ptc_image = layer_hum6;
 800596c:	4b0c      	ldr	r3, [pc, #48]	; (80059a0 <Get_image_humed+0x94>)
 800596e:	60fb      	str	r3, [r7, #12]
		break;
 8005970:	e002      	b.n	8005978 <Get_image_humed+0x6c>
	case 7:
		Ptc_image = layer_hum7;
 8005972:	4b0c      	ldr	r3, [pc, #48]	; (80059a4 <Get_image_humed+0x98>)
 8005974:	60fb      	str	r3, [r7, #12]
		break;
 8005976:	bf00      	nop
	}
	return Ptc_image;
 8005978:	68fb      	ldr	r3, [r7, #12]
}
 800597a:	4618      	mov	r0, r3
 800597c:	3714      	adds	r7, #20
 800597e:	46bd      	mov	sp, r7
 8005980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005984:	4770      	bx	lr
 8005986:	bf00      	nop
 8005988:	20000d8c 	.word	0x20000d8c
 800598c:	20000d4c 	.word	0x20000d4c
 8005990:	20000704 	.word	0x20000704
 8005994:	200006c4 	.word	0x200006c4
 8005998:	20000684 	.word	0x20000684
 800599c:	20000644 	.word	0x20000644
 80059a0:	20000d0c 	.word	0x20000d0c
 80059a4:	20000ccc 	.word	0x20000ccc

080059a8 <steps_routine>:

#include "main.h"
#include "I2C_LCD.h"

extern void steps_routine(uint8_t tasks)
{
 80059a8:	b580      	push	{r7, lr}
 80059aa:	b082      	sub	sp, #8
 80059ac:	af00      	add	r7, sp, #0
 80059ae:	4603      	mov	r3, r0
 80059b0:	71fb      	strb	r3, [r7, #7]
	switch (tasks) {
 80059b2:	79fb      	ldrb	r3, [r7, #7]
 80059b4:	2b03      	cmp	r3, #3
 80059b6:	d81b      	bhi.n	80059f0 <steps_routine+0x48>
 80059b8:	a201      	add	r2, pc, #4	; (adr r2, 80059c0 <steps_routine+0x18>)
 80059ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059be:	bf00      	nop
 80059c0:	080059d1 	.word	0x080059d1
 80059c4:	080059d9 	.word	0x080059d9
 80059c8:	080059e1 	.word	0x080059e1
 80059cc:	080059e9 	.word	0x080059e9
		case 0:
			write_image(0);
 80059d0:	2000      	movs	r0, #0
 80059d2:	f7ff fcaf 	bl	8005334 <write_image>
			break;
 80059d6:	e00c      	b.n	80059f2 <steps_routine+0x4a>
		case 1:
			show_h_t(0);
 80059d8:	2000      	movs	r0, #0
 80059da:	f7ff fc69 	bl	80052b0 <show_h_t>
			break;
 80059de:	e008      	b.n	80059f2 <steps_routine+0x4a>
		case 2:
			write_image(1);
 80059e0:	2001      	movs	r0, #1
 80059e2:	f7ff fca7 	bl	8005334 <write_image>
			break;
 80059e6:	e004      	b.n	80059f2 <steps_routine+0x4a>
		case 3:
			show_h_t(1);
 80059e8:	2001      	movs	r0, #1
 80059ea:	f7ff fc61 	bl	80052b0 <show_h_t>
			break;
 80059ee:	e000      	b.n	80059f2 <steps_routine+0x4a>
		default:
			break;
 80059f0:	bf00      	nop
	}
}
 80059f2:	bf00      	nop
 80059f4:	3708      	adds	r7, #8
 80059f6:	46bd      	mov	sp, r7
 80059f8:	bd80      	pop	{r7, pc}
 80059fa:	bf00      	nop

080059fc <Util_Arr_32BIND>:

#include "util.h"
#include "main.h"

extern uint32_t Util_Arr_32BIND(uint8_t *Arr_inp )
{
 80059fc:	b480      	push	{r7}
 80059fe:	b085      	sub	sp, #20
 8005a00:	af00      	add	r7, sp, #0
 8005a02:	6078      	str	r0, [r7, #4]
	uint32_t ret_val = 0;
 8005a04:	2300      	movs	r3, #0
 8005a06:	60fb      	str	r3, [r7, #12]
	ret_val = (Arr_inp[0]) |  (Arr_inp[1] << 8) | (Arr_inp[2] << 16) | (Arr_inp[3]<<24 );
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	781b      	ldrb	r3, [r3, #0]
 8005a0c:	461a      	mov	r2, r3
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	3301      	adds	r3, #1
 8005a12:	781b      	ldrb	r3, [r3, #0]
 8005a14:	021b      	lsls	r3, r3, #8
 8005a16:	431a      	orrs	r2, r3
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	3302      	adds	r3, #2
 8005a1c:	781b      	ldrb	r3, [r3, #0]
 8005a1e:	041b      	lsls	r3, r3, #16
 8005a20:	431a      	orrs	r2, r3
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	3303      	adds	r3, #3
 8005a26:	781b      	ldrb	r3, [r3, #0]
 8005a28:	061b      	lsls	r3, r3, #24
 8005a2a:	4313      	orrs	r3, r2
 8005a2c:	60fb      	str	r3, [r7, #12]

	return ret_val;
 8005a2e:	68fb      	ldr	r3, [r7, #12]
}
 8005a30:	4618      	mov	r0, r3
 8005a32:	3714      	adds	r7, #20
 8005a34:	46bd      	mov	sp, r7
 8005a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a3a:	4770      	bx	lr

08005a3c <__libc_init_array>:
 8005a3c:	b570      	push	{r4, r5, r6, lr}
 8005a3e:	4d0d      	ldr	r5, [pc, #52]	; (8005a74 <__libc_init_array+0x38>)
 8005a40:	4c0d      	ldr	r4, [pc, #52]	; (8005a78 <__libc_init_array+0x3c>)
 8005a42:	1b64      	subs	r4, r4, r5
 8005a44:	10a4      	asrs	r4, r4, #2
 8005a46:	2600      	movs	r6, #0
 8005a48:	42a6      	cmp	r6, r4
 8005a4a:	d109      	bne.n	8005a60 <__libc_init_array+0x24>
 8005a4c:	4d0b      	ldr	r5, [pc, #44]	; (8005a7c <__libc_init_array+0x40>)
 8005a4e:	4c0c      	ldr	r4, [pc, #48]	; (8005a80 <__libc_init_array+0x44>)
 8005a50:	f000 f820 	bl	8005a94 <_init>
 8005a54:	1b64      	subs	r4, r4, r5
 8005a56:	10a4      	asrs	r4, r4, #2
 8005a58:	2600      	movs	r6, #0
 8005a5a:	42a6      	cmp	r6, r4
 8005a5c:	d105      	bne.n	8005a6a <__libc_init_array+0x2e>
 8005a5e:	bd70      	pop	{r4, r5, r6, pc}
 8005a60:	f855 3b04 	ldr.w	r3, [r5], #4
 8005a64:	4798      	blx	r3
 8005a66:	3601      	adds	r6, #1
 8005a68:	e7ee      	b.n	8005a48 <__libc_init_array+0xc>
 8005a6a:	f855 3b04 	ldr.w	r3, [r5], #4
 8005a6e:	4798      	blx	r3
 8005a70:	3601      	adds	r6, #1
 8005a72:	e7f2      	b.n	8005a5a <__libc_init_array+0x1e>
 8005a74:	08009fc4 	.word	0x08009fc4
 8005a78:	08009fc4 	.word	0x08009fc4
 8005a7c:	08009fc4 	.word	0x08009fc4
 8005a80:	08009fc8 	.word	0x08009fc8

08005a84 <memset>:
 8005a84:	4402      	add	r2, r0
 8005a86:	4603      	mov	r3, r0
 8005a88:	4293      	cmp	r3, r2
 8005a8a:	d100      	bne.n	8005a8e <memset+0xa>
 8005a8c:	4770      	bx	lr
 8005a8e:	f803 1b01 	strb.w	r1, [r3], #1
 8005a92:	e7f9      	b.n	8005a88 <memset+0x4>

08005a94 <_init>:
 8005a94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a96:	bf00      	nop
 8005a98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005a9a:	bc08      	pop	{r3}
 8005a9c:	469e      	mov	lr, r3
 8005a9e:	4770      	bx	lr

08005aa0 <_fini>:
 8005aa0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005aa2:	bf00      	nop
 8005aa4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005aa6:	bc08      	pop	{r3}
 8005aa8:	469e      	mov	lr, r3
 8005aaa:	4770      	bx	lr
